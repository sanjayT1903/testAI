{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "bda1b689",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-08T22:21:03.735435Z",
     "iopub.status.busy": "2024-09-08T22:21:03.734985Z",
     "iopub.status.idle": "2024-09-08T22:21:07.193848Z",
     "shell.execute_reply": "2024-09-08T22:21:07.192294Z"
    },
    "papermill": {
     "duration": 3.471285,
     "end_time": "2024-09-08T22:21:07.198150",
     "exception": false,
     "start_time": "2024-09-08T22:21:03.726865",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import matplotlib.pyplot as plt\n",
    "import random\n",
    "from torch.optim import LBFGS\n",
    "from tqdm import tqdm\n",
    "\n",
    "from utility_py import *\n",
    "\n",
    "class PINNs(nn.Module):\n",
    "    def __init__(self, in_dim, hidden_dim, out_dim, num_layer):\n",
    "        super(PINNs, self).__init__()\n",
    "\n",
    "        layers = []\n",
    "        for i in range(num_layer-1):\n",
    "            if i == 0:\n",
    "                layers.append(nn.Linear(in_features=in_dim, out_features=hidden_dim))\n",
    "                layers.append(nn.Tanh())\n",
    "            else:\n",
    "                layers.append(nn.Linear(in_features=hidden_dim, out_features=hidden_dim))\n",
    "                layers.append(nn.Tanh())\n",
    "\n",
    "        layers.append(nn.Linear(in_features=hidden_dim, out_features=out_dim))\n",
    "\n",
    "        self.linear = nn.Sequential(*layers)\n",
    "\n",
    "    def forward(self, x, t):\n",
    "        src = torch.cat((x,t), dim=-1)\n",
    "        return self.linear(src)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f53543c4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-08T22:21:07.216596Z",
     "iopub.status.busy": "2024-09-08T22:21:07.216073Z",
     "iopub.status.idle": "2024-09-08T22:21:07.247123Z",
     "shell.execute_reply": "2024-09-08T22:21:07.246103Z"
    },
    "papermill": {
     "duration": 0.04198,
     "end_time": "2024-09-08T22:21:07.249736",
     "exception": false,
     "start_time": "2024-09-08T22:21:07.207756",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# implementation of PINNsformer\n",
    "# paper: PINNsFormer: A Transformer-Based Framework For Physics-Informed Neural Networks\n",
    "# link: https://arxiv.org/abs/2307.11833\n",
    "\n",
    "import pdb\n",
    "\n",
    "#from utility_py import get_clones\n",
    "\n",
    "class WaveAct(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(WaveAct, self).__init__() \n",
    "        self.w1 = nn.Parameter(torch.ones(1), requires_grad=True)\n",
    "        self.w2 = nn.Parameter(torch.ones(1), requires_grad=True)\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.w1 * torch.sin(x)+ self.w2 * torch.cos(x)\n",
    "\n",
    "class FeedForward(nn.Module):\n",
    "    def __init__(self, d_model, d_ff=256):\n",
    "        super(FeedForward, self).__init__() \n",
    "        self.linear = nn.Sequential(*[\n",
    "            nn.Linear(d_model, d_ff),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_ff, d_ff),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_ff, d_model)\n",
    "        ])\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.linear(x)\n",
    "\n",
    "\n",
    "class EncoderLayer(nn.Module):\n",
    "    def __init__(self, d_model, heads):\n",
    "        super(EncoderLayer, self).__init__()\n",
    "\n",
    "        self.attn = nn.MultiheadAttention(embed_dim=d_model, num_heads=heads, batch_first=True)\n",
    "        self.ff = FeedForward(d_model)\n",
    "        self.act1 = WaveAct()\n",
    "        self.act2 = WaveAct()\n",
    "        \n",
    "    def forward(self, x):\n",
    "        x2 = self.act1(x)\n",
    "        # pdb.set_trace()\n",
    "        x = x + self.attn(x2,x2,x2)[0]\n",
    "        x2 = self.act2(x)\n",
    "        x = x + self.ff(x2)\n",
    "        return x\n",
    "\n",
    "\n",
    "class DecoderLayer(nn.Module):\n",
    "    def __init__(self, d_model, heads):\n",
    "        super(DecoderLayer, self).__init__()\n",
    "\n",
    "        self.attn = nn.MultiheadAttention(embed_dim=d_model, num_heads=heads, batch_first=True)\n",
    "        self.ff = FeedForward(d_model)\n",
    "        self.act1 = WaveAct()\n",
    "        self.act2 = WaveAct()\n",
    "\n",
    "    def forward(self, x, e_outputs): \n",
    "        x2 = self.act1(x)\n",
    "        x = x + self.attn(x2, e_outputs, e_outputs)[0]\n",
    "        x2 = self.act2(x)\n",
    "        x = x + self.ff(x2)\n",
    "        return x\n",
    "\n",
    "\n",
    "class Encoder(nn.Module):\n",
    "    def __init__(self, d_model, N, heads):\n",
    "        super(Encoder, self).__init__()\n",
    "        self.N = N\n",
    "        self.layers = get_clones(EncoderLayer(d_model, heads), N)\n",
    "        self.act = WaveAct()\n",
    "\n",
    "    def forward(self, x):\n",
    "        for i in range(self.N):\n",
    "            x = self.layers[i](x)\n",
    "        return self.act(x)\n",
    "\n",
    "class Decoder(nn.Module):\n",
    "    def __init__(self, d_model, N, heads):\n",
    "        super(Decoder, self).__init__()\n",
    "        self.N = N\n",
    "        self.layers = get_clones(DecoderLayer(d_model, heads), N)\n",
    "        self.act = WaveAct()\n",
    "        \n",
    "    def forward(self, x, e_outputs):\n",
    "        for i in range(self.N):\n",
    "            x = self.layers[i](x, e_outputs)\n",
    "        return self.act(x)\n",
    "\n",
    "\n",
    "\n",
    "class PINNsformer(nn.Module):\n",
    "    def __init__(self, d_out, d_model, d_hidden, N, heads):\n",
    "        super(PINNsformer, self).__init__()\n",
    "\n",
    "        self.linear_emb = nn.Linear(2, d_model)\n",
    "\n",
    "        self.encoder = Encoder(d_model, N, heads)\n",
    "        self.decoder = Decoder(d_model, N, heads)\n",
    "        self.linear_out = nn.Sequential(*[\n",
    "            nn.Linear(d_model, d_hidden),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_hidden, d_hidden),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_hidden, d_out)\n",
    "        ])\n",
    "\n",
    "    def forward(self, x, t):\n",
    "        src = torch.cat((x,t), dim=-1)\n",
    "        src = self.linear_emb(src)\n",
    "\n",
    "        e_outputs = self.encoder(src)\n",
    "        d_output = self.decoder(src, e_outputs)\n",
    "        output = self.linear_out(d_output)\n",
    "        # pdb.set_trace()\n",
    "        # raise Exception('stop')\n",
    "        return output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "bc970847",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-08T22:21:07.266269Z",
     "iopub.status.busy": "2024-09-08T22:21:07.265819Z",
     "iopub.status.idle": "2024-09-08T22:21:08.233181Z",
     "shell.execute_reply": "2024-09-08T22:21:08.231986Z"
    },
    "papermill": {
     "duration": 0.980002,
     "end_time": "2024-09-08T22:21:08.235709",
     "exception": false,
     "start_time": "2024-09-08T22:21:07.255707",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_23/3867972684.py:35: DeprecationWarning: Conversion of an array with ndim > 0 to a scalar is deprecated, and will error in future. Ensure you extract a single element from your array before performing this operation. (Deprecated NumPy 1.25.)\n",
      "  usol[i][j] = heat_eq_exact_solution(x[i], t[j])\n"
     ]
    }
   ],
   "source": [
    "a = 0.4  # Thermal diffusivity\n",
    "L = 1  # Length of the bar\n",
    "n = 1  # Frequency of the sinusoidal initial conditions\n",
    "# device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "# model = model.to(device)\n",
    "\n",
    "\n",
    "def heat_eq_exact_solution(x, t):\n",
    "    \"\"\"Returns the exact solution for a given x and t (for sinusoidal initial conditions).\n",
    "\n",
    "    Parameters\n",
    "    ----------\n",
    "    x : np.ndarray\n",
    "    t : np.ndarray\n",
    "    \"\"\"\n",
    "    return np.exp(-(n**2 * np.pi**2 * a * t) / (L**2)) * np.sin(n * np.pi * x / L)\n",
    "\n",
    "def gen_exact_solution():\n",
    "    \"\"\"Generates exact solution for the heat equation for the given values of x and t.\"\"\"\n",
    "    # Number of points in each dimension:\n",
    "    x_dim, t_dim = (256, 201)\n",
    "\n",
    "    # Bounds of 'x' and 't':\n",
    "    x_min, t_min = (0, 0.0)\n",
    "    x_max, t_max = (L, 1.0)\n",
    "\n",
    "    # Create tensors:\n",
    "    t = np.linspace(t_min, t_max, num=t_dim).reshape(t_dim, 1)\n",
    "    x = np.linspace(x_min, x_max, num=x_dim).reshape(x_dim, 1)\n",
    "    usol = np.zeros((x_dim, t_dim)).reshape(x_dim, t_dim)\n",
    "\n",
    "    # Obtain the value of the exact solution for each generated point:\n",
    "    for i in range(x_dim):\n",
    "        for j in range(t_dim):\n",
    "            usol[i][j] = heat_eq_exact_solution(x[i], t[j])\n",
    "\n",
    "    # Save solution:\n",
    "    np.savez(\"heat_eq_data\", x=x, t=t, usol=usol)\n",
    "\n",
    "\n",
    "def gen_testdata():\n",
    "    \"\"\"Import and preprocess the dataset with the exact solution.\"\"\"\n",
    "    # Load the data:\n",
    "    data = np.load(\"heat_eq_data.npz\")\n",
    "    # Obtain the values for t, x, and the excat solution:\n",
    "    t, x, exact = data[\"t\"], data[\"x\"], data[\"usol\"].T\n",
    "    # Process the data and flatten it out (like labels and features):\n",
    "    xx, tt = np.meshgrid(x, t)\n",
    "    X = np.vstack((np.ravel(xx), np.ravel(tt))).T\n",
    "    y = exact.flatten()[:, None]\n",
    "    return X, y\n",
    "\n",
    "gen_exact_solution()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "16d17cb5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-08T22:21:08.247569Z",
     "iopub.status.busy": "2024-09-08T22:21:08.247214Z",
     "iopub.status.idle": "2024-09-08T22:21:08.312063Z",
     "shell.execute_reply": "2024-09-08T22:21:08.310878Z"
    },
    "papermill": {
     "duration": 0.073067,
     "end_time": "2024-09-08T22:21:08.314215",
     "exception": false,
     "start_time": "2024-09-08T22:21:08.241148",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cuda:0\n"
     ]
    }
   ],
   "source": [
    "seed = 1\n",
    "np.random.seed(seed)\n",
    "random.seed(seed)\n",
    "torch.manual_seed(seed)\n",
    "torch.cuda.manual_seed(seed)\n",
    "torch.cuda.is_available() \n",
    "\n",
    "device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\n",
    "print(device)\n",
    "step_size = 1e-4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c278d01a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-08T22:21:08.325815Z",
     "iopub.status.busy": "2024-09-08T22:21:08.325461Z",
     "iopub.status.idle": "2024-09-08T22:21:08.330574Z",
     "shell.execute_reply": "2024-09-08T22:21:08.329698Z"
    },
    "papermill": {
     "duration": 0.013403,
     "end_time": "2024-09-08T22:21:08.332687",
     "exception": false,
     "start_time": "2024-09-08T22:21:08.319284",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# # Train PINNsformer\n",
    "# res, b_left, b_right, b_upper, b_lower = get_data([0,L], [0,1], 51, 51)\n",
    "# res_test, _, _, _, _ = get_data([0,L], [0,1], 101, 101)\n",
    "\n",
    "# res = make_time_sequence(res, num_step=5, step=1e-4)\n",
    "# b_left = make_time_sequence(b_left, num_step=5, step=1e-4)\n",
    "# b_right = make_time_sequence(b_right, num_step=5, step=1e-4)\n",
    "# b_upper = make_time_sequence(b_upper, num_step=5, step=1e-4)\n",
    "# b_lower = make_time_sequence(b_lower, num_step=5, step=1e-4)\n",
    "\n",
    "# res = torch.tensor(res, dtype=torch.float32, requires_grad=True).to(device)\n",
    "# b_left = torch.tensor(b_left, dtype=torch.float32, requires_grad=True).to(device)\n",
    "# b_right = torch.tensor(b_right, dtype=torch.float32, requires_grad=True).to(device)\n",
    "# b_upper = torch.tensor(b_upper, dtype=torch.float32, requires_grad=True).to(device)\n",
    "# b_lower = torch.tensor(b_lower, dtype=torch.float32, requires_grad=True).to(device)\n",
    "\n",
    "# x_res, t_res = res[:,:,0:1], res[:,:,1:2]\n",
    "# x_left, t_left = b_left[:,:,0:1], b_left[:,:,1:2]\n",
    "# x_right, t_right = b_right[:,:,0:1], b_right[:,:,1:2]\n",
    "# x_upper, t_upper = b_upper[:,:,0:1], b_upper[:,:,1:2]\n",
    "# x_lower, t_lower = b_lower[:,:,0:1], b_lower[:,:,1:2]\n",
    "\n",
    "# def init_weights(m):\n",
    "#     if isinstance(m, nn.Linear):\n",
    "#         torch.nn.init.xavier_uniform(m.weight)\n",
    "#         m.bias.data.fill_(0.01)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "27257804",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-08T22:21:08.344146Z",
     "iopub.status.busy": "2024-09-08T22:21:08.343832Z",
     "iopub.status.idle": "2024-09-08T22:21:08.539255Z",
     "shell.execute_reply": "2024-09-08T22:21:08.538440Z"
    },
    "papermill": {
     "duration": 0.204001,
     "end_time": "2024-09-08T22:21:08.541731",
     "exception": false,
     "start_time": "2024-09-08T22:21:08.337730",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.   0.02 0.04 ... 0.96 0.98 1.  ]\n"
     ]
    }
   ],
   "source": [
    "\n",
    "res, b_left, b_right, _, _ = get_data([0, L], [0, 1], 51, 51)\n",
    "res_test, _, _, _, _ = get_data([0, L], [0, 1], 101, 101)\n",
    "\n",
    "# Define the initial condition for u(x, 0)\n",
    "def u_init(x):\n",
    "   \n",
    "    return np.sin(n * np.pi * x / L)\n",
    "print(res[:, 0])\n",
    "\n",
    "# Apply the initial condition to the spatial points at t=0\n",
    "init_cond = u_init(res[:, 0])  # Assuming t=0 corresponds to the first time point\n",
    "\n",
    "# Extend time sequence\n",
    "res = make_time_sequence(res, num_step=5, step=1e-4)\n",
    "b_left = make_time_sequence(b_left, num_step=5, step=1e-4)\n",
    "b_right = make_time_sequence(b_right, num_step=5, step=1e-4)\n",
    "\n",
    "# Convert to PyTorch tensors\n",
    "res = torch.tensor(res, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_left = torch.tensor(b_left, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_right = torch.tensor(b_right, dtype=torch.float32, requires_grad=True).to(device)\n",
    "\n",
    "# Initial condition as tensor\n",
    "init_cond = torch.tensor(init_cond, dtype=torch.float32).to(device)\n",
    "\n",
    "# Separate spatial (x) and temporal (t) components\n",
    "x_res, t_res = res[:, :, 0:1], res[:, :, 1:2]\n",
    "x_left, t_left = b_left[:, :, 0:1], b_left[:, :, 1:2]\n",
    "x_right, t_right = b_right[:, :, 0:1], b_right[:, :, 1:2]\n",
    "\n",
    "\n",
    "\n",
    "# Boundary conditions:\n",
    "# You will now have to impose boundary conditions as part of your training loss.\n",
    "# For example, if u(0, t) = 0 and u(L, t) = 0 (Dirichlet conditions), include them in the loss function.\n",
    "\n",
    "# Initialize model weights\n",
    "def init_weights(m):\n",
    "    if isinstance(m, nn.Linear):\n",
    "        torch.nn.init.xavier_uniform_(m.weight)\n",
    "        m.bias.data.fill_(0.01)\n",
    "\n",
    "# # Define loss function (for PINNs)\n",
    "# def loss_function(model_output, x_res, t_res, init_cond, b_left, b_right):\n",
    "#     # 1. PDE residual loss (based on the heat equation)\n",
    "#     # Compute u(x,t) from the model, then compute the PDE residual\n",
    "#     u = model_output(x_res, t_res)\n",
    "#     u_t = torch.autograd.grad(u, t_res, grad_outputs=torch.ones_like(u), create_graph=True)[0]\n",
    "#     u_xx = torch.autograd.grad(torch.autograd.grad(u, x_res, grad_outputs=torch.ones_like(u), create_graph=True)[0], x_res, grad_outputs=torch.ones_like(u), create_graph=True)[0]\n",
    "    \n",
    "#     residual_loss = torch.mean((u_t - alpha * u_xx) ** 2)\n",
    "\n",
    "#     # 2. Initial condition loss: enforce u(x, 0) = f(x)\n",
    "#     init_loss = torch.mean((u[:, 0, :] - init_cond) ** 2)  # Check the axis indexing if necessary\n",
    "\n",
    "#     # 3. Boundary conditions: enforce Dirichlet BCs (u(0,t) = u(L,t) = 0)\n",
    "#     left_bc_loss = torch.mean((u(x_left, t_left)) ** 2)\n",
    "#     right_bc_loss = torch.mean((u(x_right, t_right)) ** 2)\n",
    "\n",
    "#     # Combine the losses\n",
    "#     total_loss = residual_loss + init_loss + left_bc_loss + right_bc_loss\n",
    "#     return total_loss\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b2266cb7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-08T22:21:08.554238Z",
     "iopub.status.busy": "2024-09-08T22:21:08.553837Z",
     "iopub.status.idle": "2024-09-08T22:21:09.969471Z",
     "shell.execute_reply": "2024-09-08T22:21:09.968527Z"
    },
    "papermill": {
     "duration": 1.424802,
     "end_time": "2024-09-08T22:21:09.972027",
     "exception": false,
     "start_time": "2024-09-08T22:21:08.547225",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PINNsformer(\n",
      "  (linear_emb): Linear(in_features=2, out_features=32, bias=True)\n",
      "  (encoder): Encoder(\n",
      "    (layers): ModuleList(\n",
      "      (0): EncoderLayer(\n",
      "        (attn): MultiheadAttention(\n",
      "          (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)\n",
      "        )\n",
      "        (ff): FeedForward(\n",
      "          (linear): Sequential(\n",
      "            (0): Linear(in_features=32, out_features=256, bias=True)\n",
      "            (1): WaveAct()\n",
      "            (2): Linear(in_features=256, out_features=256, bias=True)\n",
      "            (3): WaveAct()\n",
      "            (4): Linear(in_features=256, out_features=32, bias=True)\n",
      "          )\n",
      "        )\n",
      "        (act1): WaveAct()\n",
      "        (act2): WaveAct()\n",
      "      )\n",
      "    )\n",
      "    (act): WaveAct()\n",
      "  )\n",
      "  (decoder): Decoder(\n",
      "    (layers): ModuleList(\n",
      "      (0): DecoderLayer(\n",
      "        (attn): MultiheadAttention(\n",
      "          (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)\n",
      "        )\n",
      "        (ff): FeedForward(\n",
      "          (linear): Sequential(\n",
      "            (0): Linear(in_features=32, out_features=256, bias=True)\n",
      "            (1): WaveAct()\n",
      "            (2): Linear(in_features=256, out_features=256, bias=True)\n",
      "            (3): WaveAct()\n",
      "            (4): Linear(in_features=256, out_features=32, bias=True)\n",
      "          )\n",
      "        )\n",
      "        (act1): WaveAct()\n",
      "        (act2): WaveAct()\n",
      "      )\n",
      "    )\n",
      "    (act): WaveAct()\n",
      "  )\n",
      "  (linear_out): Sequential(\n",
      "    (0): Linear(in_features=32, out_features=512, bias=True)\n",
      "    (1): WaveAct()\n",
      "    (2): Linear(in_features=512, out_features=512, bias=True)\n",
      "    (3): WaveAct()\n",
      "    (4): Linear(in_features=512, out_features=1, bias=True)\n",
      "  )\n",
      ")\n",
      "453561\n"
     ]
    }
   ],
   "source": [
    "model = PINNsformer(d_out=1, d_hidden=512, d_model=32, N=1, heads=2).to(device)\n",
    "import torch.optim as optimer\n",
    "model.apply(init_weights)\n",
    "optim = LBFGS(model.parameters(), line_search_fn='strong_wolfe')\n",
    "#optim = optimer.Adam(model.parameters(), lr=1e-4)\n",
    "\n",
    "print(model)\n",
    "print(get_n_params(model))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "3fcb62ec",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-08T22:21:09.984365Z",
     "iopub.status.busy": "2024-09-08T22:21:09.983942Z",
     "iopub.status.idle": "2024-09-08T22:39:09.054313Z",
     "shell.execute_reply": "2024-09-08T22:39:09.053169Z"
    },
    "papermill": {
     "duration": 1079.080484,
     "end_time": "2024-09-08T22:39:09.058020",
     "exception": false,
     "start_time": "2024-09-08T22:21:09.977536",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  0%|          | 0/500 [00:00<?, ?it/s]/opt/conda/lib/python3.10/site-packages/torch/autograd/graph.py:768: UserWarning: Attempting to run cuBLAS, but there was no current CUDA context! Attempting to set the primary context... (Triggered internally at /usr/local/src/pytorch/aten/src/ATen/cuda/CublasHandlePool.cpp:135.)\n",
      "  return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass\n",
      " 20%|█▉        | 99/500 [06:02<23:27,  3.51s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "progress\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 40%|███▉      | 199/500 [12:00<15:55,  3.18s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "progress\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 60%|█████▉    | 299/500 [14:55<03:03,  1.10it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "progress\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 80%|███████▉  | 399/500 [16:26<01:32,  1.09it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "progress\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|█████████▉| 499/500 [17:58<00:00,  1.09it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "progress\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 500/500 [17:59<00:00,  2.16s/it]\n"
     ]
    }
   ],
   "source": [
    "#print(x_res)\n",
    "def check_nan(tensor, name):\n",
    "    if torch.isnan(tensor).any():\n",
    "        print(f\"NaNs detected in {name}\")\n",
    "loss_track = []\n",
    "a = 0.4  # Thermal diffusivity\n",
    "L = 1  # Length of the bar\n",
    "n = 1  # Frequency of the sinusoidal initial conditions\n",
    "k= 0 \n",
    "for i in tqdm(range(500)):\n",
    "    k+=1\n",
    "    if k == 100:\n",
    "            print(\"progress\")\n",
    "            k=0\n",
    "    def closure():\n",
    "        \n",
    "        pred_res = model(x_res, t_res)\n",
    "        pred_left = model(x_left, t_left)\n",
    "        pred_right = model(x_right, t_right)\n",
    "        #print(pred_res)\n",
    "        pred_res_t0 = pred_res[:, 0, :]\n",
    "        \n",
    "        #pred_upper = model(x_upper, t_upper)\n",
    "        #\n",
    "        #pred_lower = model(x_lower, t_lower)\n",
    "\n",
    "#         u_x = torch.autograd.grad(pred_res, x_res, grad_outputs=torch.ones_like(pred_res), retain_graph=True, create_graph=True)[0]\n",
    "#         u_t = torch.autograd.grad(pred_res, t_res, grad_outputs=torch.ones_like(pred_res), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "#         loss_res = torch.mean((u_t - 5 * pred_res * (1-pred_res)) ** 2)\n",
    "\n",
    "        u_x = torch.autograd.grad(pred_res, x_res, grad_outputs=torch.ones_like(pred_res), retain_graph=True, create_graph=True)[0]\n",
    "        u_xx = torch.autograd.grad(u_x, x_res, grad_outputs=torch.ones_like(u_x), retain_graph=True, create_graph=True)[0]\n",
    "        u_t = torch.autograd.grad(pred_res, t_res, grad_outputs=torch.ones_like(pred_res), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "        \n",
    "        check_nan(u_x, 'u_x')\n",
    "        check_nan(u_xx, 'u_xx')\n",
    "        check_nan(u_t, 'u_t')\n",
    "        # Heat equation: ∂u/∂t = alpha * ∂²u/∂x²\n",
    "        alpha =a   # thermal diffusivity (can be modified)\n",
    "        loss_res =torch.mean((u_t - alpha * u_xx)**2 )\n",
    "        \n",
    "        loss_ic = torch.mean((pred_res_t0- init_cond) ** 2)  # Check the axis indexing if necessary\n",
    "\n",
    "        # 3. Boundary conditions: enforce Dirichlet BCs (u(0,t) = u(L,t) = 0)\n",
    "        left_bc_loss = torch.mean(pred_left ** 2)\n",
    "        right_bc_loss = torch.mean(pred_right ** 2)\n",
    "        #loss_bc =  torch.mean((pred_left-pred_right) ** 2)\n",
    "\n",
    "        #print(loss_res)\n",
    "        loss_track.append([loss_res.item(), loss_ic.item(), left_bc_loss.item(), right_bc_loss.item()])\n",
    "\n",
    "        loss = loss_res + loss_ic + left_bc_loss + right_bc_loss\n",
    "        optim.zero_grad()\n",
    "        loss.backward()\n",
    "        return loss\n",
    "\n",
    "    optim.step(closure)\n",
    "    #print(loss_track)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "f3d719d0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-08T22:39:09.161193Z",
     "iopub.status.busy": "2024-09-08T22:39:09.160757Z",
     "iopub.status.idle": "2024-09-08T22:39:09.166415Z",
     "shell.execute_reply": "2024-09-08T22:39:09.165517Z"
    },
    "papermill": {
     "duration": 0.060777,
     "end_time": "2024-09-08T22:39:09.168859",
     "exception": false,
     "start_time": "2024-09-08T22:39:09.108082",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Length of loss_track: 6778\n"
     ]
    }
   ],
   "source": [
    "print(f\"Length of loss_track: {len(loss_track)}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "3c64c189",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-08T22:39:09.265709Z",
     "iopub.status.busy": "2024-09-08T22:39:09.265288Z",
     "iopub.status.idle": "2024-09-08T22:39:09.283835Z",
     "shell.execute_reply": "2024-09-08T22:39:09.282652Z"
    },
    "papermill": {
     "duration": 0.069581,
     "end_time": "2024-09-08T22:39:09.285899",
     "exception": false,
     "start_time": "2024-09-08T22:39:09.216318",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.001962, Loss_IC: 0.173861, Loss_BC_left: 0.004130, Loss_BC_right: 0.017319\n",
      "Train Loss: 0.197273\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, Loss_BC_left: {:4f}, Loss_BC_right: {:4f}'.format(loss_track[-1][0], loss_track[-1][1], loss_track[-1][2], loss_track[-1][3]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[-1])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "28663991",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-08T22:39:09.383405Z",
     "iopub.status.busy": "2024-09-08T22:39:09.382142Z",
     "iopub.status.idle": "2024-09-08T22:39:09.751651Z",
     "shell.execute_reply": "2024-09-08T22:39:09.750752Z"
    },
    "papermill": {
     "duration": 0.420931,
     "end_time": "2024-09-08T22:39:09.754178",
     "exception": false,
     "start_time": "2024-09-08T22:39:09.333247",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA+wAAAIjCAYAAACZEJFdAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAACMEUlEQVR4nOzdd3wUdf7H8fdsyaaRhBYCiPQqVdphAzSAgnionJ76k2LBArZYOQtgQ1QUzwKoJ+gpil1URCKCeooiIApIVZrSa3qy2Z3fH3GHLEkgCUl2yL6ej8c+2J35zsxn5jO75DPznRnDNE1TAAAAAADAVhyhDgAAAAAAABRFwQ4AAAAAgA1RsAMAAAAAYEMU7AAAAAAA2BAFOwAAAAAANkTBDgAAAACADVGwAwAAAABgQxTsAAAAAADYEAU7AAAAAAA2RMEOAABsxTAMjR8/PtRhVJnNmzfLMAzNnDmzwua5aNEiGYahRYsWVdg87bxcAKiuKNgB4AQ1c+ZMGYahpUuXhjqUUlmxYoX+7//+T40aNZLH41GtWrWUnJysGTNmyOfzhTq8E94LL7xQKQVf4OXxeFSvXj316dNHjz76qPbs2VNhy7Kbffv26c4771Tr1q0VGRmpWrVqacCAAfrkk0+Oa76zZs3SlClTKibIEKvo/Q0AUDzDNE0z1EEAAMpu5syZGjlypH788Ud169Yt1OEc1csvv6zrr79e9erV05VXXqmWLVsqPT1dCxYs0KeffqqHH35Y//rXv0Id5gmtffv2qlOnToWd2Vy0aJH69u2rm2++Wd27d5fP59OePXv03Xff6eOPP1Z8fLzefvttnX322RWyvMJycnLkcrnkcrkqfN7Hsm7dOp1zzjnas2ePRo4cqW7duungwYN64403tGLFCt1xxx164oknyjXv888/X6tWrdLmzZuDhpumqdzcXLndbjmdzgpYC8nv9ysvL08RERFyOCr+/ExJ+1tlLxcAwk3V/08IAAgr33//va6//nr16tVLc+fOVY0aNaxxt956q5YuXapVq1aFMEIczZlnnqmhQ4cGDfv555/Vv39/XXzxxfr1119Vv379415OoNCLjIxUZGTkcc+vPLxer4YOHaoDBw7o66+/Vs+ePa1xt912m6644go9+eST6tatmy699NIKW65hGBW+zg6HIyTbMVTLBYDqikOfAFDN/fTTTzrvvPMUFxen2NhYnXPOOfr++++D2ni9Xk2YMEEtW7ZUZGSkateurTPOOEOpqalWm507d2rkyJE66aST5PF4VL9+ff39738vcrbwSBMmTJBhGHrjjTeCivWAbt26acSIEdbnzMxM3X777VbX+datW+vJJ5/UkR3CDMPQmDFj9M4776hdu3aKiopSr169tHLlSknS9OnT1aJFC0VGRqpPnz5F4uzTp4/at2+vZcuW6bTTTlNUVJSaNm2qadOmFYlx9+7duvrqq1WvXj1FRkaqU6dOevXVV4PaBK5DfvLJJ/Xiiy+qefPm8ng86t69u3788cci81y7dq2GDh2qWrVqKTIyUt26ddOcOXOC2gQue/j222+VkpKiunXrKiYmRhdeeGFQl/QmTZpo9erV+uqrr6wu7H369JFUutyWVadOnTRlyhQdPHhQzz33nDV8xIgRatKkSZH248ePl2EYQcMC+XvjjTd0yimnyOPxaN68eda4wtewB6bfuHGjRowYoYSEBMXHx2vkyJHKysoKmm92drZuvvlm1alTRzVq1NAFF1ygP//8s1TXxb/33ntatWqV7rnnnqBiXZKcTqemT5+uhISEoPkELh2YPXu2/vWvfykpKUkxMTG64IILtG3bNqtdnz599Omnn2rLli1WjgLbqrhr2EeMGKHY2Fht3bpV559/vmJjY9WwYUM9//zzkqSVK1fq7LPPVkxMjBo3bqxZs2YFxXvkteSBfam4V2BfkaQZM2bo7LPPVmJiojwej9q1a6epU6cGzfto+1tJ17C/88476tq1q6KiolSnTh393//9n/7888+gNoF1/vPPPzVkyBDFxsaqbt26uuOOO7hsBkDY4gw7AFRjq1ev1plnnqm4uDjdddddcrvdmj59uvr06aOvvvrKKkrGjx+viRMn6pprrlGPHj2UlpampUuXavny5erXr58k6eKLL9bq1at10003qUmTJtq9e7dSU1O1devWYos0ScrKytKCBQt01lln6eSTTz5mvKZp6oILLtDChQt19dVXq3Pnzvr8889155136s8//9TTTz8d1P6bb77RnDlzNHr0aEnSxIkTdf755+uuu+7SCy+8oBtvvFEHDhzQ448/rquuukpffvll0PQHDhzQwIEDdckll+iyyy7T22+/rRtuuEERERG66qqrJBUUgH369NHGjRs1ZswYNW3aVO+8845GjBihgwcP6pZbbgma56xZs5Senq7rrrtOhmHo8ccf10UXXaTff/9dbrfbysvpp5+uhg0b6p577lFMTIzefvttDRkyRO+9954uvPDCoHnedNNNqlmzpsaNG6fNmzdrypQpGjNmjGbPni1JmjJlim666SbFxsbq3nvvlSTVq1ev1Lktj6FDh+rqq6/W/Pnz9cgjj5RrHl9++aXefvttjRkzRnXq1ClxPwq45JJL1LRpU02cOFHLly/Xyy+/rMTERE2aNMlqM2LECL399tu68sor9be//U1fffWVBg0aVKp4Pv74Y0nSsGHDih0fHx+vv//973r11Ve1ceNGtWjRwhr3yCOPyDAM3X333dq9e7emTJmi5ORkrVixQlFRUbr33nt16NAh/fHHH9Z+HBsbe9R4fD6fzjvvPJ111ll6/PHH9cYbb2jMmDGKiYnRvffeqyuuuEIXXXSRpk2bpmHDhqlXr15q2rRpsfM666yz9N///jdo2JYtW3TfffcpMTHRGjZ16lSdcsopuuCCC+RyufTxxx/rxhtvlN/vt75nR9vfihO4fKd79+6aOHGidu3apWeeeUbffvutfvrpJyUkJASt84ABA9SzZ089+eST+uKLLzR58mQ1b95cN9xww1G3FwBUSyYA4IQ0Y8YMU5L5448/lthmyJAhZkREhPnbb79Zw7Zv327WqFHDPOuss6xhnTp1MgcNGlTifA4cOGBKMp944okyxfjzzz+bksxbbrmlVO0//PBDU5L58MMPBw0fOnSoaRiGuXHjRmuYJNPj8ZibNm2yhk2fPt2UZCYlJZlpaWnW8LFjx5qSgtr27t3blGROnjzZGpabm2t27tzZTExMNPPy8kzTNM0pU6aYkszXX3/dapeXl2f26tXLjI2NtZazadMmU5JZu3Ztc//+/Vbbjz76yJRkfvzxx9awc845x+zQoYOZk5NjDfP7/eZpp51mtmzZ0hoWyHFycrLp9/ut4bfddpvpdDrNgwcPWsNOOeUUs3fv3kW26bFyW5KFCxeaksx33nmnxDadOnUya9asaX0ePny42bhx4yLtxo0bZx75J4ck0+FwmKtXry7SXpI5bty4ItNfddVVQe0uvPBCs3bt2tbnZcuWmZLMW2+9NajdiBEjisyzOJ07dzbj4+OP2uapp54yJZlz5swxTfPwdmrYsGHQPvf222+bksxnnnnGGjZo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YqKmTZsWtM999tlnWrNmTanv4A8A4YrHugHACe6VV16xbrZV2C233KKHH35YqampOuOMM3TjjTfK5XJp+vTpys3N1eOPP261bdeunfr06aOuXbuqVq1aWrp0qd59912NGTNGUsFZ53POOUeXXHKJ2rVrJ5fLpQ8++EC7du3SP//5z6PGd9ppp+n555/XjTfeqDZt2ujKK69Uy5YtlZ6erkWLFmnOnDl6+OGHJUmDBw9W3759de+992rz5s3q1KmT5s+fr48++ki33nqrmjdvXoFbruAa9kmTJmnz5s1q1aqVZs+erRUrVujFF1+0HsE2atQoTZ8+XSNGjNCyZcvUpEkTvfvuu/r22281ZcqUcp0Nf/7553XGGWeoQ4cOuvbaa9WsWTPt2rVLixcv1h9//KGff/65zPPs2rWrpk6dqocfflgtWrRQYmKizj777GPm9li++eYb5eTkyOfzad++ffr22281Z84cxcfH64MPPgi6Ydk///lP3X333brwwgt18803KysrS1OnTlWrVq20fPnyMq9TWXXt2lUXX3yxpkyZon379lmPdQv0mjjWWeGIiAi9++67Ouecc3TGGWdo5MiR6tatmw4ePKhZs2Zp+fLluv3224vd52vVqmVNs2vXLk2ZMkUtWrTQtddeGxTf7NmzlZKSou7duys2NlaDBw+u2I1QgmnTpunLL7/U9ddfr4ULFwaNq1evnvr166f+/fsrIiJCgwcP1nXXXaeMjAy99NJLSkxMLHJwqaT97Uhut1uTJk3SyJEj1bt3b1122WXWY92aNGlidbcHAJQgVLenBwAcn8Ajv0p6bdu2zTRN01y+fLk5YMAAMzY21oyOjjb79u1rfvfdd0Hzevjhh80ePXqYCQkJZlRUlNmmTRvzkUcesR5ttnfvXnP06NFmmzZtzJiYGDM+Pt7s2bOn+fbbb5c63mXLlpmXX3652aBBA9Ptdps1a9Y0zznnHPPVV181fT6f1S49Pd287bbbrHYtW7Y0n3jiiaDHmplmwaO/Ro8eHTQs8HisIx8/V9wjynr37m2ecsop5tKlS81evXqZkZGRZuPGjc3nnnuuSOy7du0yR44cadapU8eMiIgwO3ToEPQIrqMtOxDrkY8U++2338xhw4aZSUlJptvtNhs2bGief/755rvvvmu1KenRfcU9smvnzp3moEGDzBo1apiSrEduHSu3JQksI/Byu91m3bp1zbPOOst85JFHzN27dxc73fz588327dubERERZuvWrc3XX3+9xMe6HZm/krZXYPo9e/YEtQtsn8KP68vMzDRHjx5t1qpVy4yNjTWHDBlirlu3zpRkPvbYY0dd54Ddu3ebKSkpZosWLUyPx2MmJCSYycnJ1qPcittOb775pjl27FgzMTHRjIqKMgcNGmRu2bIlqG1GRoZ5+eWXmwkJCaYk6xFvJT3WLSYmpsjyAvvtkRo3bhz0+L4j95HANizuVfjxbHPmzDE7duxoRkZGmk2aNDEnTZpkvvLKK0W2c0n7W0mPk5s9e7bZpUsX0+PxmLVq1TKvuOIK848//ghqU9I6F7f/AEC4MEyzCu7AAwCAzfTp00d79+7VqlWrQh0KKtmKFSvUpUsXvf7667riiisqdN6LFi1S37599c4772jo0KEVOm8AALiGHQAAVBvZ2dlFhk2ZMkUOh0NnnXVWCCICAKD8uIYdAABUG48//riWLVumvn37yuVy6bPPPtNnn32mUaNGBT0VAQCAEwEFOwAAqDZOO+00paam6qGHHlJGRoZOPvlkjR8/Xvfee2+oQwMAoMy4hh0AAAAAABviGnYAAAAAAGyIgh0AAAAAABsKu2vY/X6/tm/frho1asgwjFCHAwAAAACo5kzTVHp6uho0aCCHo/TnzcOuYN++fTt3iQUAAAAAVLlt27bppJNOKnX7sCvYa9SoIalgQ8XFxYU4mqPzer2aP3+++vfvL7fbHepwUMnId/gh5+GHnIcfch5eyHf4Iefhp7w5T0tLU6NGjax6tLTCrmAPdIOPi4s7IQr26OhoxcXF8QMQBsh3+CHn4Yechx9yHl7Id/gh5+HneHNe1suyuekcAAAAAAA2RMEOAAAAAIANUbADAAAAAGBDYXcNOwAAABAuTNNUfn6+fD5fqEOplrxer1wul3JyctjGYeJoOXe73XI6nRW6PAp2AAAAoBrKy8vTjh07lJWVFepQqi3TNJWUlKRt27aV+WZiODEdLeeGYeikk05SbGxshS2Pgh0AAACoZvx+vzZt2iSn06kGDRooIiKCgrIS+P1+ZWRkKDY2Vg4HVxuHg5Jybpqm9uzZoz/++EMtW7assDPtFOwAAABANZOXlye/369GjRopOjo61OFUW36/X3l5eYqMjKRgDxNHy3ndunW1efNmeb3eCivY2asAAACAaooiEqg6ldGLhW8wAAAAAAA2RMEOAAAAAIANUbADAAAACAubN2+WYRhasWJFiW0WLVokwzB08ODBCl22YRj68MMPK3SeqP4o2AEAAADYwogRI2QYhgzDkNvtVtOmTXXXXXcpJyenQubfqFEj7dixQ+3bt6+Q+VWkESNGaMiQIaEOAzbDXeIBAAAA2Ma5556rGTNmyOv1atmyZRo+fLgMw9CkSZOOe95Op1NJSUkVECVQNUJ6hv3rr7/W4MGD1aBBgzJ3Efn222/lcrnUuXPnSosPAAAAqBZMU8rMDM3LNMsUqsfjUVJSkho1aqQhQ4YoOTlZqamp1ni/36+JEyeqadOmioqKUqdOnfTuu+9a4w8cOKArrrhCdevWVVRUlFq2bKkZM2ZIKr5L/Ny5c9WqVStFRUWpb9++2rx5c1A848ePL1JzTJkyRU2aNLE+//jjj+rXr5/q1Kmj+Ph49e7dW8uXLy/Teh/LV199pR49esjj8ah+/fq65557lJ+fb41/99131aFDB0VFRal27dpKTk5WZmampIJu/j169FBMTIwSEhJ0+umna8uWLRUaHypHSM+wZ2ZmqlOnTrrqqqt00UUXlXq6gwcPatiwYTrnnHO0a9euSowQAAAAqAaysqTY2NAsOyNDiokp16SrVq3Sd999p8aNG1vDJk6cqNdff13Tpk1Ty5Yt9fXXX+v//u//VLduXfXu3Vv333+/fv31V3322WeqU6eONm7cqOzs7GLnv23bNl100UUaPXq0Ro0apaVLl+r2228vc5zp6ekaPny4nn32WZmmqcmTJ2vgwIHasGGDatSoUa51L+zPP//UwIEDNWLECL322mtau3atrr32WkVGRmr8+PHasWOHLrvsMj3++OO68MILlZ6erm+++UamaSo/P19DhgzRtddeqzfffFN5eXlasmRJpTyCDBUvpAX7eeedp/POO6/M011//fW6/PLL5XQ6uXEDAAAAUI188sknio2NVX5+vnJzc+VwOPTcc89JknJzc/Xoo4/qiy++UK9evSRJzZo10//+9z9Nnz5dvXv31tatW9WlSxd169ZNkoLOhB9p6tSpat68uSZPnixJat26tVauXFnm7vdnn3120DPvX3zxRSUkJOirr77S+eefX6Z5FeeFF15Qo0aN9Nxzz8kwDLVp00bbt2/X3XffrQceeEA7duxQfn6+LrroIuvgRocOHSRJ+/fv16FDh3T++eerefPmkqS2bdsed0yoGifcNewzZszQ77//rtdff10PP/zwMdvn5uYqNzfX+pyWliZJ8nq98nq9lRbn8Vqzd41W71qtnVk7bR0nKk4gz+Q7fJDz8EPOww85Dy92yrfX65VpmvL7/fL7/VJkpPTX38FVLjJS8vtL1dQ0TfXp00cvvPCCMjMzNWXKFLlcLl144YXy+/1av369srKy1K9fv6Dp8vLy1KVLF/n9fl133XX6xz/+oeXLl6tfv376+9//rtNOO01SQXf6wL9+v1+//vqrevToYQ2XpJ49ewa1Mf/q0l+4TWBY4N+dO3fqgQce0FdffaXdu3fL5/MpKytLW7ZsCZrOykcJ6x7I2ZF+/fVX/e1vf7PaSFKvXr2UkZGhrVu3qkOHDjrnnHPUoUMH9e/fX/369dPQoUNVs2ZNJSQkaPjw4RowYICSk5OVnJysf/zjH6pfv36pcoJghXN/ZK4C+4vX65XT6QwaV97fhROqYN+wYYPuueceffPNN3K5Shf6xIkTNWHChCLD58+fr+jo6IoOscLM3jlbb+58U+fWPlfNUpuFOhxUocLXaCE8kPPwQ87DDzkPL3bIt8vlUlJSkjIyMpSXlxfaYNLTS93U6/XK4/EoMTFRkvT000/rjDPO0PPPP68rr7zSuhx29uzZRQrOiIgIpaWl6fTTT9cvv/yi1NRULVy4UP369dM111yjhx56SBkZGZIKLs1NS0tTfn6+vF6vdVJPktV9Pj09XQ6HQ16vV/n5+UFt0tPT5ff7lf7Xug0bNkz79+/XI488okaNGsnj8ah///5KS0srMu+0Eg6cFLecgOLiDKxLenq6MjMz9c477+iHH37QwoUL9e9//1v33XefvvjiCzVu3FhTpkzRVVddpS+++EKzZs3S/fffr/fff1/du3cvZWZwpPRi9uu8vDxlZ2fr66+/Drq/gCRlZWWVazknTMHu8/l0+eWXa8KECWrVqlWppxs7dqxSUlKsz2lpaWrUqJH69++vuLi4ygi1Qiz/Zrm0UzJlql+/fnK73aEOCZXM6/UqNTWVfIcRch5+yHn4IefhxU75zsnJ0bZt2xQbG6vIyMiQxlIWbrdbLpcr6O/0e++9V3fccYeuuuoqde/eXR6PR3v37j3qpbVxcXG67rrrdN1112n69Om6++679cwzzyj2r+v4Y2JiFBcXpw4dOujjjz8OWt4vv/wiSapRo4bi4uLUsGFD7dmzRzVq1LCu+167dq0cDodq1Kih9PR0/fDDD3ruuec0dOhQSQXXxu/bt0+RkZFB846KiiqxBilu3QM6dOig999/PyiGX375RTVq1FDbtm2t7vj9+/dX//799fDDD6tp06b64osvdNttt0mSzjjjDJ1xxhkaP368Tj/9dM2ZM0fnnHPOMTKCI5mmqfT09KBcBOTk5CgqKkpnnXVWke9dSQdqjuWEKdjT09O1dOlS/fTTTxozZoykw10OXC6X5s+fr7PPPrvIdB6PRx6Pp8hwt9sd8h/So3E5D6fG7rGiYpHv8EPOww85Dz/kPLzYId8+n0+GYcjhcARdW213gWewF4750ksv1d13362pU6fqjjvu0B133GHdGO6MM87QoUOH9O233youLk7Dhw/XAw88oK5du+qUU05Rbm6u5s6daxW1gfkG3t9www166qmndPfdd+uaa67RsmXL9Oqrrwa1Ofvss3XTTTfpySef1NChQzVv3jzNmzdPcXFxVsHWsmVLvfHGG+rRo4fS0tJ05513Kioqqsi6HC0fhmEoLS3NOmAQULt2bY0ePVrPPPOMbrnlFo0ZM0br1q3T+PHjlZKSIpfLpR9++EELFixQ//79lZiYqB9++EF79uxRu3bttGXLFr344ou64IIL1KBBA61bt04bNmzQsGHDTqh9wy4C3eCPzK1UkF/DMIr9DSjvb8IJk6G4uDitXLlSK1assF7XX3+9WrdurRUrVljXmlQ3psr2GAwAAACgOnG5XBozZowef/xxZWZm6qGHHtL999+viRMnqm3btjr33HP16aefqmnTppIKusaPHTtWHTt21FlnnSWn06m33nqr2HmffPLJeu+99/Thhx+qU6dOmjZtmh599NGgNm3bttULL7yg559/Xp06ddKSJUt0xx13BLV56aWXdODAAZ166qm68sordfPNN1vd+sti0aJF6tKlS9BrwoQJatiwoebOnaslS5aoU6dOuv7663X11Vfrvvvuk1RQK3399dcaOHCgWrVqpfvuu0+TJ0/Weeedp+joaK1du1YXX3yxWrVqpVGjRmn06NG67rrryhwfqp5hmmV8MGIFysjI0MaNGyVJXbp00VNPPaW+ffuqVq1aOvnkkzV27Fj9+eefeu2114qdfvz48frwww+DnqN4LGlpaYqPj9ehQ4ds3SX+oa8e0gOLHlD/2v31yXWfhPwoLSqf1+vV3LlzNXDgQPIdJsh5+CHn4Yechxc75TsnJ0ebNm1S06ZNT6gu8Scav9+vtLQ0xcXFcbY6TBwt50f73pW3Dg1pl/ilS5eqb9++1ufAtebDhw/XzJkztWPHDm3dujVU4YUUz0UEAAAAgPAW0oK9T58+OtoJ/pkzZx51+vHjx2v8+PEVG5TN0CUeAAAAAMIT/TZsyhBn2AEAAAAgnFGw2x0n2AEAAAAgLFGw2xTXsAMAAABAeKNgtzmuYQcAAACA8ETBblNcww4AAAAA4Y2C3eY4ww4AAAAA4YmCHQAAAAAAG6JgtyluOgcAAADYy+bNm2UYhlasWBHqUKrcokWLZBiGDh48KEmaOXOmEhISjjmdYRj68MMPKzW26oyCHQAAAIAtjBgxQoZhWK/atWvr3HPP1S+//BLq0GzjvffeU58+fRQfH6/Y2Fh17NhRDz74oPbv31+lcVx66aVav3699Xn8+PHq3LlzkXY7duzQeeedV6mxlPbgwYmIgt2mAjed4xp2AAAAhJNzzz1XO3bs0I4dO7RgwQK5XC6df/75oQ6rwuTl5ZV72nvvvVeXXnqpunfvrs8++0yrVq3S5MmT9fPPP+u///1vBUZ5bFFRUUpMTDxmu6SkJHk8niqIqHqiYAcAAACqOdM0lZmXGZKXaZbtBJTH41FSUpKSkpLUuXNn3XPPPdq2bZv27NljtVm5cqXOPvtsRUVFqXbt2ho1apQyMjKs8X369NGtt94aNN8hQ4ZoxIgR1ucmTZro0Ucf1VVXXaUaNWro5JNP1osvvhg0zZIlS9SlSxdFRkaqW7du+umnn4LG+3w+3XTTTWrevLmioqLUunVrPfPMM0FtRowYoSFDhuiRRx5RgwYN1Lp1az344INq3759kXXv3Lmz7r///mK3y5IlS/Too49q8uTJeuKJJ3TaaaepSZMm6tevn9577z0NHz7cajt16lQ1b95cERERat26dZFi3jAMvfzyy7rwwgsVHR2tli1bas6cOUFt5s6dq1atWikqKkp9+/bV5s2bg8YXPqs9c+ZMTZgwQT///LPVO2LmzJnWsgp3iT9W7gLb68knn1T9+vVVu3ZtjR49Wl6vt9jtUhpbt27V3//+d8XGxiouLk6XXHKJdu3aZY3/+eef1bdvX9WoUUNxcXHq2rWrli5dKknasmWLBg8erJo1ayomJkYdOnTQ/Pnzyx1LWbmqbEkoE65hBwAAQEXJ8mYpdmJsSJadMTZDMREx5Zs2I0Ovv/66WrRoodq1a0uSMjMzNWDAAPXq1Us//vijdu/erWuuuUZjxoyxisTSmjx5sh566CH961//0rvvvqsbbrhBvXv3VuvWrZWRkaHzzz9f/fr10+uvv65NmzbplltuCZre7/erQYMGmj17turWravvvvtOo0aNUv369XXJJZdY7RYsWKC4uDilpqZKkuLj4zVhwgT9+OOP6t69uyTpp59+0i+//KL333+/2FjfeOMNxcbG6sYbbyx2fKB4/uCDD3TLLbdoypQpSk5O1ieffKKRI0fqpJNOUt++fa32EyZM0OOPP64nnnhCzz77rK644gpt2bJFtWrV0rZt23TRRRdp9OjRGjVqlJYuXarbb7+9xO146aWXatWqVZo3b56++OILax2PVNrcLVy4UPXr19fChQu1ceNGXXrppercubOuvfbaEmMoid/vt4r1r776Svn5+Ro9erQuvfRSLVq0SJJ0xRVXqEuXLpo6daqcTqdWrFght9stSRo9erTy8vL09ddfKyYmRqtWrZLT6SxzHOVFwW5zZT0iCQAAAJzIPvnkE8XGFhxcyMzMVP369fXJJ5/I4SjoHDxr1izl5OTotddeU0xMwYGA5557ToMHD9akSZNUr169Ui9r4MCBVgF899136+mnn9bChQvVunVrzZo1S36/X//5z38UGRmpU045RX/88YduuOEGa3q3262xY8cqLi5ODodDTZs21eLFi/X2228HFewxMTF6+eWXFRERYQ0bMGCAZsyYYRXsM2bMUO/evdWsWbNiY92wYYOaNWtmFZIlefLJJzVixAhrvVJSUvT999/rySefDCrYR4wYocsuu0yS9Oijj+rf//63lixZonPPPdc6Qz958mRJUuvWrbVy5UpNmjSp2GVGRUUpNjZWLpdLSUlJJcZW2tzVrFlTzz33nJxOp9q0aaNBgwZpwYIF5SrYFyxYoJUrV2rTpk1q1KiRJOm1117TKaecYh0w2bp1q+688061adNGktSyZUtr+q1bt+riiy9Whw4dJBX0zEhLSytzHOVFwW5TgWvYAQAAgOMV7Y5WxtiMYzespGWXRd++fTV16lRJ0oEDB/TCCy/ovPPO05IlS9S4cWOtWbNGnTp1sgo+STr99NPl9/u1bt26MhXsHTt2tN4bhqGkpCTt3r1bkrRmzRp17NhRkZGRVptevXoVmcdLL72kt956S1u3blV2drby8vKK3HytQ4cOQcW6JF177bW66qqr9NRTT8nhcGjWrFl6+umnS4y1tCfy1qxZo1GjRgUNO/3004t01S+87jExMYqLiwta9549ewa1L27dy6q0uTvllFOCzmLXr19fK1euLPcyGzVqZBXrktSuXTslJCRozZo16t69u1JSUnTNNdfov//9r5KTk/WPf/xDzZs3lyTdfPPNuuGGGzR//nwlJyfrwgsvVJMmTcoVS3lwDTsAAABQzRmGoZiImJC8ynqpZ0xMjFq0aKEWLVqoe/fuevnll5WZmamXXnqp1PNwOBxFCtziroE+8my1YRjy+/2lXs5bb72lBx54QFdddZXmz5+vFStWaOTIkUVuLFe4QA0YPHiwPB6PPvjgA3388cfyer0aOnRoictq1aqVfv/99+O6lruw4133ylTVsY0fP16rV6/WoEGD9OWXX6pdu3b64IMPJEnXXHONfv/9d1155ZVauXKlevToUeReB5WJgt2muIYdAAAAKPi72OFwKDs7W5LUtm1b/fzzz8rMzLTafPvtt3I4HGrdurUkqW7dutqxY4c13ufzadWqVWVabtu2bfXLL78oJyfHGvb9998Htfnuu+/Uo0cP3XDDDerSpYtatGih3377rVTzd7lcGj58uGbMmKEZM2bon//8p6Kiokpsf/nllysjI0MvvPBCseMDz0dv27atvv3226Bx3377rdq1a1equALzWLJkSdCwI9f9SBEREfL5fMec77FyV9Hatm2rbdu2adu2bdawX3/9VQcPHgzaJq1atdJtt92m+fPn66KLLtKMGTOscY0aNdL111+v999/XykpKXr11VcrJdbiULDbHI91AwAAQDjJzc3Vzp07tXPnTq1Zs0Y33XSTMjIyNHjwYEkFNwiLjIzU8OHDtWrVKi1cuFA33XSTrrzySqtL9dlnn61PP/1Un376qdauXasbbrjBKmhL6/LLL5dhGLr22mv166+/au7cuXryySeD2rRs2VI//fSTPv/8c61fv17333+/fvzxx1Iv45prrtGXX36pefPm6aqrrjpq2549e+quu+7S7bffrrvuukuLFy/Wli1btGDBAv3jH/+wisg777xTM2fO1NSpU7VhwwY99dRTev/993XHHXeUOq7rr79eGzZs0J133ql169Zp1qxZx7yhX5MmTbRp0yatWLFCe/fuVW5ubpE2pcldefl8Pq1YsSLotWbNGiUnJ6tDhw664oortHz5ci1ZskTDhg1T79691a1bN2VnZ2vMmDFatGiRtmzZom+//VY//vij2rZtK0m69dZb9fnnn2vTpk1avny5Fi1aVGkHF4pDwQ4AAADANubNm6f69eurfv366tmzp3788Ue988476tOnjyQpOjpan3/+ufbv36/u3btr6NChOuecc/Tcc89Z87jqqqs0fPhwqzBr1qxZ0A3XSiM2NlYff/yxVq5cqS5duujee+8tctO1UaNGafDgwbrsssvUs2dP7du3r8S7uBenZcuWOu2009SmTZsi14wXZ9KkSZo1a5Z++OEHDRgwQKeccopSUlLUsWNH67FuQ4YM0TPPPKMnn3xSp5xyiqZPn64ZM2ZY2680Tj75ZL333nv68MMP1alTJ02bNk2PPvroUae5+OKLde6556pv376qW7eu3nzzzSJtSpO78srIyFCXLl2CXoMHD5ZhGProo49Us2ZNnXXWWUpOTlazZs00e/ZsSZLT6dS+ffs0bNgwtWrVSpdcconOO+88TZgwQVLBgYDRo0erbdu2Ovfcc9WyZcsiB24qk2GG2W3I09LSFB8fr0OHDikuLi7U4ZRo8neTdUfqHepds7dSb0g95t0gceLzer2aO3euBg4cSL7DBDkPP+Q8/JDz8GKnfOfk5GjTpk1q2rRp0E3TULH8fr/S0tKsu8SXlWmaatmypW688UalpKRUQoSoaEfL+dG+d+WtQ7lLPAAAAABUsT179uitt97Szp07NXLkyFCHA5uiYLcpbjoHAAAAVF+JiYmqU6eOXnzxRdWsWTPU4cCmKNgBAAAAoIqF2ZXJKCduOmdThgrOsHOXeAAAAAAITxTsAAAAAADYEAW7TXENOwAAAACENwp2m+PaFgAAAAAITxTsAAAAAADYEAW7TQVuOgcAAAAACE8U7AAAAABOWIZh6MMPPzxqmxEjRmjIkCGlnufmzZtlGIZWrFhxXLFVpiZNmmjKlCnW58rYDgg9CnabCtx0jse6AQAAIFyUp6DcsWOHzjvvPEklF9rPPPOMZs6cWTFBFrJx40aNHj1aJ598sjwej5o2barLLrtMS5curfBlHUsot8ORSnPwAKVDwQ4AAADghJWUlCSPx3PUNvHx8UpISKjQ5S5dulTdu3fXxo0bNXXqVP3666/64IMP1KZNG91+++0VuqzSCNV2QOWiYLepwDXsnGEHAADA8TJNKTMzNK/jeehRnz59dPPNN+uuu+5SrVq1lJSUpPHjxwe1KXw2t2nTppKkLl26yDAM9enTR1LRM/fz5s3TGWecoYSEBNWuXVvnn3++fvvttzJsT1MjRoxQy5Yt9dlnn2nQoEFq3ry5OnfurHHjxumjjz6y2q5cuVJnn322oqKiVLt2bY0aNUoZGRnW+EBsTz75pOrXr6/atWtr9OjR8nq9Vpvdu3dr8ODBioqKUtOmTfXGG28Uiak82yE3N1c333yzEhMTFRkZqTPOOEM//vijNX7RokUyDEMLFixQt27dFB0drdNOO03r1q0r9bY6kt/v14MPPqiTTjpJHo9HnTt31rx586zxeXl5GjNmjOrXr6/IyEg1btxYEydOtLb7+PHjrR4NDRo00M0331zuWE4EFOwAAABANZeVJcXGhuaVlXV8sb/66quKiYnRDz/8oMcff1wPPvigUlNTi227ZMkSSdIXX3yhHTt26P333y+2XWZmplJSUrR06VItWLBADodDF154ofx+f6liWrFihVavXq3bbrtNDkfRkipwFjszM1MDBgxQzZo19eOPP+qdd97RF198oTFjxgS1X7hwoX777TctXLhQr776qmbOnBnUdX3EiBHatm2bFi5cqHfffVcvvPCCdu/eXWJ8pd0Od911l9577z29+uqrWr58uVq0aKEBAwZo//79Qe3uvfdeTZ48WUuXLpXL5dJVV11Vms1UrGeeeUaTJ0/Wk08+qV9++UUDBgzQBRdcoA0bNkiS/v3vf2vOnDl6++23tW7dOr3xxhtq0qSJJOm9997T008/renTp2vDhg368MMP1aFDh3LHciJwhToAFI9r2AEAAACpY8eOGjdunCSpZcuWeu6557RgwQL169evSNu6detKkmrXrq2kpKQS53nxxRcHfX7llVdUt25d/frrr2rfvv0xYwoUl23atDlqu1mzZiknJ0evvfaaYmJiJEnPPfecBg8erEmTJqlevXqSpJo1a+q5556T0+lUmzZtNGjQIC1YsEDXXnut1q9fr88++0xLlixR9+7dJUn/+c9/1LZt2xKXW5rtkJmZqalTp2rmzJnWte8vvfSSUlNT9Z///Ed33nmn1faRRx5R7969JUn33HOPBg0apJycHEVGRh5zWx3pySef1N13361//vOfkqRJkyZp4cKFmjJlip5//nlt3bpVLVu21BlnnCHDMNS4cWNr2q1btyopKUnJyclyu906+eST1aNHjzLHcCLhDDsAAABQzUVHSxkZoXlFRx9f7B07dgz6XL9+/aOeXS6NDRs26LLLLlOzZs0UFxdnncHdunVrqaY3S9nPf82aNerUqZNVrEvS6aefLr/fH9St/JRTTpHT6bQ+F17HNWvWyOVyqWvXrtb4Nm3aHPe16L/99pu8Xq9OP/10a5jb7VaPHj20Zs2aoLaFc1C/fn1JKlcO0tLStH379qBlSgXbJLDMESNGaMWKFWrdurVuvvlmzZ8/32r3j3/8Q9nZ2WrWrJmuvfZaffDBB8rPzy9zHCcSCnabsp7Dzgl2AAAAHCfDkGJiQvP6q+Noubnd7iPWxSh11/WSDB48WPv379dLL72kH374QT/88IOkguunS6NVq1aSpLVr1x5XHAGVsY4VqXB8gZ7AlRXfqaeeqk2bNumhhx5Sdna2LrnkEg0dOlSS1KhRI61bt04vvPCCoqKidOONN+qss84Kut6/uqFgBwAAAFAtRERESJJ8Pl+Jbfbt26d169bpvvvu0znnnKO2bdvqwIEDZVpO586d1a5dOz399NPFFq4HDx6UJLVt21Y///yzMjMzrXHffvutHA6HWrduXapltWnTRvn5+Vq2bJk1bN26ddYyilOa7dC8eXNFRETo22+/tYZ5vV79+OOPateuXaliK6u4uDg1aNAgaJlSwTYpvMy4uDhdeumleumllzR79my999571nX1UVFRGjx4sP79739r0aJFWrx4sVauXFkp8doB17DbHNewAwAAAKWTmJioqKgozZs3TyeddJIiIyMVHx8f1KZmzZqqXbu2XnzxRdWvX19bt27VPffcU6blGIahGTNmKDk5Weedd57uv/9+tWvXThkZGfr44481f/58ffXVV7riiis0btw4DR8+XOPHj9eePXt000036corr7SuXz+W1q1b69xzz9V1112nqVOnyuVy6dZbb1VUVNRxbYeYmBjdcMMNuvPOO1WrVi2dfPLJevzxx5WVlaWrr766TNujOJs2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aSlqamrwwQcfAADWrl2Lffv2wc/PT+1vx44dU8bl8XiQmpqK4eFhuFwuVFVVoaurC2lpaZp2nZ2dOHnyJMrLy1FeXg6Xy4U9e/bM0LtFRET0cOAl8URERAbg7+8PRVFgsVgQEhKiln/22WeIi4vD7t271bJvvvkG4eHhuHz5MpYtWwYAiI6OxieffKLZ5p2/h7fb7fj444+Rk5ODL774AoqiwN/fHyaTSdPf3aqrq9HW1obu7m6Eh4cDAL799ls88cQTaGpqwlNPPQVgMrEvKSnBwoULAQAZGRmorq5GQUHB//fGEBERPcQ4w05ERGRg58+fR21tLXx9fdXHihUrAEzOat8WHx8/5bWnT59GUlISwsLCsHDhQmRkZODatWu4efPmA/ff0dGB8PBwNVkHAIfDAavVio6ODrXMbreryToAhIaGYnBw8F/tKxERkdFwhp2IiMjARkdH8corr2Dv3r1T6kJDQ9XnCxYs0NT19PTg5ZdfRm5uLgoKCrBo0SLU19fjrbfewtjYGCwWy7SOc968eZq/TSYTPB7PtPZBRET0sGHCTkREZBCKomBiYkJTtmbNGvzwww+w2+0wmx/8a7+5uRkejweffvop5syZvCDv+PHj/9jf3VauXIm+vj709fWps+wXL16E2+2Gw+F44PEQERE9inhJPBERkUHY7XY0Njaip6cHQ0ND8Hg82LZtG4aHh7Fp0yY0NTWhs7MTlZWVyM7O/ttke+nSpRgfH8eBAwfQ1dWFI0eOqDeju7O/0dFRVFdXY2ho6J6XyicnJyM2Nhbp6ek4d+4czpw5gzfffBPPP/88EhISpv09ICIiMhIm7ERERAaxY8cOzJ07Fw6HA0FBQejt7cXixYvR0NCAiYkJbNiwAbGxscjPz4fValVnzu9l1apVKCoqwt69exETE4Njx46hsLBQ02bt2rXIyclBWloagoKCpty0Dpi8tP3UqVMICAjAc889h+TkZERFReG7776b9v0nIiIyGpOIiLcHQURERERERERanGEnIiIiIiIi0iEm7EREREREREQ6xISdiIiIiIiISIeYsBMRERERERHpEBN2IiIiIiIiIh1iwk5ERERERESkQ0zYiYiIiIiIiHSICTsRERERERGRDjFhJyIiIiIiItIhJuxEREREREREOsSEnYiIiIiIiEiH/gdC9VxxEs968AAAAABJRU5ErkJggg==",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "# Convert loss_track to a NumPy array for easier slicing\n",
    "loss_track = np.array(loss_track)\n",
    "\n",
    "# Extract each loss component\n",
    "residual_loss = loss_track[:, 0]\n",
    "boundary_condition_loss = loss_track[:, 1]\n",
    "initial_condition_loss = loss_track[:, 2]\n",
    "\n",
    "# Plot loss components\n",
    "plt.figure(figsize=(12, 6))\n",
    "plt.plot(residual_loss, label='Residual Loss', color='r')\n",
    "plt.plot(boundary_condition_loss, label='Boundary Condition Loss', color='g')\n",
    "plt.plot(initial_condition_loss, label='Initial Condition Loss', color='b')\n",
    "plt.xlabel('Iteration')\n",
    "plt.ylabel('Loss')\n",
    "plt.title('Loss Components During Optimization')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ac35cca2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-08T22:39:09.856334Z",
     "iopub.status.busy": "2024-09-08T22:39:09.855937Z",
     "iopub.status.idle": "2024-09-08T22:39:09.861535Z",
     "shell.execute_reply": "2024-09-08T22:39:09.860504Z"
    },
    "papermill": {
     "duration": 0.059615,
     "end_time": "2024-09-08T22:39:09.863811",
     "exception": false,
     "start_time": "2024-09-08T22:39:09.804196",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Seed value: 1\n"
     ]
    }
   ],
   "source": [
    "print(f\"Seed value: {seed}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "2d7b12a1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-08T22:39:09.962368Z",
     "iopub.status.busy": "2024-09-08T22:39:09.961471Z",
     "iopub.status.idle": "2024-09-08T22:39:10.102488Z",
     "shell.execute_reply": "2024-09-08T22:39:10.101360Z"
    },
    "papermill": {
     "duration": 0.191397,
     "end_time": "2024-09-08T22:39:10.105629",
     "exception": false,
     "start_time": "2024-09-08T22:39:09.914232",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "|===========================================================================|\n",
      "|                  PyTorch CUDA memory summary, device ID 0                 |\n",
      "|---------------------------------------------------------------------------|\n",
      "|            CUDA OOMs: 0            |        cudaMalloc retries: 0         |\n",
      "|===========================================================================|\n",
      "|        Metric         | Cur Usage  | Peak Usage | Tot Alloc  | Tot Freed  |\n",
      "|---------------------------------------------------------------------------|\n",
      "| Allocated memory      | 383220 KiB |   3783 MiB |  97515 GiB |  97515 GiB |\n",
      "|       from large pool | 379430 KiB |   3752 MiB |  96026 GiB |  96025 GiB |\n",
      "|       from small pool |   3790 KiB |     37 MiB |   1489 GiB |   1489 GiB |\n",
      "|---------------------------------------------------------------------------|\n",
      "| Active memory         | 383220 KiB |   3783 MiB |  97515 GiB |  97515 GiB |\n",
      "|       from large pool | 379430 KiB |   3752 MiB |  96026 GiB |  96025 GiB |\n",
      "|       from small pool |   3790 KiB |     37 MiB |   1489 GiB |   1489 GiB |\n",
      "|---------------------------------------------------------------------------|\n",
      "| Requested memory      | 378187 KiB |   3727 MiB |  95762 GiB |  95762 GiB |\n",
      "|       from large pool | 374527 KiB |   3696 MiB |  94277 GiB |  94277 GiB |\n",
      "|       from small pool |   3659 KiB |     37 MiB |   1485 GiB |   1485 GiB |\n",
      "|---------------------------------------------------------------------------|\n",
      "| GPU reserved memory   | 419840 KiB |   3946 MiB |   3946 MiB |   3536 MiB |\n",
      "|       from large pool | 393216 KiB |   3906 MiB |   3906 MiB |   3522 MiB |\n",
      "|       from small pool |  26624 KiB |     40 MiB |     40 MiB |     14 MiB |\n",
      "|---------------------------------------------------------------------------|\n",
      "| Non-releasable memory |  36620 KiB | 348664 KiB |  39291 GiB |  39291 GiB |\n",
      "|       from large pool |  13786 KiB | 337644 KiB |  37696 GiB |  37696 GiB |\n",
      "|       from small pool |  22834 KiB |  35381 KiB |   1595 GiB |   1595 GiB |\n",
      "|---------------------------------------------------------------------------|\n",
      "| Allocations           |     513    |    1113    |   25438 K  |   25437 K  |\n",
      "|       from large pool |     204    |     593    |   12299 K  |   12299 K  |\n",
      "|       from small pool |     309    |     529    |   13138 K  |   13138 K  |\n",
      "|---------------------------------------------------------------------------|\n",
      "| Active allocs         |     513    |    1113    |   25438 K  |   25437 K  |\n",
      "|       from large pool |     204    |     593    |   12299 K  |   12299 K  |\n",
      "|       from small pool |     309    |     529    |   13138 K  |   13138 K  |\n",
      "|---------------------------------------------------------------------------|\n",
      "| GPU reserved segments |      40    |     229    |     229    |     189    |\n",
      "|       from large pool |      27    |     209    |     209    |     182    |\n",
      "|       from small pool |      13    |      20    |      20    |       7    |\n",
      "|---------------------------------------------------------------------------|\n",
      "| Non-releasable allocs |      52    |     188    |   17036 K  |   17036 K  |\n",
      "|       from large pool |       8    |     146    |    8505 K  |    8505 K  |\n",
      "|       from small pool |      44    |      77    |    8531 K  |    8531 K  |\n",
      "|---------------------------------------------------------------------------|\n",
      "| Oversize allocations  |       0    |       0    |       0    |       0    |\n",
      "|---------------------------------------------------------------------------|\n",
      "| Oversize GPU segments |       0    |       0    |       0    |       0    |\n",
      "|===========================================================================|\n",
      "\n"
     ]
    }
   ],
   "source": [
    "torch.cuda.empty_cache()\n",
    "\n",
    "# Optionally, you can track memory usage\n",
    "print(torch.cuda.memory_summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "99d83f30",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-08T22:39:10.202349Z",
     "iopub.status.busy": "2024-09-08T22:39:10.201940Z",
     "iopub.status.idle": "2024-09-08T22:39:11.461599Z",
     "shell.execute_reply": "2024-09-08T22:39:11.460530Z"
    },
    "papermill": {
     "duration": 1.310669,
     "end_time": "2024-09-08T22:39:11.463982",
     "exception": false,
     "start_time": "2024-09-08T22:39:10.153313",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Relative L1 error: 2.649535\n",
      "Relative L2 error: 1.807677\n"
     ]
    },
    {
     "data": {
      "image/png": "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zg05fjXI4w4bNqxq2SFDhsRiMAAM37nEn/70J/zP//xP4nnIawAAHnroIVx77bV47rnnjHUbjZiZteeeezr7LNGsa/CPf/wjLr/8cjzxxBMxA7xx48bc7cl+7r333rG8fffdF48++mhs0smuu+5qlJPn89e//hXDhw/P3Yf+hn5FCIceeqiaZZSEjo6OGEmEYYjRo0fj3nvvddbpKUOShp7qY5LB0AN3EjvttJPT1y2xevVqZaSef/75xJleefHXv/4VgwcPNkaMNm666SZcffXV6vtuu+3mNLLNwAsvvAAA2GOPPRrabhiGOOqoo/Ctb33Lmb/XXnsBAH7729/iH//xH/HpT38at99+O8aNG4e2tjbcdddduO+++xrap3qR9Xr78MMPccQRR2D48OH49re/jcmTJ6OzsxOrVq3CJZdcEguqNwu+7zvT0wZGAwn9ihBqxeTJk/H444/jsMMOSzUyu+22GwA+Utt9991V+vvvv59qGOUxAG4s0kZXSTdIT/QRiEY8H374oZEuR1M69tlnH9x7773YuHEjRowYYeRt3boVZ5xxBvbbbz/MmDEDN954Iz73uc/hE5/4RNU+VBvFrl27Fvvuu29qmdNOOw2f+tSn1Pe036yR2LJlC37+859jwoQJVfuYF5MnT8aWLVtSrx8A+Pd//3d0dnbi0UcfRUdHh0q/6667YmUbuZZDIs81qF9vuivVvt6WL1+Ov/zlL/iP//gPfPrTn1bpcgahjqznJPv58ssvx/JeeukljBo1qilT0vsz+lUMoVaccMIJCIIA11xzTSyvUqko4zhz5ky0tbXhlltuMUYEWVZFHnzwwZg0aRIWL14cM7Z6W/ICtMv0RB8BfpP4vm/4owHg9ttvj5WdPn06iAgrV66M5V1yySVYt24dfvKTn2DRokWYOHEi5syZk2nbiSFDhsTOX8eqVaswY8aM1DZ23313zJw5U70OO+ywqsetFx999BFOPfVUfPDBB7jssssabmxPOOEErFixAo8++mgs78MPP0SlUgHAR7GMMWOU/frrrztXJFf7rWtBnmtQDpT0601OhdUhR+Z6e93d3c7rcsiQIZlcSOPGjcOUKVPwk5/8xPgNXnjhBfz61792Lr5rdbSEQjjiiCNwzjnnYOHChXjuuedw9NFHo62tDX/605/wwAMP4Oabb8bnP/957LzzzviXf/kXLFy4EP/wD/+AY489FqtXr8Z//ud/YtSoUanH8DwPP/jBDzB79mxMmTIFZ5xxBsaNG4eXXnoJf/zjH9VNPnXqVADA17/+dcyaNQu+7+OLX/xij/QRAEaMGIEvfOELuOWWW8AYw+TJk/HQQw8Z/mmJT33qU9hpp53w+OOPG4vEnnjiCdx+++1YsGABDj74YAB8dHrkkUfiiiuuwI033qjK6nPEJaZOnYrHH38cixYtwi677IJJkyZh2rRpAICVK1figw8+wGc/+9mq55IX1157LQCoNRv33HMPnnrqKQDA5ZdfbpR96623VOB3y5YtePHFF/HAAw9g/fr1+MY3voFzzjmn4f375je/iV/96lf4h3/4B5x++umYOnUqtm7diueffx4PPvggXn/9dYwaNQrHHXccFi1ahL//+7/HySefjPfeew+33XYb9thjD/zP//yP0Wbab52EVatWOYPekydPxvTp03Ndg0cffTR23XVXnHnmmfjmN78J3/dx5513Yuedd8a6detUuRkzZmDkyJGYM2cOvv71r4Mxhnvuucfpqpk6dSp++tOfYu7cufjEJz6BoUOHYvbs2c5z+e53v4tjjjkG06dPx5lnnqmmnY4YMaLf7BbQo+it6U15IKeo/f73v08tN2fOHBoyZEhi/g9/+EOaOnUqDRo0iIYNG0YHHHAAfetb36K3335blQmCgK6++moaN24cDRo0iI488kh64YUXaLfddkuddirx1FNP0VFHHUXDhg2jIUOG0IEHHki33HKLyq9UKnTBBRfQzjvvTIyx2JS8RvYxCe+//z798z//Mw0ePJhGjhxJ55xzDr3wwguxKXtERF//+tdpjz32UN83bdpEu+22Gx188MFULpeNshdffDF5nqemJxIRjRo1ij75yU8a5V566SX69Kc/TYMGDYpNU7zkkkto1113NaYzNgpImVKpY7fddlPpjDEaPnw4fexjH6OvfOUr9Mwzz2Q+3hFHHEEf+9jHnHlyiqQ+7ZSIaPPmzTR//nzaY489qL29nUaNGkUzZsygm266ibq7u1W5H//4x7TnnntSR0cH7bPPPnTXXXc5p3im/dZJfUp66XXzXIMrV66kadOmUXt7O+266660aNEi57TT3/3ud/TJT36SBg0aRLvssgt961vfUtOb9ftsy5YtdPLJJ9MOO+xAANQUVNe0UyKixx9/nA477DAaNGgQDR8+nGbPnk0vvviiUUb+du+//76R7urnQAYjapFoSYGa8Nprr2GfffbBf/7nf+Lv/u7vctWVC7f0xVJp6OrqwsSJEzFv3jxceOGFtXa5QC9i4sSJOPLII4sdR/spWiKGUKB27L777jjzzDNr2unyySefxPTp0zORAcDdTm1tbT26d1KBAgUiFAqhQIECDUOhEPo3CoVQoECBAgUA9BFCuO222zBx4kR0dnZi2rRpePbZZ1PLP/DAA9hnn33Q2dmJAw44wLkEvUCBAj2P119/vVAH/Ri9Tghy+tiCBQuwatUqHHTQQZg1a5ZzGiTAd+A86aSTcOaZZ2L16tU4/vjjcfzxx6vVowUKFChQoDb0egxh2rRp+MQnPoFbb70VAF++P2HCBFxwwQWYN29erPyJJ56IrVu34qGHHlJpn/zkJzFlyhQsWbKkx/pdoECBAgMNvbowrbu7GytXrsT8+fNVmud5mDlzZuIjDlesWIG5c+caabNmzUp8bmxXV5exejYMQ3zwwQfYaaedmrKsv0CBAr0LIsLmzZuxyy67xPY1y4Lt27dneq5De3v7gHtCW68SwoYNGxAEAcaMGWOkjxkzJnG72/Xr1zvLr1+/3ll+4cKFxiZoBQoUaA28+eabsZ2Pq2H79u2YtNtQrH8vvtmjjbFjx2Lt2rUDihQG/NYV8+fPNxTFxo0bseuuu2K/L12BUqkTLABAAAsBRgALCUyuzRQbLOppTDrYCGBEvBx4fZkOiDwbeZ1zDgFDLlVjJTmfcmGXsdtJEEuUJKKqiKvEelkx0NVbRk8tSyrmSHeWJbsMJeYze0PRanUT+lEV2p9WXYfijTz9MxNlomuaPMbzPZHOmKoT+jy9Ut6OF++9JtP25Da6u7ux/r0Aa1fuhuHDktXFps0hJk19A93d3QUhNAqjRo2C7/t49913jfR3330XY8eOddYZO3ZsrvIdHR3GjpAS5TGDQG2cEBiBv4fipggFCQiSQKgTBq/PQgJJgtBe8qYk0ogF1s2aRBqNjOZUNdgJBVLqVTXyGW143WQRO24vk0cdYbhEgx87Rs42UstXOWjWPlUbsEjDzhzfRbnI0EfvxLjRJ08jA/nZF/meIAAGhKXonTwg6OJt1+MSHjKUv5IQDNDVW706y6i9vR1Tp07FsmXLVFoYhli2bBmmT5/urDN9+nSjPMCfZZxUPglBh/ZqNz+H7UDQwRC2MwTtDKFMaweCNvliCNsYfy8xhCVELx8gX6Yz/tkX6Z64qD0g9BnIS36BofaXA8SYetWCqsZLI8Bq7TDKYQyrgSj+ajRcx6jjWJnPv8pvmthGxuvA+Uq5JtNe/HoW17e43u17IXrx+4i/8/soaJfvUK9Qux/lK+wAKp1AIF8d2udBhLCz/r9/CKr6GojodZfR3LlzMWfOHBxyyCE49NBDsXjxYrXXPsD3vR8/fjwWLlwIALjwwgtxxBFH4Hvf+x6OO+443H///fjDH/6AH/7wh7mOWx4ZIGwPwSoAC5lyHXniO0L+mbuTGFcGBHi6iymUnwkgFikK0vKUcmBxN5NLQVhuKYnYjZ9wPTbMyOqHyssfhMxqwdXfhiiIPrQAv66/CUMqITRKtblH+3o+M9OYVY6ZeWqUr+UpV6anpQtFQL72XbiA5MCJGEAl+U7GoIo8gNoI5BGoRIBPCD+qZDzpZJQpQDnlGipTzzywp6fR64Rw4okn4v3338eVV16J9evXY8qUKXjkkUdU4HjdunXGTIEZM2bgvvvuw+WXX45LL70Ue+65J37xi1/kfnQldYScEEoMCAlemRts8phyF5HP+EiuEhl48k0XkySMiCQoIgSkEQOEy4lfdLr7iSCNCIuMgeFyIuOG1A2Ouin7jj3MDeV2GwBhhIYQdNLv4Go7x2/m/H019Zhm/PV86eu3CUB/N11AmkvIg/lZuoKgGX0fIJ+MOEFYEgTAOCHAI6BEYKUQDNUDwtVQTQUMVIXQ6+sQehqbNm3CiBEjMPn/zgfaByMIPFDIQGUPCBkQMLCAKwRWYUI1iO+SHAhgQaQamLj+3OoBESGEnABsslCfoZW1lILy+zoUhCs+IWHmJf+pm6EsmoGBShINOS+HKzDWrm3crXTT4FuGXv9sG3trxA89JqAbfTHyV6pBfvbBR/meUAMw1QBKBGLc6MMjMGn8PUJbWwDPC1HyQ3S0VUDbtmPV57+PjRs35n4OsrQPa18ah2EpQeXNm0NM2uedmo7Rl9HrK5V7C4M6ymjvqKCtvYJSewVeRwDWEQDtIUi8wo4Q1E4I5auNELZJvyYhaBff2/hFrGIIbdqrFOXxd+FD9aO4g/S56r5X0mMOVrxB+WrtlzXqMm5CMTLjo7P4S5VJePUVNDT20Euo6/d1/O0S/4badWAHae2RuTumZV6P5FvXaylK0+MD5LoPrHvCvo+CdlLxgrCNEHbwF3UQqIPfj2gPwToCeJ0B/PYA7R0VdHSUMaijG4M7yhjW2YURndsxtKP6U/uqoRkxhN/85jeYPXs2dtllFzDGEtdO6Vi+fDkOPvhgdHR0YI899mj6tiC97jLqLYwdthlhZ4CPym0IiKGrXEIQeihXfKUagooHIoaw4gFCNSBg3EUkFAILSSkJqQz4i0XqQebZ8QUtNhGPPVBcLRgxB2amI0FRIJ6vZ0XGlRlldTBKMVqtJTDrQ8Zgftapvkmjf/fIn8XzE0b+xhRQaG4eIOb/14kmHhsQafIl3D58ppBIk24fn3i+B8CXKoArAN8n+KUAnkdoKwXwvRDtpQCdpQp8L8SQtm60exUMLnVjaKkb3V43zAfE5keZqEoMIf91v3XrVhx00EH48pe/jH/6p3+qWn7t2rU47rjjcO655+Lee+/FsmXLcNZZZ2HcuHGYNWtW7uNnQcsSwvC27SiXSvBZiIA8eIwQhB58L0Q58BGGDGD8yg08AgUMFHj84iUCPAaEDBQCzBOGPBDfCWCBMOgeU1NZZR55kQtJpkHGKERbBF5Pxhn0GIOMPxjxBo0YxLO+os9MtMG0fFiGXtZl8RG401WtyidYr1YninqNP5BOAFVdP8z6bn0WeTESkIYeKSSAuMowAse6K0i6gYxgMan4AHweEIYkA4/A2kIwRvAVIYSKCDraKvAZYVBbGR1+RRBBGR1eBUNKXRjqd6GrVE75UbMhACFIUQFpeUk45phjcMwxx2Quv2TJEkyaNAnf+973AAD77rsvnnrqKXz/+98vCKHR2HXQBygP6sZHQTu6Qh/bKu2ohD4+qrShO/RRDnx0VUoICSgHXDUEgYeg4nPVEDBQIEihwu8GFvBRO49DSGJAFH9QMQdmrG+wg9DxtEgNGAvgBFm44g9x1cDcsQf1ObrAya6rMhI+u9I0g5h9rn0fJpGcU3VrNvRWfjIJOAy++J702TXy12cEJc0GcrkgDSJQI34y63iCECQ5aGoAnhYLYASvRPC8EJ4folQK4Xkh2vwAbX6IkhdiUFsZPgsxuNSNdj/AIL+MIX43Sl6AEaWP0MYCDPW3Y5i3Hd1B9W0nqiGg9LUGPbEOYcWKFZg5c6aRNmvWLFx00UVNO2bLEsLw0kcol0poYwG6wjb4jFAOfXgsRFtYQtnzuWogBo8BFUYI/BBlxu1WwHyEHuMBaeYBRPzGIiYudsZH9XLEL6a2MgBgYsQfggeyCYBwLckbTVcNauqhNqKXLigC09LIUAxKSSCqLz8rdaARhiqXpCi038++HxhZBbRCtsFLnjvfh9RGDgLIY/wTy7tIIAsBiDTnqN/KU4beQQLq3WXwLWWg8lSQmCKy0FWAVArKVSQuPBkY9gleKQQD4JcC+H4IzyO0lyrwGNBRqqDND9DuBRhUKqPkBRhc6kaHF2CQ342hfhfavAAjfE4Iw/yPMMzbji6vfoUgRH1qPsCD0DqSFsLWgqRtejZt2oSPPvoIgwYNashxdLQsIUxo/wCVjm5sCTpRJh8bK4NQJh8fBe34KGhDV1jCtkobQvKUaghCD9vbSiBi6K7w72HIUKnwO0PNWJLqgeQ7oplL2poHHkOgSA0Q4vEHwIgzKDVgxyRgKolo9pK0yhZRiLSkNRGkTXl1xx6iduVbbLZTAhEYxiyDrWd55lI2ELXO8U8b8cfybRePkZb83Tnyd6qABMPvGPEb3wFjNpDT+Ms6emxAqgSRBk0NeKUQYIDvc1eQ5xFKpQAeI7SXApT8AG1eiI5SBT4L0elX0O5X0O4FGFLqQhsLMaTUhU6vjMFeN4b629HGAuzgb0U7CzDM44SwtVT/GoEKMZRTLoCKyJswYYKRvmDBAlx11VV1H7+30LKEMMz7CIHHJzyXyUdAHsrEVYHHQnRQBR4LURGTov0wRBDyuywkBsYIlcBDEHpgjBDKPDlDg3k81sAYdysxRHECxt03FJJyH5G4bxEAxMS2F4yZCiHUFIKmGlS+eDe21JBtEHiGQylAZMWUA3N/51WjEataS6H9vrFbSVM3qoxLVdgNIdkwN2K2Ub4ZPjnacI34rby8JKC+J6iBJBdQjAQcisBQD3ZsQMQBlNEHlDsolQgYAT5XApIAmBfyILEfuYV8j9DuB2jzA+4eKpVRYgE6/YqKEwz1u1DyQgzzt6NDEMIQrwttLMAQrwudrIwhrBtDWAUU25QpPwIwBCkDEZn35ptvGtNOG6UOgORteoYPH94UdQC0MCGM8rcgLIUYHHahTCV0sjLK5GNb2IFtfjvK5GOQ18FVQ4nHGbrDEgZV2lAhD11BCeXARyX00B34CEImgtFx1QACKPC4ciAAJQYioRh0BWErhJh6YGZ8IaYGXKoBigRiM5PIHOnrykFfJGcoB0s1AODnoqeRquKc7VT1e4KysNHs6bDVDH1iOYMMUoy+K80e/TvSDMMPRHP+Mxp/I113BSlyiFQAPHGp+AAYGbEB/V0af3gA8wjMD8E8wPNMNcAYqdiA74VoFyTQ4VdQYiHa/QqGlLrhgYQq4PGCwV432rwKhnnbFQkM8z9CGwIM97ajk1Uw2KtgGCO0eT1HCMOHD2/aOoTp06fHngZZyzY9edCyhDCYVUCsG/D4MvUADGWKfo4y+Qh8DyWxRN1jJfjCMlWEGvBZiLJQEOTziUdBGKKiqwZGoNBDyEIxWtfUgrwxDRXAuHIIEY3uPVHeI6hFmGJ7Dakc5OwlgiABqRbkqF6U43XFO0FYAPmZzL5Y7iQz5qDla0kyIaYkADCLAQxFkaIWqhn+WpVCJkLJSQA8PwcJJCgBJwmoz3EFAEQjevnZJoZEFQAon78c8evtmQqBonedCBjA5HRRhxqQROB7pFxDviQCL0SnX0a7F6DkcQLwQBjkl9HGAu4i8jk5DPa60C7eO5nIZxV0sACdjNDGGDpZ/curQmIIUy6QtLwkbNmyBa+++qr6vnbtWjz33HPYcccdseuuu2L+/Pl466238H//7/8FAJx77rm49dZb8a1vfQtf/vKX8cQTT+BnP/sZHn744fwnlBEtSwjDvQC+vx2dYQXbqQQPIcrw0cYq6AzL6CYecA7AsMXrxPawDZXQwxavg8cVggq6Q64QtvttCEIPXR4ng0DEGIiYmsIahh4CEVcwVIMw7CrmQNyNRIQohhAACMUsIV/c85I0pHLQiUFTCEbswLGdhhrxi6muRroiBIqpEf3drRqsNIrIwbWy2qko9AwHGrXFRb4ZQbZ8SWgnydDLNOYoZ302AslVjL+eFlMBlhpQs3901SAGE4YrSAaJ1eyhZDUABkUCnkcqQFwSK4gZI6UG2vwAbV6giMBj3Pi3exV0eBUM8svwEYqgcUWM/rvQxioY7m/n9ygrY5i3HT4Ig70KOhmhkzEMZm2oNMBl1A0f3SnrdrtT1EMS/vCHP+Azn/mM+i635Z8zZw7uvvtuvPPOO1i3bp3KnzRpEh5++GFcfPHFuPnmm/E3f/M3+NGPftS0KadACxNCJ2PwGSFgPKjVDR/tFCBgHuABbRQgJK4aQo9L2C6UEMBTowOPhehm/CesiHiE73kq1iBdKQHzEHoExrg7CRAjDBbyBW+eUA18+lJMNRATwWddNSDKV7OW9HiBPsq302S7OnE4ykfxBdmu5gvS2owFnUlTDcxRTlMa9m1FdgpzkITWhYYg4d6u9uwJFwEY6Smjf5Xu/BwpAD0v0RWURAA6EehqQJseahABA+BSA7ZbSJRjPp8yynyCx0itGfA8gu+F8Bih5Ico+QF8RugoVeAxUu6hksdnELUJVVBiATq8Cjo9rhA6Pa4AOryy+FzhLwToZGW0I0QbC9EGggegDQw+4696QVUUAqXkJeHII49E2k5BrlXIRx55JFavXp37WLWiZQlhEGtDiQWAF6JMIULWhW4hNdspQDdFAWePhUK6+mgLAzE9ldAR+ugKA3R5PiqhjxILUCGuGnyvhJAYfC9ESAyVwEfF88RnvgI6CDyEnsdta8DjCnJtAwh8YRAxbmnFIjg1u0itV9BXO5NSAvrMI2n4VeBY5klS0BRBLA16OjONvzgmaWVkecFT6ruqo6cnpOl1+EcWz08omwuJRJBeNisRJBFCLuMv6tlrB2Jp0FSDTgLSoFtpUTnpAooIIaYGpEpgELEBUvEBML6SmDFOBiWPq4GSiBFI15CME3iM0OmXFSEM8st8oZnXzRWDCBh7LESHJ11C3cI9VFFuIv4K4YHQxoB2xuAxBg9eQ/bjyRpDGGhoWUJoYz5KjNBGfHGAvLhCVlZ/7E7GpatUDR6JVc0eIYAHHyE8FgJoj+ILFKJb/KxSKch3AJCzQOXogzHi5ABPzOgh7krSjamcXeQBLBBGVBoSufOpDFKTdsNLSy2nMCWoAQIMFxNCM81wITlIIlIdZObZ6kAaLv3cmFYWWvuaogAc+TpsUZFAELXEDNIDxlZaQl6cEJhp7F1KwaUCANM9ZNU3CYGiciJP9cNyCznVABDNFBKuITBtxhAjeH4IxqBiBLp7qE2ogjY/QImJALLHCaHEoiBymyAGSQbS2MtBWDuroJ0FaGN8KqoPgg/+7oHUfQcAfgONdJl8lGUwxZlf/46qfREtSwgeGNrgo00MnTtZgG7y+IgEZfggBB5Dm7jzfArRLYLOIXnwWYjtrE0FnUPy4IFQJg8lFsILSgg9T01X9UMfZcZH02WPEIQMoeehEnK14Hnc7RMGHkKf+HoGXyiFwONMQtEiNIQUKYmQ8ZG6UzUAkE9vUzEGOe1V5kMthiMCj1OkqAdAKA5ox4BbQQCmiuDfxTnY79ZnW10nqgRK/ZqMrAohoyJwGn69TpLxh9vAx0ghKV9zBcXcRC41oBaQSRUQ5cXcQurF8zwvIgHPI0UEnhfC9zgBMEBNIZWxghIL0O4HKlhc8vgIv8Mrx8hAEkI7q6jPkgw88e5CAEIo/tWLQiG0GHzmwWcEnxhCBnhEaGchyggRiKk8beTzFcwsQCDuujLzEYLQxgI1+yf0uL8xBIMX8johGEIKeZpmyaTv0WMeAnFNSbWgDGDI+PiHybSQGxfDgDIu64mLhTTVEIs5hFIWMDXqVwZerYDWylvEoLdlu5ZsBSFjIJEaoJhyMEb/0oZqn5XLSb8HdZvQiHvT1YbL+Gvp7oBxAgnonx15OiHUTAT2tFLArQak8dfy+KpHKJeRUgPM7R6y4wS6KvAYod0LItXAJClwRe0xMpSBD+n6iciAp4VKDfBTiQy9TQoB8R1IAxCCBqxsD8hDQF5Kfv3H6ItoWUKQ8BiDRwRfGCkfhHbwWRPtLECAEG3MN9xIZfjo8Bg87alJoXD7eCB44kIKxF0ZEicFFnD3EGM+AkYIvBCM8dlIlYDEgjcgDPlsIzkrSW2RETK1JQZEHkJxo0ujLpQAVw8ULYYTbcvtNLhLiLS4Au9rtKGerGcpA0Va/E1XD0bsQJKKpiB4GrO+w1ASEu4dWaN6aajZZWTlJ8cK4kbfKO9QAGnGXS+bSgDGZ4rNLjLdRxTlaQFjUw1EaSpGIPcYkoQAqJlDtnvI80J4DCj5fGKGjBd4jFTcQFcGbZ72zqSxlwQRCLKI0myEggHl6D0EH2iUQQgZhBspQLkBCiGU7afkD0S0PCEA3PfogRAA8IS1kfIUwj3ULlRDmXG/olQMIfP4LCLG0EZ8R0aEbQhZCA8MoRegQh4A/lg/pSQYAYEP+IFSCDK+wBgTs5HEaufAQ+jxAb22xCAaUasV0PwzY5F6iFSAQzX40OIKpNpjIVNqAYCpMiQR+JHhV4qCrJds1lA28XdjNpN+XhL24jbHveiMN6QgsYzL8FvpqQQgvzvS7PyY+whWuuOzNPSJakAnC6UKNEWgB4stQmDis+eLETnjf1xPriuQLiNAuYg8RkoVMBEfUISB6F3GDjwWqQGPyfrZDbh01+ounRAAiLuMyghRacDjLctUUhNL3PkFIQwoBBRymUkkfI8R5KZ2Ej4IAUL44DEGgMcUQvE9YB5CMHR4FRGI4ptrlYmncyVRAlBBJfQReoFSDeXA11xG4gIPOcEEckQvjTRBDO+5wVeKQVugBlEHnpZG4IrBg1M1QCvPZyRxgyDjEaotvV3N6BvqwVYJVh6vYL6bKsEqA5jWO2n0n5IXQ9q9bBBClfQUQkgkBxZvN6YWPPudzDzZjqyvGXjDLQRYbiFxTKECFBFohMCYcA8BKmjseWa8gDGCr7uMvIgEVJpm8Ll6kLEAMdACFBnw4LDbiHPVzSdzQBABRCzPB3cTqeCyuJe3N8Cdwx1WyS6jgfoIzZYlhCx/UF+4jrhB9/lFS9yX6TESlwwT6XzkEhJDyBifJQFESoGFyufL4wtMxR8Y8e8krGHAgEC4cKJeyplHfMpRCD0KrM1KkoohZMLYEHcHMRLEwZTEYKH05zM18pcbtkYHljuzMtl5mWy8jLiD3nFCTCUowtDKGcFomHmxP1XCny4x6OxANoXgSE8hBttFZKcllnepApiG3MgXbRhEoBSASFNBZYpmDVnuIbBIFajgMUQ6g6YKIsOuk4GhDDwe+NVJgN8jpFSBhMyrhhAefKHMQ7FgIgAnBg9877FAzg7U5laXG2CrA2LGoNCVPxDRsoRQpgAlEMoiCBWQ3PKWiXgAE4vQzFECJwlPKARumNWIh/hIKAilcuDB5XLoo80LgJDfZAD4pnlyBGgpBIC7feSUVP5dqgW5aR7fEoO3xmW8mq7qQc1KUlNWRbqcXQQCSD68h0hTCNEMJVMZkKgjR/vMIARdFejqQcUJZD7i+YClJGDlJaTbyDwwrEMhpJGE0/i78nWVYKwvoGSSgJ1O8diBTiBSIegEoVSDRQQMPGbAom0nAI0QRExAkoFt9HW3UEQC0UtODfVFngv8IVUhQuIuWFCo3LISPuSgy1Pn5osfkqt4hgAhuhpBCPBixzfzC4UwoBAiRJkEGUA8HVPcufaUsjTp6LEQvhid8IvVh48QIWMAhSqIFgZMEIcnbiJOECFjCAGUxAK2kBjghWBiyEcEvp2FyAfCyLUEXi70ARVAkCSgfEfiXRhxIoLaTtpWCARtFhBTLigjqKxmI+nPXmDxWUgWMSgFASgDx6x8Wc2pDDKqBL0tG6mDOkeeaxZRksGPtc2s+knfRWczE4G9vkC2oRRCRAoAMqkCAGBiOqkiBu3lqXeozwzRZw9ROakI8kAGaHl8IOAGn4l4HkHMNuLKoEwlgFUg3Uby3lSKn0mHbX0oU6nKOoRCIQwodFEARgxl8KcfdQt/f5k8PoOBuDrQySFtGpqEGh2JC1QGpkteIALFIUqMoSKURUlMWaWA8RGPFwKhx4/qRcY/CBk84vXk8J2rBgICPmwPVdSZlO9HqQOCGXwGhLHnhKFIQBlyioyfVA2ijjhRo6yamQS7HZlmfbbedRvujiNYP3QKIVBSfq2EoOU77YBDIaSqAqkEAEshIFENON1KRoA5gQi0IHJk/CNCkK4b20WkDLwIJHuCLHwZVLbIwoZsN4kcZAwtkK5W4QPzhIs1EAMrHjOTMQM5e89DG+OTNMrgA7hIIQToaoCxDpHuFqo/bN030bKEUCaCD4YyQU1hU9PZBBEEYHw+snANAUJKJlwocqaSz0I1uvAYqdlDHviNGDJCCTymEIrnNPtSFQgD4REDid1S+RYYQBDy9ggQC9m4S0nujyK4BJIF1MQiitIARIFmT9QliH2QojgDo6gKcxEGIjdWXBVoFl62pecDZhqsdNlV7WeWxWK2p1HKXT9WBuLIElhOJAFbCYi0zESgG3+GuHvIUAQ8jYnPcl0BmDtekKQM5HcJ3SVkfo+mjLrcQ9Il67Noxh3EdG0Id5Ac7UvXEZjHyYAipQAyTVcgTHQAD9sbMMuoelC5ERtk9D20LCFsF0YyEBfldm3vom74nBSIXxRlKiliCERAV007zaIaWAgfDKHhN4ny+MhIuAKI31ghuM9V7ocUhB58D1AuI6Ee1MI14q4nj3hsAR4DA4npp0yLJQhrK5SB7koyiEEZd0s1ONO1E4opA7JmGrGoXJb3ap8bpdytdpyxAu1zUixBJwBVzs5PIwHAdAsZ9SgKECcRgVVObjmhxwsgDTmL4gUREUC5hFzkYKuDapBuIICPuGU8IRAGXhp97mKN7iVPDKpCMcsIEPE7ACBfrBFiaoGaz/hAzqMQ28P6t5WovjCtIIQBhYrhHoqUQTf86Alq8NWFodxIigiYIoVoPrRpVTwHAfB0EUuAvKm4TAa4epAjKznriADNfeTxGRWhpx6NIG9iQOymqqQCAE8YeEiDDB5fAAmlIIhBzkqSxKAMPimFoccJmG7o5YwoNYwX77YikJJA/Cw6QagYQoLxd8YY4C6bCy5CSSKHNGLQCUDm62X073pbSWoAOiFYisDlHpLvtioQI3+uDmCQAZNpgCIDL+YSivJtVQBoLlIHOYRgMZUQkNiAjkVGO4AHT80S8hBNlYjSyojuL5+F6CbuQpLbVJQJYr8jJlb81Icy+SilxhAaJU37FlqWELaTDyLfIALpKipTyXhgjkoj6ULy1AwkRQbaiEGOHlzb5+okERECxA0hXELiMyeHCHz3a4IHPkVVrSvzINYUEDxP2Hc5mgo9w0BroQGowLMcaWujf5KEAWHw5X5EoWbV5Eu31jpxiDZl026XkVRGUTpPiH47g1ft+7BR92UVYrANv5lmvjtjCVY5w/Wj13EohUQi0N1DspwdJ9DIQPn6dSWgxRDkZ5eryDb41dSBjBEAwhfPxH5fIl7At3/3+Mw7Rsp1BJUvXK5gCEF8CrfmtvXB9yySswF98dknaoxCqDrLqFAIAwpd5MPT3UNgykXULaRqoBOE5iris4Gs4LNyMSX7MOS0Ol+ogtAagUiCCBnxtUPCdcRnkfIbjKQ7ScYUIGyyUAgyrgBwkpC+YhVbkIYdwlBTlA77sxgeqj2TRHuSWJTl0tYmGBvZ2fEDcdAkgoCerkWadc5RcJBtBg9GtSacDSW5h4w8FwHI7y41YakBF0lEAecEImDxz0xLU2SguYVMMoBGCJFLSCcKVU8cIpubKCID/jlKB7SZRAhVLEHFC8RJe+BKOSAP8CqA2IYe4mFWoUYEkhikYmjELKNmPDGtP6BlCWE7tYFpy9PLkDGEkkEEPM1XykAGi43gsyCCUH4WF5N9UbniDfpsDJkfEUE0wvKY3OuIqwauFngbPqDypLmV6xj0ZQZ6HRC0NQVViEFYcZc7CaKooQxE+8qoa+RhlFHMoIGsd1nHztfZIl4lP7IqBD3dNv6uPGmgRZqTBADLsMu6FhEATjWgVIGtEMS7NPIuMjBcRojUgUxzEYBrVpGEVAH8s7xu+dUnr2GpGEAeAkMha6QgYgj8MbWlaIEnSLx7icTQCHdOWEUhFEHlAYbtYQmM2gxloMcKdOPfTSUVMwiNMoxfrKINSQb2haQTQbWRhbxpjO+a64hrCzGOEu4hXSlwMHgi5qBcSLIMMbHILDL49mZ2VYlBdyfZsQZAkQMg2+M9j6kFu5w4hHRhadyVyVWUVyGILjgaSv5e1fjrHbHdQSItRgKyrO4WMtq3y2VQBTIPaWRAsdF/5DZK/0ls6KrA/d1T8TFJEGDR/SDdSCFjaEOAkMRiTopiZVItBOSnEkMjViqXyYdfxBBaB13UxglBM/AAlLuIf44Ugswva7ORpDJQCkGRBjMIBDDnNAfEnGpBh4wlyI3wZH154+rtqZuaIlVgDr/58xbCUJQNpTRgyt1EYnsLvrGdMDgiLUYMxLRV1pZq4IkGOfC+2eoBsJ+TEAsw63m2mmBxI0WJXyykWDdnNYc6MBWDgwD0eglqIaYGYKbFy5rEwJRaqJUMRPVYfEC+k/O9GrhKkFtO8OtCXbPq7yhUg4wLqD+6mHnEK6v9jnS14MtHApInBkcmMTREIVB8lwI7fyCiT5zVbbfdhokTJ6KzsxPTpk3Ds88+m1j2jjvuwOGHH46RI0di5MiRmDlzZmr5JGynNmwP27Cd2lCmEv8uPndTCdvDNvXUpKSXJAPdpWSSQTT6AfR51xESA8/yM+LynWnfXcE/lW7MLYfawpiJbQjkVgVMGBfGCPomZ2oTNM/xmVFkoDyAfOIvWcaHUY880h7aLuvw79G7KKu1xd+1cr5WX76Y4+WlvFLKw+6fr9WTfVK/hdU/rQ39nMw6ev95TIj0dGX4o9/W2IxO/F3UdFL198pPBnrcQE0r1dxF+nsaot16zetbd5nKd31L+FBztVZCX903ldAz7iE54DLuv7AU3YfiHuSvEipU/zg3QLTNtvtVG/LYOgBYvHgx9t57bwwaNAgTJkzAxRdfjO3bt9d49OrodUL46U9/irlz52LBggVYtWoVDjroIMyaNQvvvfees/zy5ctx0kkn4cknn8SKFSswYcIEHH300XjrrbdyHbdLkECZfGwP29AtiEC/sPQLMBAXpE4A0QXJ1LupEqSCiD4D0ehCJ4qs0EdrOklIUpCwZ4/E/MaaMVBGw4tGmQYx6MaJaYZNkoY+kk0ydDFyIKchdhlwaAbYqO85SKPmV7zd+HEdfWOuvkfGWs+Xv5lqn0VpABx1NGJI+JswLT+NDOxrQl0nma+8fDBiZynXvdxELoScoBFX2WrAZSlymeYarNXff6/qKy/y2rr77rsP8+bNw4IFC7BmzRr8+Mc/xk9/+lNceuml9Z5eIhhR7zrDpk2bhk984hO49dZbAQBhGGLChAm44IILMG/evKr1gyDAyJEjceutt+K0006rWn7Tpk0YMWIEFv1hBjqGtPE2dNeO5j5SsQLtQjYuSnHRywswlQyIOb+bAWhPjJbE8cV7RTuWek6zqEPGO8RiNZGG6DuJPP4b83ci8dAd+RkAiCnXDhlTTJk5s4hgunrs7xIxNxFzphu+Gst1FMtPS4M8TnKedRhH5fQ0p7tILxNzFZE7X69fxVXE9Dyd/F1EAMBWBgDUttZp6kAfWPhyG2ytnD4QkVu0uNYolITLKL7zqXgMpvadl9PT+HHbrDb0NLlttuvz9i1lfPuTj2Pjxo0YPnw48kDah3krjkHH0LbEcl1byrh++n/mOkZeW3f++edjzZo1WLZsmUr7xje+gWeeeQZPPfVUrvPKil5VCN3d3Vi5ciVmzpyp0jzPw8yZM7FixYpMbWzbtg3lchk77rijM7+rqwubNm0yXgDQHUauokS3UFhypuvBY10ZRJ/zkQGgjZ5yqAXANfozA4W2OuBl9AbkSNJSC5rRUEZJd1Xoo9sk1WCMbhGNjpk1QrZG0G4lkDwyj9Wv5jKqpQ1jZK8ph4RzcJ6nbfSTfkdLIUSKIFkVmBeFexaR/Nvr10hSXKCWdQfVZtRF5TxNFUT1dKUARGsB9EGTvMfsmX26C7cRq4jVgtSUF4CYbenq6nK2V4utmzFjBlauXKncSq+99hqWLl2KY489tu7zS0KvBpU3bNiAIAgwZswYI33MmDF46aWXMrVxySWXYJdddjF+aB0LFy7E1VdfHUvfTiWASlrQ15Sz+poCfaFZtGWFI1ZgEYEqZ6clxBFs/2sa5IgtmtrH53urfZPEDcwXAJFWKzIMXDVIdUDKXsnBPpPRRTUbiefKh+pEi8/McvyzI02enxIJennt3GwVIb+Q8c1RpkGoohDs7zEF4CyfoBJSFIJh7HUisPJ0F5HMcw8UYKYBWl4yMaRdiSGi7SMAew2CB2MbOKlUrJlG0XeotJB8eCTUgpqOKtvx+Hb14jqRgWc5I6kRT0zLug5hwoQJRvqCBQtw1VVXxcrXYutOPvlkbNiwAZ/61KdARKhUKjj33HOb6jLq17OMrr/+etx///1Yvnw5Ojs7nWXmz5+PuXPnqu+bNm3ChAkTUA59+GLKKOAmBMBNAgCsNN2lFKmApDS9LRcZ6Mj67FY5i8NjYsk/IhcRwG969YQ0UCwPELOLSKxnoOiBPXxXJFlC1pPEIOqJkhHnONKYgzB0AyldVbKcLGKXtZo3UAtBJP3EjnTSDWcaAQDVScDOsxWcQQBSHUR5ukFXzVnKQM83yjnqujaxywK5Sl7CnnJqp9nrE+TfXk/zbVKRM48sYojSPLWxZCOed5x1pfKbb75puIw6OjrqPrbE8uXLcd111+H222/HtGnT8Oqrr+LCCy/ENddcgyuuuKJhx9HRq4QwatQo+L6Pd99910h/9913MXbs2NS6N910E66//no8/vjjOPDAAxPLdXR0OP9I3VRCGLar77ah19P0vJiLB9GTlZKIQLZhzDbS4gb68aqNTNIgjb7+3RPtEvSbX7O+loGXqoHzBs8jRmDKsEurjWgltDbKd6oGIE4ELnWg19NH4JY60DKqgjl+S8pq8FJUgeNA7nIuJeBITyQBUZbZ5Y18a4GZpRBscpBfPYsMGgl9HyNdxarOU3R8czoqAHgIKYorgKLvUh34iCsGX0xCbYTLqFJlHYJUIcOHD88UQ6jF1l1xxRU49dRTcdZZZwEADjjgAGzduhVnn302LrvsMnhe4z3+vRpDaG9vx9SpU42gSRiGWLZsGaZPn55Y78Ybb8Q111yDRx55BIccckhNxy6HCVNJiQd1K2F89oKKD6hpcJ42+tdiA3a8wBlA1tQC4iRAGoGkwTWas2ccSdnvHkmSw2gA0PMARLEGma+5GqS7w8iPfN6GnzwlvhDPt4ys/bJ8/q6Xc/ZQSnlXLMFw56j+aH30qpyLK44Q+z2j38T+XW1VoP6WWhtAgvE38sxrQi/nQl6l4L6u4+raLC+3fjEHTBJmenxat/7S0+qFnP2U9sqDWmzdtm3bYkbf9zlJNWsuUK+7jObOnYs5c+bgkEMOwaGHHorFixdj69atOOOMMwAAp512GsaPH4+FCxcCAG644QZceeWVuO+++zBx4kSsX78eADB06FAMHTo083G7whL4jqHmD24rAEB3I1nqwHL3JCkFWdaYr60pDDuPEi62pHRdGdif7XrmzW8My6zvkStIGiGy3EgQioJpLp74JnWy74iMqq0etHJGvl3GLqd3265XC5IMoKtZQwUkqAP9u0XGKs0y4HqdVPeQKyZgKYNYu6JpTyuTWC4DGehuIN1tpPv2+XdzOwv9HG1XkZ4ejVf19CgthC9cpVwdhMRXOpd7MIaQB3lt3ezZs7Fo0SJ8/OMfVy6jK664ArNnz1bE0Gj0OiGceOKJeP/993HllVdi/fr1mDJlCh555BEVfFm3bp3Bkj/4wQ/Q3d2Nz3/+80Y7ScGcJFTE5naA2/gD5upi1yygNKKwRzvOGUUOZWCjUSMeKdnTbnMVS6DoMyBdNlFsAYAZX1BuIo2EzDsbTPtdKeausmEZWP38WbxIlJdAMGmo9tM6yYCSyyQQhe3y0cumEYFM1olAL+OeSZSQpnctRRXkJYPUcg7XUdJnPX4gVziLXkEFpzVi4Pt/iZX8YtuKRt0vVGWtAdXglspr6y6//HIwxnD55Zfjrbfews4774zZs2fjO9/5Tv4TyoheX4fQ05DzjE978kS0D9VjCG6lAGQnCZfkTSKCeJ4wtAlkQuRI045BWltyTYL8HKVJAx/lRfnV0mSlqD0JdQFZ9WD1IVEF6HUceTXFD7IahSxukTwKAZpBt/NsAjDS4uWrEYH8nrTwzJ6CDJgGX6470Oua+xlFde0FkfKzXF9gt2E8SQ3yc+jMBxBbkwBABZar5dltd28p418//e91rUM4Y/kJhn2w0b2lG3cd+bOajtGX0esKobcQkodKGJddLr99VqVgE4H57jkNvf7ucgm5Rjuu49jQp6BGaRQrbwei9TQZZI6pBWgDNWKRo4lJJWG6iCR1mWNUfTTPDCNKMWtfw4hPGtI0F1OmdlLall9jbiK3C8lWAkZdiwjM8slkEOuag3R0MsiLaj8Vn9YcGWZnGcQflJM2E0m6mOQT1uJqgbcq8+xpq41QCK26l1HLEkI3+Ybsc/2BY0EwuA2xmwjibqhqRJBUTlcH9ii/GiLjzt9115Gel+yLsdPdxMBkP5l4Opuqxg1GRCwwppTKOgpk1QViBtiIRyTB9lUnIYORdBleZz2X8Y+lu9tIIgFZx54QoJdNVQuijhcrq7dnjtZrhbyW7PtGPQBHM9qxwUns8tPiBwn5cuZRgOjRnKhxWwkbcnJIWv5ARMsSQiX0wRwKQcL1B69GAvxzdSLQP+chgyQkBZvToEb1drpmvHUiiadLw0zK+Ko8vW1NNaj+Gv2IvpEgD3dJmcTcBtoulpEys7SVNdicRAKx46QRgZbvHO2nkEESksggbapp7hlGDhWQWp70BZXauxrxm2rBPo5LTfCTUxRSF6rNJMo7y6i/oHUJgTywDKogKT0Wc8ihHnQDnkYarrgBEJnJatLY5TbSwQDH6Ntl/PVFbXoPohG8ml0kCUA/B0YWCcRHhjEFoeWpdhz9NTuvNVvr/ZpSLzHYmqQAAKfxd7bnMOwuY58WLzDeRXmbDKDSzXpJ5fLCtUgt6rwsZAaEnesUAKcacOWH5GsEFjbEWFfIh5cyYKw0YAO9voiWJQRXQDe9vIM8rFs8i4JIIwMd1cggD+w4gSuWEK8TJwXZLzO2YKbxym7VoM7NcBHJcuKryx1E6YaKbENSJ1KNouMY1VxKtRKBnu529STnJSFLGc8iFRu20Xeh2iykMIEU0tpyxhaAmGJohMuIqriM0jf06L9oWULoDkugMPvpZ1cO5ncXAdjlEgkjhbDSAtFJ0IlBPZITcMQT4FQEpiEwTHwsTdcE+nRVnqlbPzJbMJkjfihYM5KQzcjVg0S14ThuFuPvajfN0FfLTwsgu2MF9vd0Qsn8YBzhztFjCeluoTgpGHBdYmrLmLhiCClyJ9WLZqxD6A9oWULIO185z8VhG+ksSsJFBPbnRpg956wimKSQWC5DPmCSiaEaAIDM0aVqT2vHiD+oxKhENXdQnonUmV1LKUYxlQQcdasRQTw9nSyS+pHapwYiy5qErKTgKpt0LDt+IFVDIwK+xSyjFkMQMrAw/x81bUSeJxDtaisLEaTFGOw20+IHSXAZfd24m0bfpRbsHtujPjIMdkw9aDWM38eOdaSeQ0pmDtRkYFOMv6teHhJIKqMfIosyMNNqjx2kEYGtElz1XFNGZZ/S1IJUAvyzrxEEVw2NIISkGKOePxDRsoSgL8CqBYm7k6a4d/Rjp+XnIYN6kC2WoBNENPq2iUPvk13O7m+iegAsJRBXEiqvyrnpSKKtPEiPKzhG6zmIwM7PqxokXMbZqSSaoBZsI+/Mc5EDdOMeqQUgvr27TIvXM1VDQ6adFi6j1kJFPSWlfuSdElqNNOzbNY0IGqUO1KgcLgNvkgLPc5eLt6h6l3JUPYmcLp9oBlL+G7HmW7eK4XQvDMtPDnZaEgno312qIN4OaWXifXVvjJjvwkkz8vb+RkkG3gwOeyI9wwKzRNVQxBBqRcsSQt4YQlakupSyqIcMdbLkNRp2zKC6CoiX52XMNiVcZe3yPDODwcr6u+Q0fkmuqKQRd14isOtUUwRpbSWRQbMD8DZcM5Jc8QLArRZSyztUg/5eDwpCaDEEoQcWenWvzgSyTlt1l3EdvZqLyS5TzX2Ulm+7jZjWpyQF4FILer4sYxsCc+aSnp5uVHO7xxps9KoZ0exKIZ96iJGFVTevMjDTa48dABkMvWbc7RXMMYXgUAu8oq7gtcVpVYLYjTDWAbHUGEKxMG2AohlMX63NpEs5bT1C1rZ5mapF6kKe0b9r6+347KToc6q7CHq55tyQWQ1kfrWQL9gcq299z0IGSUgypkabVVuJkGSgXaRgl0/6HD9G5Epy1XOdQz0oFEKLgY8A4n/Uev7MWS/FvDGHpDpu5ZCtPR1pKgHIbtxdht05xTR1ZkrV7srSWQtmQp6ZSWlGN6v7yFW2miIA0h9s05tuoizBX/3vX00t8ILmMcwZSdZaBK0flRpmD7rOpyCEFoLcDtoeUTTr1qmqGnJefFnIoB7YpADElUFSGk9PXkCWdK4uF1Ni/3rwfqzuMkojiGzlqx3Dvk6rkUnWdnoCWfc5ipFJQoxAb8tWDo1CQQgtBjnt1PYFNms0ldXFUZt6qO+YSUgiBbvtLMFhnhcvbyOp3d5GtqBu9rpZF5blJQJ7NpErbpAlT0eSW8dWfNUCvrZS4OkmbJVQdQWz6qNvBKTrhYwxpuUPRLQsIYRgcG1P1SzfdGpf6lIP+es0E0mKgefx97SVxHlUQrOQh4jSlErWeALQfDLoC3CN8GNlLNVuE4ueFktv5CyjYvvr1gIRM1i+r9w8WQxgNddQWht5DaxLJQDJqsDOc+cnH6+n9ylKQ1a3VC0xBSAbCSS1kZcMqpFLHthG2w4Y68dzGW+dGFzXTt4tZVwroetF4TJqcbj94M03RnkNdE+SgUQSKaj8FFUg87MeP8nN1GzkjUnUFVdwpCW5bLLECtKea9BTcG17XXV/I0dsIWnigUsp2HlRG9n7nYRqOxn0lgJvNgamIywDQqr+khdFM195++ZCtfZkmTRUu3kZ0mdgMUbqlaVMlvK8Ts+88vTXZaRT862XDo+Rc/Rut+Nq12NuZdAIdWCXSNteRdVxlLH359JfQOSa0V+yLdfLbiPpVS+C0Kv6qgW33XYbJk6ciM7OTkybNg3PPvtsavkPP/wQ5513HsaNG4eOjg7stddeWLp0aU3HzoKWVQjyAku7OVwGuNGjsXpmBvXVUUo1xeAqr6Ovxw2y1kk7i6yKoC/B5d+PzdJz3FNJo/u09QuAO9bQU0qeqhBLLdfoT3/6U8ydOxdLlizBtGnTsHjxYsyaNQsvv/wyRo8eHSvf3d2No446CqNHj8aDDz6I8ePH44033sAOO+yQ+9hZ0dKEoL9XQ+QjbVqXUlGrkWy0cZWtVfsZ6llM1leMYq7gcoYyaSosz1TUpEGJ253U3N/SZeyTZoo54wkJ10Rs1XIarDaChjwgJ931VMuvumjRInzlK1/BGWecAQBYsmQJHn74Ydx5552YN29erPydd96JDz74AE8//TTa2toAABMnTqzhyNnRsi4jIJurxVU2T716+1XrcZrZPyCbAYzVyegm6k3k7WM1VxrgdgvZx8uKPGTQDCQZ8MStWVLKVwvaNtIFlBcuV5bLtbVp0ybj1dXV5Wyvu7sbK1euxMyZM1Wa53mYOXMmVqxY4azzq1/9CtOnT8d5552HMWPGYP/998d1112HIAgaf8ICLasQQjKnnVYznmmra/sK6ulLLTddVrXgrJvTgNXjgmoE8vw6VeMxNc5KyksGedRB2iJN+7BpLiDXsdNmoWW57rJs057Uj1oRhB6QYR3ChAkTjPQFCxbgqquuipXfsGEDgiDAmDFjjPQxY8bgpZdech7jtddewxNPPIFTTjkFS5cuxauvvoqvfe1rKJfLWLBgQc4zyoaWJQQg3x4ovTULqRr6AiHVQwyZj9ELv3XeXzaLAW40GfQm0vceSn94jkSWv2teA98IQiCq4jISeW+++SaGDx+u0js6Ouo+tkQYhhg9ejR++MMfwvd9TJ06FW+99Ra++93vFoTQbKT5MpPQF4xxX4L9a/Q+Xaajnr9e1tF3thXO6WXSyKAR6kAiyYgnKQVZJ+mYWe6pZtxDjWgz66y94cOHG4SQhFGjRsH3fbz77rtG+rvvvouxY8c664wbNw5tbW3w/ciXse+++2L9+vXo7u5Ge3t7llPJhZaNIWS9XXrTj9lTaNa5JU217C2kTf/MirR4QOx4vUQG9SB1Zk2Gulm3gu/r91WtU8aT0N7ejqlTp2LZsmUqLQxDLFu2DNOnT3fWOeyww/Dqq68iDKMNPl555RWMGzeuKWQAtDAhAGImgfaqhmbPfe5p9GS/bWPcG6+8kMZff1U9z8zrK6qXaZabqJoxS7sustwvee+RrGsLqr0qoade9SIIWdVXXsydOxd33HEHfvKTn2DNmjX46le/iq1bt6pZR6eddhrmz5+vyn/1q1/FBx98gAsvvBCvvPIKHn74YVx33XU477zz6j6/JBQuIw1p0jgLXBd8b+wuWQ39kbx6CrX+vfLtf1S9bDUyqFcdVFuDk6kN2ZccdbIGkbOWbRaIqq36z9/miSeeiPfffx9XXnkl1q9fjylTpuCRRx5RgeZ169bB8yIymzBhAh599FFcfPHFOPDAAzF+/HhceOGFuOSSS/IfPCMKQnDA/lvXc1nmvagbSSCF4U9GI37nvAa1EUTQSFRfmJlt0kWWX6ERpJH1127EHdSsrSvOP/98nH/++c685cuXx9KmT5+O//qv/6rpWLWgT7iM8i7nlrj//vvBGMPxxx/f1P7lcSvVi0bJ54IM4sjj+klD3rUDvbH2IuvfP6thq/east2ztbyy9rEhQeUG9Kc/otcJQS7nXrBgAVatWoWDDjoIs2bNwnvvvZda7/XXX8e//Mu/4PDDD++hnnK0wkXRn+Hy+9dLAnn2XnLVy4rGb4uSnRSyBkp7YiBSy+AnCL2GLhilkFV9DUT0OiHoy7n3228/LFmyBIMHD8add96ZWCcIApxyyim4+uqrsfvuu/dgb+MoSKH30aiRvwu1juzz1muWqyivgW6EMe0JZdv0HQOoygyjAarAe5UQalnODQDf/va3MXr0aJx55plVj9HV1RVbXt5oFKqhuUgb9TeaBGpVA3b9voS8I/dGTbXMg7y7BKeSSgMmOsuFaWmvgYheDSrXspz7qaeewo9//GM899xzmY6xcOFCXH311fV2NRcIfWfufX9Eb8zMaoQRr7WNngokh1T9GQXV0FuLMbMQWt4NK6u11Yygcl9Hr7uM8mDz5s049dRTcccdd2DUqFGZ6syfPx8bN25UrzfffLPJveQo1EJ19MSIvxoaNaLvaVVQq0Hqa5MP8rqR0lVD+nND8qBVYwi9qhDyLuf+85//jNdffx2zZ89WaXIVX6lUwssvv4zJkycbdTo6Ohq6v0heFGrBRF9Zl9FIA95bLiJJCvUe3yaFRv+N6pqdVKVu07ajrzai6xuXccPRq4SgL+eWU0flcm7XXN199tkHzz//vJF2+eWXY/Pmzbj55ptjOw/2BbQ6GfQVApBotPFuRHsh1ec2ahQxRP3puas2+7TX7G0ULqPa0esL0+bOnYs5c+bgkEMOwaGHHorFixfHlnOPHz8eCxcuRGdnJ/bff3+jvnx6kJ3eFzAwL5ls6GtEAPSN3Wmbiby7iPY08hrRPCSgpzfMWPe9n7Dp6HVCyLucu1HoS5uuDRT0RRIAmmccG9luvSrBRq3P92hU+1mRxeWTZvybhWpxgiKG0ETkXc6t4+677258hwoMGPTFkXISGk0KaegNl0dWf3+1vqU9hU1/rw/VhowFIRQoEEOrqYJmQzeaffGhONWQN8hbq/Hnx4rnNWx2XxFUbi30VUPWn1D8hs1FXyaHemb3NJoEgCbY54IQWg9ZDFpvz9Pua+gPJNBT6qDRs3vSkMUA10IazZq2mdUlleXZDM56Ke01ci+jtPyBiJYmhCxIe2ZsK6E/EAHQf11FjUDT5uRnRB5DXIsKANxE0Jy9jBIOltaRAYCWJQR7hWreiyqrgezPxNFfSKC30ZNKobdRi/HNuotqYv0c7TZs2mm1Dez68X2dhpYlBBv2zdyoUUc1o9qXCKMggPow0IihnnugXhIA8qmBRqsERvyVlj8Q0bKEIBVC0oWUdFM3+sIrjPDAg+sa6Wsk0cjrOM9DdlLbqeEYTZs+GzL+SssfgGhZQpDIqwxcN/ZAXcZeoHHoaZJo9lbVWZFpl9IajuV2F5nvdaFFYwj9arfTRiJpRkYt++Hbdfrinvitgv5EznmfAZDn1cw+VkOWnVTTnh+SdixXelOeT2A/5MT1qgF9/XHBLUsIACcF+UpCPUa+IIkC/Q21EEvW7bSr2dK0YyYTRKYu5kcTCKE/PC64pQlBh04OeQiiESRREEVj0Z9UQm+hXmWR9XkKWUmgFiJwkQEvn973LGAhq/rKi/7wuODchLBu3TqQ4xcnIqxbt64hneoJVDPGWcjB1VY9z+AtiKJxKEghQiNcSnkfqlPVBV+lH3mJQNZpGDIqBPvxvF1dXc7meuJxwY1AbkKYNGkS3n///Vj6Bx98gEmTJjWkUz2NakbYVg/VSKKRhr0gitrRaqTQ6HhC7gffozoRyH6m5SWrhdrabCYmTJiAESNGqNfChQud5dIeF7x+/XpnHfm44DvuuKPh/U5C7llGRATG4j/+li1b0NnZ2ZBO9QQ88Mc1ui72LAvWdFLIskK0nkVw1dqz0WqGMA36bzEQiLTZf9ta1sVk+VXr2b+I59detxYwVFmHIN7ffPNNDB8+XKU36umMtTwuuBHITAhz584FADDGcMUVV2Dw4MEqLwgCPPPMM5gyZUrDO9hs2OsA7BsiLznwNtKP2eypqz21hqK/ob+QQ0/+nWpdGJn118tyLn2NDABkXocwfPhwgxCS0BOPC24EMhPC6tWrAXCF8Pzzz6O9vV3ltbe346CDDsK//Mu/NLyDzULSwjSdIGohB95G9Dnr/jI9sb6hUBUR0s63kWTRF3/XZpMA0HwiyHqMmtHgdQj95XHBmQnhySefBACcccYZuPnmmzOxYn+AvPldF5ckh1rdSrwN83ueDcga7WbKeiwbfdGoNRMD7Xzr3R6l0USQp1yz6ldDM7au6A+PC84dQ7jrrrua0Y8eh20A04xvmmpwtdUMgujNFdIFWfQvNGJ/rLz2rpFE0LS1BXnQhJXKvfW44Dxo6a0rkhRAFtXgqmfXT2rDbC/6nHf74mZtyFdPHyQKouhZNGqTxFpscU+pgp4EC/krLb8W9PXHBbc0IUgkGflqhr2Z5MDbTC2eeqwsx2smClXRXDR6l9xmEkGesn1CHQAotr9uMST9OatNRU2eaZQcb8jaRrxNiDYzFU88nkRfMcR9tV99Hc3YKr1W+zugyQBoisuoP6BlCQEwSUH/+9YTTM6rGpLaMds0vxcE0Rpo1rMy6rFlef82/fVvWTwPocXBEL9Rqo36G6EasrQTbzf6XM9jE3tyFlMe5P09BhoGAhHUWicr0p5l0hBUiSGgxhhCX0fLEoLrwTTy8koiBiBdNVQjhqT6djsSWS74gUwOfbFPzUCzn5pX72C2r5GBRFNJoXAZtR4S4wVI/nsn1QGyjWyzqoas7ZltR58HIjn0lb40Cj3x+NTeIIOeRNOui4IQWhNppAC4/+5ZXUlA/e6krO3F248+N4oc8hy/GejvrqSefH52I+xVT//OjNUWWG7GAKZVYwjF8xCQ/lzjtMsry/OQq22D4DHK9VzlWrZVyLqNd9bj9/Y+QL19/FrQU2RQbWDb1+HYNzNnfaq7DQDRD5n2GoBoeYUgkeoKQroLSaIRrqS0duz2qrUZP0b0uR7VUE8fGoX+4kLqb6oA6H0FVqtSaGgfCoVQIA2NuEWyjmybrRj4Mfq/aujrSqFQBbWjIaP8etFi6gDoA4SQ96HTH374Ic477zyMGzcOHR0d2GuvvbB06dKG9KWaIa52jWZx/2Q1nrKtrG6pWo1yfyeGvkgKeR4qUy/63tk3DoxFrx4/dlj9NRDRqy4j+dDpJUuWYNq0aVi8eDFmzZqFl19+GaNHj46V7+7uxlFHHYXRo0fjwQcfxPjx4/HGG2+oXQDrRU/K+2a5PGptt95V0Y3oQ3853kBGw4KyDf6bSFLoMVdSMcuo56E/dBoAlixZgocffhh33nkn5s2bFyt/55134oMPPsDTTz+NtrY2AMDEiRMb0pdGkkFaPEJH1psmz4wk2a5E3puyUcTQ0zGGvkIK/TFm0Cw042/iUgvNIIkihtDDqOWh07/61a8wffp0nHfeeRgzZgz2339/XHfddQiCoK6+9ORNbCOPyyNPbKFeNMqNBPScW6e33UcFGcTRE3+TpriVillGPYu0h06/9NJLzjqvvfYannjiCZxyyilYunQpXn31VXzta19DuVzGggULnHW6urrQ1dWlvm/atAlAbX7eZl0DeUZS/VEt6P3oiQf99AWlUCBCT/1NJCk0ghyatf11X0evB5XzIAxDjB49Gj/84Q8xdepUnHjiibjsssuwZMmSxDoLFy7EiBEj1KuWR88N4AFBJvQ3tdDbSqE/o1m/Xb/7m7SoQug1Qsj70GkAGDduHPbaay/4vq/S9t13X6xfvx7d3d3OOvPnz8fGjRvV680333SWa+TfvSdcB7W4j+qZBdTfZyMV6H30q797QQg9C/2h0xLyodPTp0931jnssMPw6quvIgwjvfbKK69g3LhxaG9vd9bp6OjA8OHDjRfQnL9tT0437C30F7XQbwxPgT4JGVROew1E9KrLaO7cubjjjjvwk5/8BGvWrMFXv/rV2EOn58+fr8p/9atfxQcffIALL7wQr7zyCh5++GFcd911OO+883qsz9Lou161olb/aq1B5npHagUpFKgH/eHv0qx1CHnWXd1xxx04/PDDMXLkSIwcORIzZ86suk6rXvTqtNO8D52eMGECHn30UVx88cU48MADMX78eFx44YW45JJLch+b+sBovt5AW2/232ONCTYDzQ06FkHm/Gj2b9Yv/h5NWIeQd93V8uXLcdJJJ2HGjBno7OzEDTfcgKOPPhp//OMfMX78+PwdyABG1Nu7hvQsNm3ahBEjRuDgBy+GP6Qjlt+s0Uujb4JGkEEj+tQoUgCaayh6yggNlBXK/e1voVuxYFsX/vSl67Fx40blIs4KaR/2/dp18Ds6E8sFXdux5vZLcx1j2rRp+MQnPoFbb70VAHeRT5gwARdccIFz3VXsmEGAkSNH4tZbb8Vpp52W7YRyol/NMuoJELGmvAoUKNB4EDVpYVqGVx7Usu7KxrZt21Aul7HjjjvmPHp2tOxupwF5YLl2Ch1Yi54aRVKF62jgoVm/UyPa7Sl/RtZ1CHJdk0RHRwc6OuKeh1rWXdm45JJLsMsuuxik0mi0tELIM5JvRjA5Dc08RmEYC/Q06r3mmqUEkg+Y4QUe19TXOS1cuLAp3bn++utx//334+c//zk6O5NdWfWidRVCyNxTx4hlnkUj4w29HZzOimYQQSNjCED/VwlZ97Hqq2jk71NPW3mMv32chhFHhnbefPNNI4bgUgdAbeuuJG666SZcf/31ePzxx3HggQdW71QdKBSCQx2EZL6y1u+rI+++3LcCAxO1Xm95lEAzr+us6xDsNU5JhFDLuisAuPHGG3HNNdfgkUcewSGHHNLQc3ShhRWCB4ScD2V8QF5c9kyjQHyt/jjM1nHHNFoZ9BQGQiyhGT99Y/z7+dvIY/yz5jXiXJqxl9HcuXMxZ84cHHLIITj00EOxePHi2Lqr8ePHK7fTDTfcgCuvvBL33XcfJk6ciPXr1wMAhg4diqFDh+bvQAa0LCFINyCD6fLxHAYjaWM2myBcRrKRi7gKFGgG6vfv9w0iaCiasA4h77qrH/zgB+ju7sbnP/95o50FCxbgqquuyt+BDGhZQghDDyz0DKPOGCHQLjL1SaTZM42SFIVxnJxXTl8kkJ5UA/199N5sNPJPUZ+PP+dOwRk6Xovxd7XbiBhCs56HcP755+P888935i1fvtz4/vrrr9d2kDrQsoQQ+Sojo65fdIyRcfO5lETUllnPPE5yngtJxrc3iKK/uoUGKvoCGfRtIhBlGzGoaIJC6A9oWUIIQ2YpBGapBTc5yDJOJQEkqgmAX7BZV0JncUcNJPSUMmj2cZo1w6gRf/6eIIFqBNBw4+8o0xCF0KLPQ2hZQrAVgg6uFowUZxsqtuAolUVN6G3E+5etXH9HT7qI+qs7qrfIoL8RAU9ghUKoA61LCIGHMPCUM5ALAjmCZ8ZTl0zlEL2nupi0OlJNuC7TLPN+a50Z0xdJpLeMck8ct+ELCOut30QSqJUAGm78HWUbMsuICCzlJNPy+jNalxDEHGZ56VBsnG9HEGzDbJJEjBwcAedqSgJIdjXpbWdF2o3RU2TRX0fledHfyaDfEEHKFFOy3utCoRBaC2HIgJDxWAEjQJADQY72maUeAD3OYMcY9M8RGbiNuR2P0BFoJOVC1pWE1Qx+qxjq/hYzqMfO5HPxVC/baDdQM4y/XY4IoLBvrkPoD2hZQiBiAIkLi7iLiIcUSF1gcfVgpgKm0beVgX5x2+VUH1R+upKQSIpNOM9P73UfdB81E/3NRdRTRJC1fCOVQLOJwKxrF6oNzZp22tfRuoQQMJAWQyAmjSZT16NSAYwi46yVV0nMfDfqwiSH+PRW0Z80F1PC1ZfFINmrsLOiPxFIT6udvkAEPakGmmr8geRYQGIZs4DRPjXoeihcRi0GYvzCIhlAFoaaAQz27CEGkgbSESC24w8mAbgVhKsckOBiqqIk7P7oyKoobCTdVH2JKHrD7dUoMhhoROBqq8eIwFYXDQkqFwqhtVBhQIUrBAKilV+MtCG/rh6gPgOIYg9A9FwFFSNwxR/iSsLlXjIMPpmznaI0R+AZ6caaIZ+iSEKrxB4k+pMaqFauFuOflFdNCTTM+GuFYgRgu4ykGzhojEJIjRMUhDDAEIqggVAFCIm/k3AZMYI5B0kqA009yNiDpR54uagmYAeY3TOU0hSELAu43Utp6eYRk9UEkG3WU6ugv6iBvuQSykoEQMZ4gF4vjQhkfoNiCKi27Wox7XSAIQQQsMg66u+MfyBP8+cw7TMglIQcmfMkQ0nI5uTFC80F5FQN5uwkIG7gieIKQi+vpyepBXu9hLOM9jmrUezPxNGM1cW1/BqNdAflJYC+Gg+Q5Z3GX77bhNAAhVC4jFoMLGRgoYgNCALgIETboGpEIJSEGvGrSaow1AOJulJdkH7l2PEHQwHoF7HpbkpTEDwfRnm7jo4saxqyqgkdSUa1rxJFX9tiorfcQn1iVpDdvksJVCMCPa0IKteM1iWEgAEV4aPXXqQUAiKikKSh5fFymloADCURxRrs9uLqwWwjrhT452wKQv8uy9gKIgvsNROJ5ark9+enh1VDfzP+SenVgsGxMlkIIEUFGHWyuIHke8w1ZEtj8WrAGgEWACxl0Q8L6j9GX0TLEgLkwhMWxQzAZLBYG9kzQAarVMCZAYaSkGoAZtyB/8/rGhvkZVEP0NQIs1UCVDrgIgZTBbjiEK5yOrKujrZzBq7556hnYNgTMYHemCJa1R2kFcodD6iWpqUzcZ+yRixMK1xGrQWvzMDa+IieB4aZoRIYQ7QsWBKEIgORqCsHRHX556htQE+HFk9gSFQPeqUE9WArgqSYgg47DhGh9psoaSpsap2aj9YzqPd+7814QFJ6vwgIZ0kT75IAYiqiIbOMqNoPX/8x+iBalhAYmQqBySAxE1KRWLS+wFYOkgQM5SAKyu8QbUj1IV03It85awn51QOsnKQ1EDIPSErTWrOVeBW1kFVNGHUS0nuLKBp1e/cHIsjjEkokgp52CWUgAqaUQuz0cqNQCC0GVgG8CkCeMJxitM4YotlFcm2Cpw3WpWoQ73HlgJhqMOITiPKYIy260rKpB8MlJBRE5EqKxxPkcdPhvtptgjHz4mSThDwuqL6KRm8XUctWEX19ZpBZlpkGPC1Nb0snAC1NJwBFAjK9Uv+wotjLqNUQMB5HEJ4bZeDlBcitLuT/MjgcbZxFwmskpqfKdqRysEfwupIQ7RMcykEdu7p6YNCNPEU3YYp6kOcI5FMQej1ZV4dtdFKNfo6yfQW1LMhr1vqApLxmrhSuaWaQ/J5k9F0uIS09NxHItEYY6xZ1GWXdPHPAwQt4HMGr8BEFqwCszNOZfIk8vYxXMfMQiLzAfCHUXoJ8EMjPzPhMAQOFfG8l0upR7AXxEt9JvMBn84TyeygkDcly/PoNQ4ZQqxdqeTJftanKeLE0/oLzJeGuwxJHunlfjUCjjpf9PJN/L1c76e272ksvo6ZkimtE/Y3FNUTiWLFrJ5SZiK47ubAz4VqNrn+Y90Ko3QtWWuweChDdX+IeU/dfAH5finzjvm3ADCDpMkp71YLbbrsNEydORGdnJ6ZNm4Znn302tfwDDzyAffbZB52dnTjggAOwdOnS2g6cES1LCCwQslBeXAFflyBnH7FQ+8OrNH7xKjlppUOkyZkOTK2GRnQzynIyzSjD0+I3MM9ThkJ9d9zoshndsOgvmMYobnzSjXtaml0/bSZMvQa+FhJpJKlkJ4vsv0VSnqu9tHJGmdjfPiqrD9Cd14d13enXnrreEq5VRRYyTScG2Vd9pB/q5SDuM36vyVE/09pgcpAVWvdogwjBvCcTXjnx05/+FHPnzsWCBQuwatUqHHTQQZg1axbee+89Z/mnn34aJ510Es4880ysXr0axx9/PI4//ni88MILNZ5UdTCiAap9ErBp0yaMGDECe190HbxBnWrdAXmI/PxygK1iCYjKyftOpVHk49fbYFFdQKZbadDKifZVmv0dmptGrwPN5aLZjlhZvTl9eGMNdZKeFOfKTyuXlp7WVjX0hHupVrKoJQ6QlpclHhArFyOQJrqCZH6WNKMtzR0k04Qrtpo7CPJ2I801JEmBOIEE27fjz9dfio0bN2L48OHIA2kfZhx1NUptnYnlKuXtePqxBbmOMW3aNHziE5/ArbfeyrsdhpgwYQIuuOACzJs3L1b+xBNPxNatW/HQQw+ptE9+8pOYMmUKlixZkuu8sqLXFUJeCbV48WLsvffeGDRoECZMmICLL74Y27dvz39gOZqwRhZVVYM+IglguIds1cB01SDTyFQSxsjKVg7aaMmU8OnKwakeoGVnUA+2C0Iiq4JIS3e1lXVY0ghl0CjlkFcNZc3LowJiSsBRXtld7W9t1kXidZSqBKpdwzpBaPcEs6/tkEWz/rT7zFAJUrHLz0H0Lu9T/R6uGw1WCN3d3Vi5ciVmzpyp0jzPw8yZM7FixQpnnRUrVhjlAWDWrFmJ5RuBXg0qSwm1ZMkSTJs2DYsXL8asWbPw8ssvY/To0bHy9913H+bNm4c777wTM2bMwCuvvILTTz8djDEsWrQo17G9MuCV+KieGMDkewi1DkHNQPKYph7EaF1TDYyiG47BLBdNT5LlSU1hNRfAiTR5ocnZS6KuvZeSPLaWZM5Y0tvRCqkHAYk8aTSY7L+xpkD7TK4Vz667Iv/o2jX1Nb187kPkQi2aubrrKJkUs5Std42A0YZF5kZamhKwy7nS5Hd52dnlHCN+QDPiYpTP60Zl7ICx7o5VbiX5vRExBMAWz7F8gCsKHR0dHejo6IiV37BhA4IgwJgxY4z0MWPG4KWXXnIeY/369c7y69evr9r/WtGrCmHRokX4yle+gjPOOAP77bcflixZgsGDB+POO+90ln/66adx2GGH4eSTT8bEiRNx9NFH46STTqqqKlzwDCVgKQRbNQSIqQa9bGz0oo98YmXM0b8Ra5CjKwBGfEFTCS4frVQORpwiYdTnDDJqTWZVD7DKkqNMFhXhaiePX74Zryyo1t+0/OxxGqtc7O8RVwFklTP/3jCuidwxAZmux71CZpZVxllTAto1rI/49dgAE3EBd+xOvzej+AFz3LeeuJ/rRsYLZcKECRgxYoR6LVy4sAEH7z30mkKQEmr+/PkqrZqEmjFjBv7t3/4Nzz77LA499FC89tprWLp0KU499dTcx/fKBM+naPQvR/weYqpBjWIs1SDVBLRYgxz5K9UQRmpAbbHNoBSBUg2akjAWwJGtHBANTyzlYNgdXT3o01nJGpGLYxi7tGrTT1WTUkkYdW3r6TLkLgubbvDtTfyqoVFxhVpiB1nIK0s9Z7lYGY0sEso1JCbgKGcQQqwt/sZsAhH188QFTBWglTPStDJkprEQoDLqRtZ1CG+++aYRQ3CpAwAYNWoUfN/Hu+++a6S/++67GDt2rLPO2LFjc5VvBHqNEGqRUCeffDI2bNiAT33qUyAiVCoVnHvuubj00ksTj9PV1YWuri71XUo8JqavgcgwinIkpT5L4y7JQElbaMZfGGPZliQUeS+RNMxMpJMiAz2dd4znKbcSNHKQBKEbY50wtAC3/JB3rQNP0wyMFZQmnRh048DSn92g6sBt/JL2WLLrulDvjKGsyHKcNIWR1xXkquMiAhcJGHVt467XcRFBWpp+HILbJQRE+wnlIQKdELRy0uCnEYGhNhoy7ZTAUv6YMm/48OGZgsrt7e2YOnUqli1bhuOPPx4ADyovW7YM559/vrPO9OnTsWzZMlx00UUq7bHHHsP06dOzn0hO9KuFacuXL8d1112H22+/HdOmTcOrr76KCy+8ENdccw2uuOIKZ52FCxfi6quvjqV7FR5HUDODfBKjfRYpA6UGoneSTjaNEOSFTZ4glRBO1aBN89HSyMzXyUHGK1zkAO1GtOMQdhoQzXzSyUGmI+qbufIZUXlZxaUeIMtFN1B2BaFqJOakrZDuDdQ6m6guFWCVrVkJyLRqSsDum1a+2tYRUTlHXi1qQCOM2DTUWBqBKlX+QFkg3Vpp+Tkxd+5czJkzB4cccggOPfRQLF68GFu3bsUZZ5wBADjttNMwfvx45Xa68MILccQRR+B73/sejjvuONx///34wx/+gB/+8If5D54RvUYItUioK664AqeeeirOOussAMABBxyArVu34uyzz8Zll10Gz4uHRObPn4+5c+eq75s2bcKECRPgVQhewG8U6RZikhhCcGLQ8tQoXH4GDEIAtDwvUg1q16K8qgGQNQ3SYIIIyKEGeIbsE9PuPJnN03Rj7dydVbWaXT2o9mU5W0GA/xY2XErCaAPVDXCjg8x5gsrpU0ldiTkUgFU+sxLQ6uV2Cdl91JVArBzixl7mJU0jhTXi19sIrfIZ1ICZRj2uEPLgxBNPxPvvv48rr7wS69evx5QpU/DII48oL8m6desMGzZjxgzcd999uPzyy3HppZdizz33xC9+8Qvsv//++U8oI3qNEGqRUNu2bYsZfd/3AQBJyymSov4s4HEEqRBCXxjLECKNEPpSGYg8qRDkZxYph8htAz56EGksjNqFZ6sBpKsGpUISXEoQfck6Uwl625py0PL19Qt63IHnxdWDXocMhWApCK0LOpKe35ZFFeSdnZQXWVVJ4vGdLqJeIgD9c5pCkGlZSQAw3ahNUAOKACRp6J+JeFBZy2tEDAEh8Vdafg04//zzE+3b8uXLY2lf+MIX8IUvfKGmY9WCXnUZ5ZVQs2fPxqJFi/Dxj39cuYyuuOIKzJ49WxFDVngVEVT2ubH1QCA5J1MYYkk9oa8ZUU0tqM3pNGVgqAaRJolDqQYvh2oAlMsKiPJ00lA7seoKweivSzlAG84BMlEZaCvuwPPi6gHQbI7mXuJfkxUEP5W4ipD9SjKy1WINzUJV0kl0EzlIIaVeXSSgt+cy+NVIQLzHiICiskkBYkAz4IguLacaCO36dagBEopAK0cV1A010yklfyCiVwkhr4S6/PLLwRjD5Zdfjrfeegs777wzZs+eje985zu5j+13EzwfIDHzJxSPywx9KEUQSmIQ7+SRUAZWnEHaNVHOVg0M2ncW3XAkg9DVVIM0ykyz5542wk9VDYgaNJQD3OSgxyvSyMERmObpWv+rEIRLRWi9daL6E6GbhCrkkxg3qNJOVQKwG0lSArJckkIgxM9BH+W7gsNJJACoxWT8s2hD/9woNSDzpBpwkISnCEG4gRsRQ6g2B7lZsrSX0bJbV0w/6mr4nYNAggDIF4Moj8XdSNpUVPIRpTGmpqkCUG3IfN21BETljK0wZF3NnSTzVNzYSCezLUeeSSow4w26TXCVt9ONd57u2hZDr88S0o269rH0pFhKQtu9gNSYgTMxKh+fUZTQrmvEr9dPUgFJeQlEkNUlZKuBarOE6lID1YggiPIiQiBFDCwkVMrb8ftfXFHX1hVHTrscpVLK1hWV7Vj+zLU1HaMvo1/NMmokvEoIr0IqZsCDyyxSAR6DJ0bwoS/WHKhy4ArBiwLQhhvJQ3Qz+ZpCkJCjaBaVU1NXtQAyedoAX97TnnYT26rBWtsAUdc9SwlRo2SWVw3KdDLTVVBajyEkqAf+myQoCN6h+Fba0PpjowfdRLFDp2amjPwdDcSIJU0F6O3bJFAt3ZGXul4AUXqMBIDsakA3/npbsBSAVjfNLaRIQhFCFDtgAUUkERC8cgMGDU2KIfR1tDAhELxyyGMImqFXisHT4gtEag1C6GvrFUJBDCSmrOqG1DEalDcVOWINyk5KctENsTT6jB+TAGeswShnTzcV7TDNWKeSg0UCielA3LWktwOLIADDxcTzYeTH2jKSe/FGTIwTuBLtMtUJINZWM0hAptmG3iYBaPkyz1VOfc44UwhwBIYjEtBH/LH1BQ7jH5GEIIgGEUIzZhn1B7QuIZRDeH7It33w+J7w0tArF5EkCQ/KlWSoBgauEORsJI0YlPEXbTDSbnaCGWcQaepdGnTNnaQCz1I1iP4pEgEicpAqASZx2C6ihpCDOghM9SA6lEgQ2mH4x/gN5rzldFXSg0i9//MYf8BNACnG3MjPSALMVT7B0AMNUgPkLqdiBQ73kK0G9HzPCBbrxl9XCMQXmUpCCPlAr260aAyhZQmBlQMwP+TrDXzpnyGExKIFadJN5DNu7EMYqoG7dVi0lsETiiGMprNCI5qY0ZfEYLhQEE1vEuUMd5JWV6kMSzUAiBbGpakGRG1IciBLmcQMkSP4rDJt4kCcIGTVqHwySShj5VAFTlXRLCTc+854Qhbj78irSgIuAnDUcy4aE/XS1EBsZbGrnPpcPUisE4SLECKXEVnEoBMCGWlKIch6ihAoygsIXkOCytH5JeYPQLQuIYiRRFjygJDgASDG4BFAJW2EHQpikK4koQIkMUg2UOpCGXFE+dJI6kZMGHU5pVSWJ4+PgnRjp6adqrUKpBl5zeAjMjrR4zaTVYPMj2YdIYo3EMyZSsqIa9ZckYRmzKWRV3myE9r56HeT7RrSCUQmWfWNsnATRiOQOq3VdchqcQSbXGOfM6gAR37V4LCVF60bcLiEgNgonxtlFqXZJJHkFtIMfV1EYEwxlYvPpKLgLiIeeObk4FXqVwgsJLCUzYxYEUMYWGDlAAyBGOkzhODGkBt9xgPM0qj7EIaLEJak8ecb43Gy0FxFWvA5RgzyxpVLJjxt8OxZ5aVxBSIiUS8WKQtGxkN4UlWDZvydLiVE+RC/h6xnTmM1PpgkYBNAEkFoTcS2uXC5hVT9+I1oGO56VUO1+9xBEtX2I8pMAPrnrErAztONvEhjKfnJgeRsakCmOd1CMk9zC8WJISIOma9PI42Rgq4QKhQpBBEE9iohvKABS5ULl1FrgVX4lcbtE+MKwZeW0gPzCCE8MCbuBWHsPAjjTVwS8HyNJDQ1ENsgT+bDNJjKfkoSsPc/CmEqAeOzVB4ZVIPot64a1PEVITjIQSoHyLY146/6rRm3NIWgG3+9DYfLyLkfUkKwOcrX+p4VaUpA70uWujFycJTNQgBGHqrGBAC4iYAc+ZLzLaOu6ulqQL5bhGG7hWQ5VSfQ09KJIK4K3MFiVS4keIEgAeEm4sQQ8lfQgBiCuOdS8wcgWpYQUK6AoQIQjwgTxMXoedGCtBCKAcgjwGN8B2sG4UJCfHqqJAbiRGMQg/osjHeIaEM8aRwlKeiEoBMErDyZL9lKGkIVkNbIRlcNgpQMckAVcpDVrO0wqqoHq75h/O18nUhglZVJttF1Gf8MRr4qktpIM/p2XZfxd7XtKJfoChL1ne6gaiQARAacrM8uNSDfyZ2W6hZKWEgWkQFphAA+wFJkIYLFYaQI0oiAfw94WqX+pcrFLKMWAwsCwA+BCsB8DwgAhAxU4juhqvs1ZPAQcjcSCX6QNkq4h8ISE/bYVgiCGDwW3bRqxC2UhrzTZBzC08rpeyQJw06eNsiWBt04MX0orqdbqgFRP3TDH4s3qD7LMmSchx6Q5mpDy4f2bisIwCxnG35bHdhEocMVkK4V1e7zGBlkVAjVAtA6CcSMf9RGIgmoNIfLyC6fogZsd08WIjDyHESgymszhHSSULEBSRLCnjNh/FlAkYKohKJ8yFVDyFUBJDFUAqARLqNQkztJ+QMQLUsIKFfAWAXwPFDogZGaO8pn6PjiBvaEdRSzkULytOmp/IPc2sKIL0gDKi5yHleI0hQxhIgFn+09ktTxmLh5ZL6uKBCVJ8tIG+4kwFQNWj0Aihx4vkUODKoRl3LgZaqpB+tLmkJwxQZcBtuu2yjUqhCq1bMVgJ1nkYht4ONpjmmkWluxaaQpasAw8Hp93S2kFIBWXhrzWJpp9AFHjEASgjZ7CCRmCymSqEIEQQgEgchvwO52RQyhxRCIiwjS9nCLyRgDIYxu1pABJe5/4QP1kJeV0AyYV4EzvhDZPxKeG21EbWxcx8sQY0aaNNBKIUjjLl5yFbQkF2ecgcEccWttGyEN0uojUjp6vAHQjm+QXAb1gCgvOme4R9q9oRD0Y2VJz0Ia2mdnLMB410hApqeRgFZGu8wiQ24oA4tgktSAVd8IJNtEgMjQu91CiMUQzACyeK9oZaTxDxPcQ1q8AERcFYQhWCVQxFA3ihhCa4EqAcDKAJUAFoIRgXw+PYiFHiA31VPz+hmYx0AkpwZ5YuRvzkZSs4x8TjLRKmemjLlzDYM0oCH4Kmk5QtYUAu84lEKwp6ymxhl0YnCoBtulZBhgTRXoq6KjNFk2o3ow6sdJKuGL2S+jWIMVQp74QzXDr6e7ylYjAJXmLqeUgHhPJQFr5J+oBrQ8e9ZRbMaQQw1Ede0YAsUJQRKBWnWsG38S9yNZaoDAQuEeIgIrVxQxUKUCCosYQq1oWUJAGICCEIwF3PiTBxaE/D6Se0QEjLuPAqZuPGJi1XAljNxKgDKc3IYL6y58SYy4kTeG4upONtOMGUfijifGlAdFqQAPztlHSjVAEIWISejxCdeaBojyhmqQI3vZTZK/jSxDUYwBWj2Z5lIP8txUm9boniwloech4XsjAsjVYN//No+5CCDps8u4a+/VlABgEoHu7omMerIaMEb/ehsWKcTiBYARI3CtObDdR1Ea34kUkEZftKOnybYDcdGFxF1ANiHoqkAq/VAogyAAwgYohEAERFLzBx5alxAqFcAL+N7pXigWZDHO/CFXCwxQT35CyECeFwWVfS26W5JxBbE3knQZSbVguZGMWIKVZk9VBYRikMbYKqO+22rAfnicPB60PEEM+poGp2pQZSOl4oon2HsqAVpbGvEZ9tsRYzCUhJUnkbinUa3ckDLgYy7CqWb0AeNEU42/kc6cZVVL9kge+nfHthMuQtDSXcHiWLxAVwTO2IEkBKqSFq0lUN8tZQByzB4KHapAEAKCEKhUQET8ni5X0JAn5BQxhNYCEfHRBGNA6PHPnieCyHxkYsQVfICFISgUBkvsdMo8BgQktrRmyp8KaGrB8AkB0R2uj4750F1uoidH+dKNxMuRmrFkGGn5TAY5EwlRG9DaUgogjLpC8tCStJgsGLWr+qLUBRzKAYYicJGDhKEqog8aA6qfUMuz22CxNKOuK4uR27gnVsiQVo0A9DIpJKDSU0jAWUYnAr2cQw3o9ZMIwU0SCbOGHO4ht0LgBCC3lLCnkSqXkUhjAY8hGGQQBGIH0lCUiwLJFIT8og4CUBCAqAEKQV3gKfkDEC1LCAgCEAvBUAF8HxSyyC/oEVcAoRguVwBGHsjzwBCqYS8nCmHx5PRUuVDMIxFz4BZTGmypFpyzkZjcjlvbCkMzwLIOAEMxGAYnQTHE0mDmG0bYblcGlbW6SklQVF92Sfw4UTnZhoTehpFmGnmn7XYpg4w23v04HgeS7nWrQ06jb31ONf5GukUAMs1FAKIdJwnYhAAkGn87PqArBIMERJqsmxYsBjkWlWnlYrOHdFUgiaDCY3rq3VYGwkVElQoniUolIoNKpTGE0KIKIf5U+lZBGEZzicXIhOTFR/IiFT5K+V3Lg3YhS9cPpNQ1pDGZN564UaDdVMYSfYqnqZvJDtrp5VQaTJ8uJaRpBkDmG0ZC6480PqpcCKNvqi7M+qaxEIwk59k7+qLXg3Y+sky8nYiMEUbt1vxS7ZgvFoqX0Y+UPpP9+2jtkPm76W0av3toHkP/HfnL+o3tkTvMfrhG+M7+qutKK2f1iWll7DiBkW+RQUQA0Wd1DUsyCEN+n2nvEPehihdIdR8SlDLQ0xqxz5CMR6S9mogPPvgAp5xyCoYPH44ddtgBZ555JrZs2ZJa/oILLsDee++NQYMGYdddd8XXv/51bNy4MddxW1YhUECATyKwTGq9AcEacDIWxRGE+wgg/ssRVwhqIVtJxBU0Hz3PIx6Alo1X+L5IpPZIgrnthdrtNDm+YIz65RoGO8YARMd0KImYWoCVbqSJL+rcyCwvPhsxB4re1e8a/afeTKWg3cwJaoE58hMSnEm8wYT0KmUSVQGA2OhfL0NaV6x8Z9CYrPbIKq+XdakBrUw2haAZbr28RYD2WgM5gDEHKfE05R4CzNlDuptIDqD0wLEYmCljX+EzikjEDkAhKAhUGlXKoAEQQzjllFPwzjvv4LHHHkO5XMYZZ5yBs88+G/fdd5+z/Ntvv423334bN910E/bbbz+88cYbOPfcc/H222/jwQcfzHzcliWEqtD+4CwkbeYLmRZXPIuZgYkkMboSM3rkDCFjJMoIBMZnWPj8szIYcsSpG9KQE5ZoXrmfAJhte6It8BvRmJXEkL5eAZJcojb1NQry14jiGXqMJDLYUTwhak95grRz0qHHFFQcQp6X+N2V0dQNPKkqyajhvnXGqxOMf6w8We9wEIFh9F1pFhHY5W0S0fIS3UAJaXLXzpgisAhEldPJILZjaaQsoJOFoTgiMgBBm1EE6Mo79gqjz0QE7lsNo/RQfG8UQv2Pk5TfHKxZswaPPPIIfv/73+OQQw4BANxyyy049thjcdNNN2GXXXaJ1dl///3x7//+7+r75MmT8Z3vfAdf+tKXUKlUUCplM/WtTQhhyA2b5wmjC/6HZuICC4TVZIwHmX2PS1aPgcGLAs3wAI+4GhDbYjOhGjyE0dYVYj8kyEisiieQWregVAGTecKQa2oBQCy+wBPB22LgcQgg2vJCL6el6auWjTgDrHfrc6QEWEQaqgxZ02ejd6eCEH2P2XyHmpBwKgYdTqvuQAqbVCUGl9HX03VjnZRebR2C/rdNyMtLAkmKIK4G4uUiknDMHhJGHhRtQhcFnEm4VGEGjrU4gSIHXRlIN61wH0UBZPFZSyeNNOpGRoWwadMmI7mjowMdHR11HXrFihXYYYcdFBkAwMyZM+F5Hp555hl87nOfy9SOfN5zVjIAWjmGkAfywtBHK0A0qpGfAX6xkzaaAtQNKG8GPa4gbzijjLwx9dGYdtPaN7rrxmeyH5bsVwFCO02kJ41CY+Ws+ITZZ7e/PGZYZLpeHxr/6OcXmt+d8QX9FbJsL2ddrX8U72esr45+xs4zZnQ5q9rxA8MoJ8UIbOMdxn+T1L+7sa20Vdf4Xclx/UVxK3XN6r+L5iJiKp+0a4u065yUYlD3km6I1b1FETGo+zBSA9QIArAhj5n44secMGECRowYoV4LFy6s+9Dr16/H6NGjjbRSqYQdd9wR69evz9TGhg0bcM011+Dss8/OdezWVQgeE9NMvdi8dyKKz4XX1hWoIDPAZycxoTTCUGx9gchiiJmtke9dDI3FDqXR6l85zKboucoQx5BTTRlUrIERILe4UGpBNAP9eNqT0+SjNl3PT7D3T5L5hmqw8gDE1i0Y7cKtHlQ9vY71OTarVFc4elmHLchjHtK8Tc6GtLTYyF/7bLqRqqgAV5p9HJkXRuWNkT8QGV29nBzla2m2AZdpLjdSRGqWe0jMIFLlJdEQzHiBpgzkttQqRhBCGFdATdgQQWMmR/vapA6yiKCpCCXTpuUDb775JoYPH66S09TBvHnzcMMNN6Qeds2aNbm66cKmTZtw3HHHYb/99sNVV12Vq27LEoK+sApAZCyBOBno0GMICeXk6IcgVilLS0qAXJdAIQljKQLZpPn/KYoryGPKciDdNmvxB0L1dQih2CdJT0N0GL0N6Onii26k9TrShQRHeXmQKLbAFKGJH4e3ZxGOEVfQ29O+J1nzVCOfBQ4iiLmPaiEBV1nbqCcQTlI8IbNrKKF8LKZgqVSlCqw2FRlo7XOjT6rPAAxlwL+Tlm79qIqIZBvWewKYXL9DYpq3fu/Uiowuo+HDhxuEkIZvfOMbOP3001PL7L777hg7dizee+89I71SqeCDDz7A2LFjU+tv3rwZf//3f49hw4bh5z//Odra2jL1TaJlCQG+D+b7YjQuNwUSC9OYUA+2cvAsUyNVgrr4WTQiD3lzfAIQAwUE5iMy4AAQ8NgBt4vMVApyqwsJqThkmnpGAim1oIoyqACy/bAdBoryGDNjDLZR1tSBvWJZVwPStkcdcCgAXVGo7xHDGCpCP2dY9bRjpCILK1QzGla+y+DH0833TISgt+MiB9twy7wqJADAGSMw3vWYQJU0Y6sJ4QbSy6nFZRoxRO4jbUuKIHIVRQRCphGu5gZiHo+XeXL/sRDEon3GeooQ8mDnnXfGzjvvXLXc9OnT8eGHH2LlypWYOnUqAOCJJ55AGIaYNm1aYr1NmzZh1qxZ6OjowK9+9St0dnbm7mPLxhAMMtDemSQDCUkQTLOSGihNTbiOq/ym8rvemDbi0qW+NaJLG9m5Yg12bMAwHKHdjl3GPLZqz3AxOM7DFStISrfz1LGYeqWuA0g456qvhLpZ1j/Yfwf9HGO/l/U7MUc511RQoy+uGI72u7kUQVUyUNdNPHZlX2N6rCvWd4KIjVkXe6OMqrZjgBq8AdH9Ku5Z5ntgcqBXJ0gudEt5NQv77rsv/v7v/x5f+cpX8Oyzz+J3v/sdzj//fHzxi19UM4zeeust7LPPPnj22WcBcDI4+uijsXXrVvz4xz/Gpk2bsH79eqxfvx5Bjr62rkIolQC/FBGBJAHfjy4431MXI7mIIYEkFOTj1SBcPiHUdFTddcQ8psqSyFPTUj2C8v8TAMinrYkhs/4iUVZXC4RYfEGlCYUBIJqVJE4rNtvIoRpceQAMtaHcQ9DKizKGgrDy3Z+Z8T2NitOmosbcP84G0r+nqQIj31WPHGUoIV8r48yzSCBWLrQ+A9FgI4kkQjvP4SLS4wpysZn0/SPKiwYepAiCJRGFcMWSJ92aTMz8gxqk8ctcEEMY8B2Gxf1DRGC+mLVU71IEffJIUn4Tce+99+L888/H3/3d38HzPPzzP/8z/s//+T8qv1wu4+WXX8a2bdsAAKtWrcIzzzwDANhjjz2MttauXYuJEydmOm7rEoLnc7eRNsJQRl43/jYZeJH1I3nBiu/xY1RRD9JIhxTtnCpvXkT+fr6ADcrI8jctrsDsfGnxI4OsZcOuwgsKYpBxDEdZOL7bea58dQgtg2kdSjLeRrJdznUAvW6t96vLTqWRQ1YS0NITiUCkJbmFVDnd0MIsY8caYnlIJwNo6lUnAFh9Sv1dbMVoF5ObSFqfeaMaKcg/uPGYQrHzrwcAPkChGMQRGN9oDIzqVwj8fug9Qthxxx0TF6EBwMSJE43ZVUceeWRDZlu1LCGwjjYwv90w8PqonyxSiGboiIfl+FE9UupCa0u1y98SjR7pRlsYeWk49RtT5Yp0LypvTIYQQkKN1HQnvfbSF6bJYyjFoEb/kQph8hyyKAO431UbMl079/gPY37NHUNIKpflnslLCq4yGY2/+p5ECHp+GglAL5P0nk4ErhgCAGO7FYM4Qr0vGY2RnGWn3D7EZ+p5cofGqB11BYdaed+LpnarQDWfiaQMYiXrxZGCao/Q7KnZTj2MliUElLhCABCpAPFZvWu+SqUWbDdRbEuHaKVtrGxWSOMsmxTTXaVqkGUMpeBSApoMMIknedRvju6jmU+I5WVTBq4yejqzzpUSKsZ+QUomWbtcHjjJKaWNVBKQaRmJwE6LEwXF8pLcSklk4Cxnt4fIwNs20SifF3J2ngdOAjJdkoL8Low+RMCYX/viBiMyiUMjC9Vnr37/PgUBiCW305gdVfseWpYQqLMD5LfzL7rBVrt0xg29fI+5ilQd8C0m5MgaMIlGbJFtzNBJURCMNAIATOMC3YBH7iNdQfAEEsdh0c3taZW14yvFYKiA6ID2oz1t1eCaWRRTBXo5q6w6L/u3cLBPorJoALKQQt4YQsyd5EiPj/TJmZekKNxrFDQSkSN/a6SfqCRCqw11zPgPZLh+vKgIE08FVGQQgruCmHjGh3yimyfXGfAy8PXz10b/9pRUR38oaIBC6GWXUW+hV2cZ/eY3v8Hs2bOxyy67gDGGX/ziF1XrLF++HAcffDA6Ojqwxx574O67767p2OT7/NXmg0pe9PIZqORx90/JU4vXSL58QQZa3IEYeD3fiwy+HXSWZCCPn7AGomZoxsN4F5/tEWLMsFjpLndE0kwTVz27jKucUdZe7aqXc8wISl2lXOer6rHChH6nnGuW38TMj/6esXLG31WrZ6dpSFYCyI8kxcuQrIplnicUtLx//OjeIHGvwWeAz8Q9xcR9x+9XlByvtlL8VS/krqlprwGIXlUIW7duxUEHHYQvf/nL+Kd/+qeq5deuXYvjjjsO5557Lu69914sW7YMZ511FsaNG4dZs2blOnY4pA1hSSiEpD+uw1BHF7yWqCsE+d2Ll7frRorCaiOFH1yqQY6qWWRDYkFj/lkYdEFaKl8vqKmWaopBnl89qkD1z/g9tdNz/Nyp8YM83Jp2TzvynKogKd2Vbxthw4hTvIzjc5rLyPxMifkqBqD12XWMGOQ1Q+LvKe4PglgLI3RqpIKlKpAXgajoIxrx6/0F+IJN+3fTkPonE4cJKg0w1iTZPi1/4KFXCeGYY47BMccck7n8kiVLMGnSJHzve98DwOfrPvXUU/j+97+fnxBKHsKSxy86e1KC/cd2jIhMAya+eHq+bfwZdOPIyzOjHTsom3eNgw0ZL3AaSUkk0eEi40taHzXCkZ9h1BMGQGchuMqJ7w73j91FPduOMdj5rvOKNZhUJgUxY5Qw4o7luUbeKUTA07OTgdPFBPszufvrOm9XmvU34qQftcnJnUeYAE4MFIpFmuJaEPPfOEmoxZpywgQh8vuLNuXx5CAsfgrxPqrPuvIGQq9B6xBYsgOliCH0AaxYsQIzZ8400mbNmoWLLrood1vloW1AqU1dieqGCq3vEimjJhsGWXgsns5cadF7jEw87XMaSWg3mi0PTOOv3aywisvRH8m+iPqOfkYyxGIBrZ92PUM96OfIrCT7NO18/bTr403eZla1kJEYYsZf++wkgKTvjjRneTLbTSKOWN9jo4Los3qcK/i1AhaRDel/SAIf3Gj3EoFpypslE2gWOBSjMZiSEznEq1JuQFBZ3/LelV8ohN7H+vXrMWbMGCNtzJgx2LRpEz766CMMGjQoVqerqwtdXV3qu3yCUCXcDqjFNoB+ldrkoMO+RhKNkSSC0FWOmWkx90oGQmBm/djNIevrZczDu1ULi/fLNZ3UWcZ1Do7zAyyb4LrhHXmpaRYavjDNkZZIBq46DSID9d35WSME/fjO+pRIMrE+6ovb9Dy7f1olI826j7LGLVwDK1U1iF/n8nquBPx+r8doV6gLaVNLK3WvfOub6FeEUAsWLlyIq6++Opb++2X1b1NboECBvou//OUvGDFiRK467e3tGDt2LJ5av7Rq2bFjx6K9vb3W7vVJ9CtCGDt2LN59910j7d1338Xw4cOd6gAA5s+fj7lz56rvH374IXbbbTesW7cu98XSl7Bp0yZMmDAhtv1uf8NAOI+BcA7AwDmPjRs3Ytddd8WOO+6Yu25nZyfWrl2L7u7uqmXb29tr2kCuL6NfEcL06dOxdKnJ3I899himT5+eWCfpCUYjRozo1xe9RJ7td/syBsJ5DIRzAAbOeXhebbPqOzs7B5yhz4peXYewZcsWPPfcc3juuecA8Gmlzz33HNatWweAj+5PO+00Vf7cc8/Fa6+9hm9961t46aWXcPvtt+NnP/sZLr744t7ofoECBQoMKPQqIfzhD3/Axz/+cXz84x8HAMydOxcf//jHceWVVwIA3nnnHUUOADBp0iQ8/PDDeOyxx3DQQQfhe9/7Hn70ox/lnnJaoECBAgXi6FWXUbUd+lyrkI888kisXr265mN2dHRgwYIFdT8Iu7dRnEffwUA4B6A4jwIAo4E6obZAgQIFCuRCyz4xrUCBAgUKmCgIoUCBAgUKACgIoUCBAgUKCAxIQrjtttswceJEdHZ2Ytq0aepB1El44IEHsM8++6CzsxMHHHBAbK1DbyHPedxxxx04/PDDMXLkSIwcORIzZ86set49hbx/D4n7778fjDEcf/zxze1gBuQ9hw8//BDnnXcexo0bh46ODuy111594rrKex6LFy/G3nvvjUGDBmHChAm4+OKLsX379h7qbRy9uWV+S4AGGO6//35qb2+nO++8k/74xz/SV77yFdphhx3o3XffdZb/3e9+R77v04033kgvvvgiXX755dTW1kbPP/98D/fcRN7zOPnkk+m2226j1atX05o1a+j000+nESNG0P/+7//2cM9N5D0PibVr19L48ePp8MMPp89+9rM909kE5D2Hrq4uOuSQQ+jYY4+lp556itauXUvLly+n5557rod7biLvedx7773U0dFB9957L61du5YeffRRGjduHF188cU93PMIS5cupcsuu4z+4z/+gwDQz3/+89Tyr732Gg0ePJjmzp1LL774It1yyy3k+z498sgjPdPhfoYBRwiHHnoonXfeeep7EAS0yy670MKFC53lTzjhBDruuOOMtGnTptE555zT1H5WQ97zsFGpVGjYsGH0k5/8pFldzIRazqNSqdCMGTPoRz/6Ec2ZM6fXCSHvOfzgBz+g3Xffnbq7u3uqi5mQ9zzOO+88+tu//Vsjbe7cuXTYYYc1tZ9ZkYUQvvWtb9HHPvYxI+3EE0+kWbNmNbFn/RcDymXU3d2NlStXGltke56HmTNnYsWKFc46SVtqJ5XvCdRyHja2bduGcrlc034ujUKt5/Htb38bo0ePxplnntkT3UxFLefwq1/9CtOnT8d5552HMWPGYP/998d1112HIOi9PfRrOY8ZM2Zg5cqVyq302muvYenSpTj22GN7pM+NQF+8v/sy+tVeRtWwYcMGBEHg3CL7pZdectZJ2lJ7/fr1TetnNdRyHjYuueQS7LLLLrGboSdRy3k89dRT+PGPf6y2M+lt1HIOr732Gp544gmccsopWLp0KV599VV87WtfQ7lcxoIFC3qi2zHUch4nn3wyNmzYgE996lMgIlQqFZx77rm49NJLe6LLDUEtW+a3MgaUQijAcf311+P+++/Hz3/+8361SdfmzZtx6qmn4o477sCoUaN6uzs1IwxDjB49Gj/84Q8xdepUnHjiibjsssuwZMmS3u5aLixfvhzXXXcdbr/9dqxatQr/8R//gYcffhjXXHNNb3etQJMwoBTCqFGj4Pu+c4vssWPHOuskbamdVL4nUMt5SNx00024/vrr8fjjj+PAAw9sZjerIu95/PnPf8brr7+O2bNnq7Qw5A8pKZVKePnllzF58uTmdtpCLX+LcePGoa2tDb4fPcpx3333xfr169Hd3d0re+jXch5XXHEFTj31VJx11lkAgAMOOABbt27F2Wefjcsuu6zm3UR7ErVsmd/K6Pt/0Rxob2/H1KlTsWzZMpUWhiGWLVuWuEX29OnTjfJA9S21m41azgMAbrzxRlxzzTV45JFHcMghh/REV1OR9zz22WcfPP/882oH3Oeeew7/+I//iM985jN47rnnMGHChJ7sPoDa/haHHXYYXn31VUVmAPDKK69g3LhxvfZAlVrOY9u2bTGjL0mO+smON33x/u7T6O2odqNx//33U0dHB91999304osv0tlnn0077LADrV+/noiITj31VJo3b54q/7vf/Y5KpRLddNNNtGbNGlqwYEGfmXaa5zyuv/56am9vpwcffJDeeecd9dq8eXNvnQIR5T8PG31hllHec1i3bh0NGzaMzj//fHr55ZfpoYceotGjR9O1117bW6dARPnPY8GCBTRs2DD6f//v/9Frr71Gv/71r2ny5Ml0wgkn9NYp0ObNm2n16tW0evVqAkCLFi2i1atX0xtvvEFERPPmzaNTTz1VlZfTTr/5zW/SmjVr6LbbbiumnaZgwBECEdEtt9xCu+66K7W3t9Ohhx5K//Vf/6XyjjjiCJozZ45R/mc/+xnttdde1N7eTh/72Mfo4Ycf7uEeu5HnPHbbbTf5lFvjtWDBgp7vuIW8fw8dfYEQiPKfw9NPP03Tpk2jjo4O2n333ek73/kOVSqVHu51HHnOo1wu01VXXUWTJ0+mzs5OmjBhAn3ta1+jv/71rz3fcYEnn3zSeZ3Lfs+ZM4eOOOKIWJ0pU6ZQe3s77b777nTXXXf1eL/7C4rdTgsUKFCgAIABFkMoUKBAgQK1oyCEAgUKFCgAoCCEAgUKFCggUBBCgQIFChQAUBBCgQIFChQQKAihQIECBQoAKAihQIECBQoIFIRQoECBAgUAFIRQoECBAgUECkIoUKBAgQIACkIoUKBAgQICBSEUGJB4//33MXbsWFx33XUq7emnn0Z7e3tsO+QCBQpwFJvbFRiwWLp0KY4//ng8/fTT2HvvvTFlyhR89rOfxaJFi3q7awUK9EkUhFBgQOO8887D448/jkMOOQTPP/88fv/736Ojo6O3u1WgQJ9EQQgFBjQ++ugj7L///njzzTexcuVKHHDAAb3dpQIF+iyKGEKBAY0///nPePvttxGGIV5//fXe7k6BAn0ahUIoMGDR3d2NQw89FFOmTMHee++NxYsX4/nnn8fo0aN7u2sFCvRJFIRQYMDim9/8Jh588EH893//N4YOHYojjjgCI0aMwEMPPdTbXStQoE+icBkVGJBYvnw5Fi9ejHvuuQfDhw+H53m455578Nvf/hY/+MEPert7BQr0SRQKoUCBAgUKACgUQoECBQoUECgIoUCBAgUKACgIoUCBAgUKCBSEUKBAgQIFABSEUKBAgQIFBApCKFCgQIECAApCKFCgQIECAgUhFChQoEABAAUhFChQoEABgYIQChQoUKAAgIIQChQoUKCAQEEIBQoUKFAAAPD/AZnc317Cek8/AAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Check if CUDA (GPU) is available\n",
    "# Visualization for 1D heat equation\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Generate the test data with the correct dimensions for the heat equation\n",
    "res_test = make_time_sequence(res_test, num_step=5, step=1e-4) \n",
    "res_test = torch.tensor(res_test, dtype=torch.float32, requires_grad=True).to(device)\n",
    "x_test, t_test = res_test[:,:,0:1], res_test[:,:,1:2]\n",
    "\n",
    "# Predict using the model\n",
    "with torch.no_grad():\n",
    "    pred = model(x_test, t_test)[:, 0:1]\n",
    "    pred = pred.cpu().detach().numpy()\n",
    "\n",
    "# Reshape the prediction to fit 101x101 grid (space and time)\n",
    "pred = pred.reshape(101, 101)\n",
    "\n",
    "# Define analytical solution for the 1D heat equation\n",
    "# For the example: u(x, t) = e^(-n^2 * pi^2 * alpha * t) * sin(n * pi * x / L)\n",
    "def u_ana(x, t, alpha=0.4, L=1, n=1):\n",
    "    return np.exp(-(n**2 * np.pi**2 * alpha * t) / (L**2)) * np.sin(n * np.pi * x / L)\n",
    "    #return np.exp(-n**2 * np.pi**2 * alpha * t) * np.sin(n * np.pi * x / L)\n",
    "\n",
    "# Get the test data again for analytical solution comparison\n",
    "res_test, _, _, _, _ = get_data([0, L], [0, 1], 101, 101)\n",
    "\n",
    "# Compute the analytical solution for the heat equation\n",
    "u = u_ana(res_test[:,0], res_test[:,1]).reshape(101, 101)\n",
    "\n",
    "# Compute relative errors (L1 and L2)\n",
    "rl1 = np.sum(np.abs(u - pred)) / np.sum(np.abs(u))\n",
    "rl2 = np.sqrt(np.sum((u - pred) ** 2) / np.sum(u ** 2))\n",
    "\n",
    "print('Relative L1 error: {:4f}'.format(rl1))\n",
    "print('Relative L2 error: {:4f}'.format(rl2))\n",
    "\n",
    "# Visualization of the predicted solution u(x,t)\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(pred, extent=[0, L, 1, 0], aspect='auto')\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('t')\n",
    "plt.title('Predicted u(x,t) - 1D Heat Equation')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./1dheat_pinnsformer_pred.png')\n",
    "plt.show()\n",
    "\n",
    "# Visualization of the analytical solution u_ana(x,t)\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(u, extent=[0, L, 1, 0], aspect='auto')\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('t')\n",
    "plt.title('Analytical u(x,t) - 1D Heat Equation')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./1dheat_analytical.png')\n",
    "plt.show()\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "sourceId": 194069625,
     "sourceType": "kernelVersion"
    }
   ],
   "dockerImageVersionId": 30762,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 1093.326098,
   "end_time": "2024-09-08T22:39:13.762862",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-09-08T22:21:00.436764",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
