{"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":194069625,"sourceType":"kernelVersion"}],"dockerImageVersionId":30762,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np\nimport torch\nimport torch.nn as nn\nimport matplotlib.pyplot as plt\nimport random\nfrom torch.optim import LBFGS\nfrom tqdm import tqdm\n\nfrom utility_py import *\n\nclass PINNs(nn.Module):\n    def __init__(self, in_dim, hidden_dim, out_dim, num_layer):\n        super(PINNs, self).__init__()\n\n        layers = []\n        for i in range(num_layer-1):\n            if i == 0:\n                layers.append(nn.Linear(in_features=in_dim, out_features=hidden_dim))\n                layers.append(nn.Tanh())\n            else:\n                layers.append(nn.Linear(in_features=hidden_dim, out_features=hidden_dim))\n                layers.append(nn.Tanh())\n\n        layers.append(nn.Linear(in_features=hidden_dim, out_features=out_dim))\n\n        self.linear = nn.Sequential(*layers)\n\n    def forward(self, x, t):\n        src = torch.cat((x,t), dim=-1)\n        return self.linear(src)\n\n","metadata":{"execution":{"iopub.status.busy":"2024-09-08T19:45:13.907842Z","iopub.execute_input":"2024-09-08T19:45:13.908242Z","iopub.status.idle":"2024-09-08T19:45:17.254834Z","shell.execute_reply.started":"2024-09-08T19:45:13.908205Z","shell.execute_reply":"2024-09-08T19:45:17.253837Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"# implementation of PINNsformer\n# paper: PINNsFormer: A Transformer-Based Framework For Physics-Informed Neural Networks\n# link: https://arxiv.org/abs/2307.11833\n\nimport pdb\n\n#from utility_py import get_clones\n\nclass WaveAct(nn.Module):\n    def __init__(self):\n        super(WaveAct, self).__init__() \n        self.w1 = nn.Parameter(torch.ones(1), requires_grad=True)\n        self.w2 = nn.Parameter(torch.ones(1), requires_grad=True)\n\n    def forward(self, x):\n        return self.w1 * torch.sin(x)+ self.w2 * torch.cos(x)\n\nclass FeedForward(nn.Module):\n    def __init__(self, d_model, d_ff=256):\n        super(FeedForward, self).__init__() \n        self.linear = nn.Sequential(*[\n            nn.Linear(d_model, d_ff),\n            WaveAct(),\n            nn.Linear(d_ff, d_ff),\n            WaveAct(),\n            nn.Linear(d_ff, d_model)\n        ])\n\n    def forward(self, x):\n        return self.linear(x)\n\n\nclass EncoderLayer(nn.Module):\n    def __init__(self, d_model, heads):\n        super(EncoderLayer, self).__init__()\n\n        self.attn = nn.MultiheadAttention(embed_dim=d_model, num_heads=heads, batch_first=True)\n        self.ff = FeedForward(d_model)\n        self.act1 = WaveAct()\n        self.act2 = WaveAct()\n        \n    def forward(self, x):\n        x2 = self.act1(x)\n        # pdb.set_trace()\n        x = x + self.attn(x2,x2,x2)[0]\n        x2 = self.act2(x)\n        x = x + self.ff(x2)\n        return x\n\n\nclass DecoderLayer(nn.Module):\n    def __init__(self, d_model, heads):\n        super(DecoderLayer, self).__init__()\n\n        self.attn = nn.MultiheadAttention(embed_dim=d_model, num_heads=heads, batch_first=True)\n        self.ff = FeedForward(d_model)\n        self.act1 = WaveAct()\n        self.act2 = WaveAct()\n\n    def forward(self, x, e_outputs): \n        x2 = self.act1(x)\n        x = x + self.attn(x2, e_outputs, e_outputs)[0]\n        x2 = self.act2(x)\n        x = x + self.ff(x2)\n        return x\n\n\nclass Encoder(nn.Module):\n    def __init__(self, d_model, N, heads):\n        super(Encoder, self).__init__()\n        self.N = N\n        self.layers = get_clones(EncoderLayer(d_model, heads), N)\n        self.act = WaveAct()\n\n    def forward(self, x):\n        for i in range(self.N):\n            x = self.layers[i](x)\n        return self.act(x)\n\nclass Decoder(nn.Module):\n    def __init__(self, d_model, N, heads):\n        super(Decoder, self).__init__()\n        self.N = N\n        self.layers = get_clones(DecoderLayer(d_model, heads), N)\n        self.act = WaveAct()\n        \n    def forward(self, x, e_outputs):\n        for i in range(self.N):\n            x = self.layers[i](x, e_outputs)\n        return self.act(x)\n\n\n\nclass PINNsformer(nn.Module):\n    def __init__(self, d_out, d_model, d_hidden, N, heads):\n        super(PINNsformer, self).__init__()\n\n        self.linear_emb = nn.Linear(2, d_model)\n\n        self.encoder = Encoder(d_model, N, heads)\n        self.decoder = Decoder(d_model, N, heads)\n        self.linear_out = nn.Sequential(*[\n            nn.Linear(d_model, d_hidden),\n            WaveAct(),\n            nn.Linear(d_hidden, d_hidden),\n            WaveAct(),\n            nn.Linear(d_hidden, d_out)\n        ])\n\n    def forward(self, x, t):\n        src = torch.cat((x,t), dim=-1)\n        src = self.linear_emb(src)\n\n        e_outputs = self.encoder(src)\n        d_output = self.decoder(src, e_outputs)\n        output = self.linear_out(d_output)\n        # pdb.set_trace()\n        # raise Exception('stop')\n        return output","metadata":{"execution":{"iopub.status.busy":"2024-09-08T19:45:20.320003Z","iopub.execute_input":"2024-09-08T19:45:20.320834Z","iopub.status.idle":"2024-09-08T19:45:20.343674Z","shell.execute_reply.started":"2024-09-08T19:45:20.320793Z","shell.execute_reply":"2024-09-08T19:45:20.342797Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"a = 0.4  # Thermal diffusivity\nL = 1  # Length of the bar\nn = 1  # Frequency of the sinusoidal initial conditions\n# device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n# model = model.to(device)\n\n\ndef heat_eq_exact_solution(x, t):\n    \"\"\"Returns the exact solution for a given x and t (for sinusoidal initial conditions).\n\n    Parameters\n    ----------\n    x : np.ndarray\n    t : np.ndarray\n    \"\"\"\n    return np.exp(-(n**2 * np.pi**2 * a * t) / (L**2)) * np.sin(n * np.pi * x / L)\n\ndef gen_exact_solution():\n    \"\"\"Generates exact solution for the heat equation for the given values of x and t.\"\"\"\n    # Number of points in each dimension:\n    x_dim, t_dim = (256, 201)\n\n    # Bounds of 'x' and 't':\n    x_min, t_min = (0, 0.0)\n    x_max, t_max = (L, 1.0)\n\n    # Create tensors:\n    t = np.linspace(t_min, t_max, num=t_dim).reshape(t_dim, 1)\n    x = np.linspace(x_min, x_max, num=x_dim).reshape(x_dim, 1)\n    usol = np.zeros((x_dim, t_dim)).reshape(x_dim, t_dim)\n\n    # Obtain the value of the exact solution for each generated point:\n    for i in range(x_dim):\n        for j in range(t_dim):\n            usol[i][j] = heat_eq_exact_solution(x[i], t[j])\n\n    # Save solution:\n    np.savez(\"heat_eq_data\", x=x, t=t, usol=usol)\n\n\ndef gen_testdata():\n    \"\"\"Import and preprocess the dataset with the exact solution.\"\"\"\n    # Load the data:\n    data = np.load(\"heat_eq_data.npz\")\n    # Obtain the values for t, x, and the excat solution:\n    t, x, exact = data[\"t\"], data[\"x\"], data[\"usol\"].T\n    # Process the data and flatten it out (like labels and features):\n    xx, tt = np.meshgrid(x, t)\n    X = np.vstack((np.ravel(xx), np.ravel(tt))).T\n    y = exact.flatten()[:, None]\n    return X, y\n\ngen_exact_solution()","metadata":{"execution":{"iopub.status.busy":"2024-09-08T19:45:37.861047Z","iopub.execute_input":"2024-09-08T19:45:37.861437Z","iopub.status.idle":"2024-09-08T19:45:38.703518Z","shell.execute_reply.started":"2024-09-08T19:45:37.861397Z","shell.execute_reply":"2024-09-08T19:45:38.702692Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_36/3867972684.py:35: DeprecationWarning: Conversion of an array with ndim > 0 to a scalar is deprecated, and will error in future. Ensure you extract a single element from your array before performing this operation. (Deprecated NumPy 1.25.)\n  usol[i][j] = heat_eq_exact_solution(x[i], t[j])\n","output_type":"stream"}]},{"cell_type":"code","source":"seed = 1\nnp.random.seed(seed)\nrandom.seed(seed)\ntorch.manual_seed(seed)\ntorch.cuda.manual_seed(seed)\ntorch.cuda.is_available() \n\ndevice = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\nprint(device)\nstep_size = 1e-4","metadata":{"execution":{"iopub.status.busy":"2024-09-08T19:45:42.345493Z","iopub.execute_input":"2024-09-08T19:45:42.346446Z","iopub.status.idle":"2024-09-08T19:45:42.357180Z","shell.execute_reply.started":"2024-09-08T19:45:42.346401Z","shell.execute_reply":"2024-09-08T19:45:42.356191Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"cuda:0\n","output_type":"stream"}]},{"cell_type":"code","source":"# # Train PINNsformer\n# res, b_left, b_right, b_upper, b_lower = get_data([0,L], [0,1], 51, 51)\n# res_test, _, _, _, _ = get_data([0,L], [0,1], 101, 101)\n\n# res = make_time_sequence(res, num_step=5, step=1e-4)\n# b_left = make_time_sequence(b_left, num_step=5, step=1e-4)\n# b_right = make_time_sequence(b_right, num_step=5, step=1e-4)\n# b_upper = make_time_sequence(b_upper, num_step=5, step=1e-4)\n# b_lower = make_time_sequence(b_lower, num_step=5, step=1e-4)\n\n# res = torch.tensor(res, dtype=torch.float32, requires_grad=True).to(device)\n# b_left = torch.tensor(b_left, dtype=torch.float32, requires_grad=True).to(device)\n# b_right = torch.tensor(b_right, dtype=torch.float32, requires_grad=True).to(device)\n# b_upper = torch.tensor(b_upper, dtype=torch.float32, requires_grad=True).to(device)\n# b_lower = torch.tensor(b_lower, dtype=torch.float32, requires_grad=True).to(device)\n\n# x_res, t_res = res[:,:,0:1], res[:,:,1:2]\n# x_left, t_left = b_left[:,:,0:1], b_left[:,:,1:2]\n# x_right, t_right = b_right[:,:,0:1], b_right[:,:,1:2]\n# x_upper, t_upper = b_upper[:,:,0:1], b_upper[:,:,1:2]\n# x_lower, t_lower = b_lower[:,:,0:1], b_lower[:,:,1:2]\n\n# def init_weights(m):\n#     if isinstance(m, nn.Linear):\n#         torch.nn.init.xavier_uniform(m.weight)\n#         m.bias.data.fill_(0.01)","metadata":{"execution":{"iopub.status.busy":"2024-09-07T22:08:38.717653Z","iopub.execute_input":"2024-09-07T22:08:38.717935Z","iopub.status.idle":"2024-09-07T22:08:38.733560Z","shell.execute_reply.started":"2024-09-07T22:08:38.717904Z","shell.execute_reply":"2024-09-07T22:08:38.732885Z"},"trusted":true},"execution_count":37,"outputs":[]},{"cell_type":"code","source":"\nres, b_left, b_right, _, _ = get_data([0, L], [0, 1], 51, 51)\nres_test, _, _, _, _ = get_data([0, L], [0, 1], 101, 101)\n\n# Define the initial condition for u(x, 0)\ndef u_init(x):\n   \n    return np.sin(x)\nprint(res[:, 0])\n\n# Apply the initial condition to the spatial points at t=0\ninit_cond = u_init(res[:, 0])  # Assuming t=0 corresponds to the first time point\n\n# Extend time sequence\nres = make_time_sequence(res, num_step=5, step=1e-4)\nb_left = make_time_sequence(b_left, num_step=5, step=1e-4)\nb_right = make_time_sequence(b_right, num_step=5, step=1e-4)\n\n# Convert to PyTorch tensors\nres = torch.tensor(res, dtype=torch.float32, requires_grad=True).to(device)\nb_left = torch.tensor(b_left, dtype=torch.float32, requires_grad=True).to(device)\nb_right = torch.tensor(b_right, dtype=torch.float32, requires_grad=True).to(device)\n\n# Initial condition as tensor\ninit_cond = torch.tensor(init_cond, dtype=torch.float32).to(device)\n\n# Separate spatial (x) and temporal (t) components\nx_res, t_res = res[:, :, 0:1], res[:, :, 1:2]\nx_left, t_left = b_left[:, :, 0:1], b_left[:, :, 1:2]\nx_right, t_right = b_right[:, :, 0:1], b_right[:, :, 1:2]\n\n\n\n# Boundary conditions:\n# You will now have to impose boundary conditions as part of your training loss.\n# For example, if u(0, t) = 0 and u(L, t) = 0 (Dirichlet conditions), include them in the loss function.\n\n# Initialize model weights\ndef init_weights(m):\n    if isinstance(m, nn.Linear):\n        torch.nn.init.xavier_uniform_(m.weight)\n        m.bias.data.fill_(0.01)\n\n# Define loss function (for PINNs)\ndef loss_function(model_output, x_res, t_res, init_cond, b_left, b_right):\n    # 1. PDE residual loss (based on the heat equation)\n    # Compute u(x,t) from the model, then compute the PDE residual\n    u = model_output(x_res, t_res)\n    u_t = torch.autograd.grad(u, t_res, grad_outputs=torch.ones_like(u), create_graph=True)[0]\n    u_xx = torch.autograd.grad(torch.autograd.grad(u, x_res, grad_outputs=torch.ones_like(u), create_graph=True)[0], x_res, grad_outputs=torch.ones_like(u), create_graph=True)[0]\n    \n    residual_loss = torch.mean((u_t - alpha * u_xx) ** 2)\n\n    # 2. Initial condition loss: enforce u(x, 0) = f(x)\n    init_loss = torch.mean((u[:, 0, :] - init_cond) ** 2)  # Check the axis indexing if necessary\n\n    # 3. Boundary conditions: enforce Dirichlet BCs (u(0,t) = u(L,t) = 0)\n    left_bc_loss = torch.mean((u(x_left, t_left)) ** 2)\n    right_bc_loss = torch.mean((u(x_right, t_right)) ** 2)\n\n    # Combine the losses\n    total_loss = residual_loss + init_loss + left_bc_loss + right_bc_loss\n    return total_loss\n","metadata":{"execution":{"iopub.status.busy":"2024-09-08T19:50:27.827761Z","iopub.execute_input":"2024-09-08T19:50:27.828140Z","iopub.status.idle":"2024-09-08T19:50:28.154159Z","shell.execute_reply.started":"2024-09-08T19:50:27.828104Z","shell.execute_reply":"2024-09-08T19:50:28.153198Z"},"trusted":true},"execution_count":13,"outputs":[{"name":"stdout","text":"[0.   0.02 0.04 ... 0.96 0.98 1.  ]\ntensor([[[0.0000],\n         [0.0000],\n         [0.0000],\n         [0.0000],\n         [0.0000]],\n\n        [[0.0200],\n         [0.0200],\n         [0.0200],\n         [0.0200],\n         [0.0200]],\n\n        [[0.0400],\n         [0.0400],\n         [0.0400],\n         [0.0400],\n         [0.0400]],\n\n        ...,\n\n        [[0.9600],\n         [0.9600],\n         [0.9600],\n         [0.9600],\n         [0.9600]],\n\n        [[0.9800],\n         [0.9800],\n         [0.9800],\n         [0.9800],\n         [0.9800]],\n\n        [[1.0000],\n         [1.0000],\n         [1.0000],\n         [1.0000],\n         [1.0000]]], device='cuda:0', grad_fn=<SliceBackward0>)\n","output_type":"stream"}]},{"cell_type":"code","source":"model = PINNsformer(d_out=1, d_hidden=512, d_model=32, N=1, heads=2).to(device)\nimport torch.optim as optimer\nmodel.apply(init_weights)\noptim = LBFGS(model.parameters(), line_search_fn='strong_wolfe')\n#optim = optimer.Adam(model.parameters(), lr=1e-4)\n\nprint(model)\nprint(get_n_params(model))","metadata":{"execution":{"iopub.status.busy":"2024-09-08T19:50:50.472548Z","iopub.execute_input":"2024-09-08T19:50:50.472912Z","iopub.status.idle":"2024-09-08T19:50:51.440559Z","shell.execute_reply.started":"2024-09-08T19:50:50.472879Z","shell.execute_reply":"2024-09-08T19:50:51.439613Z"},"trusted":true},"execution_count":14,"outputs":[{"name":"stdout","text":"PINNsformer(\n  (linear_emb): Linear(in_features=2, out_features=32, bias=True)\n  (encoder): Encoder(\n    (layers): ModuleList(\n      (0): EncoderLayer(\n        (attn): MultiheadAttention(\n          (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)\n        )\n        (ff): FeedForward(\n          (linear): Sequential(\n            (0): Linear(in_features=32, out_features=256, bias=True)\n            (1): WaveAct()\n            (2): Linear(in_features=256, out_features=256, bias=True)\n            (3): WaveAct()\n            (4): Linear(in_features=256, out_features=32, bias=True)\n          )\n        )\n        (act1): WaveAct()\n        (act2): WaveAct()\n      )\n    )\n    (act): WaveAct()\n  )\n  (decoder): Decoder(\n    (layers): ModuleList(\n      (0): DecoderLayer(\n        (attn): MultiheadAttention(\n          (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)\n        )\n        (ff): FeedForward(\n          (linear): Sequential(\n            (0): Linear(in_features=32, out_features=256, bias=True)\n            (1): WaveAct()\n            (2): Linear(in_features=256, out_features=256, bias=True)\n            (3): WaveAct()\n            (4): Linear(in_features=256, out_features=32, bias=True)\n          )\n        )\n        (act1): WaveAct()\n        (act2): WaveAct()\n      )\n    )\n    (act): WaveAct()\n  )\n  (linear_out): Sequential(\n    (0): Linear(in_features=32, out_features=512, bias=True)\n    (1): WaveAct()\n    (2): Linear(in_features=512, out_features=512, bias=True)\n    (3): WaveAct()\n    (4): Linear(in_features=512, out_features=1, bias=True)\n  )\n)\n453561\n","output_type":"stream"}]},{"cell_type":"code","source":"#print(x_res) \nloss_track = []\na = 0.4  # Thermal diffusivity\nL = 1  # Length of the bar\nn = 1  # Frequency of the sinusoidal initial conditions\n\nfor i in tqdm(range(500)):\n    def closure():\n        pred_res = model(x_res, t_res)\n        pred_left = model(x_left, t_left)\n        pred_right = model(x_right, t_right)\n        #print(pred_res)\n        \n        #pred_upper = model(x_upper, t_upper)\n        #\n        #pred_lower = model(x_lower, t_lower)\n\n#         u_x = torch.autograd.grad(pred_res, x_res, grad_outputs=torch.ones_like(pred_res), retain_graph=True, create_graph=True)[0]\n#         u_t = torch.autograd.grad(pred_res, t_res, grad_outputs=torch.ones_like(pred_res), retain_graph=True, create_graph=True)[0]\n\n#         loss_res = torch.mean((u_t - 5 * pred_res * (1-pred_res)) ** 2)\n\n        u_x = torch.autograd.grad(pred_res, x_res, grad_outputs=torch.ones_like(pred_res), retain_graph=True, create_graph=True)[0]\n        u_xx = torch.autograd.grad(u_x, x_res, grad_outputs=torch.ones_like(u_x), retain_graph=True, create_graph=True)[0]\n        u_t = torch.autograd.grad(pred_res, t_res, grad_outputs=torch.ones_like(pred_res), retain_graph=True, create_graph=True)[0]\n\n        # Heat equation: ∂u/∂t = alpha * ∂²u/∂x²\n        alpha =a   # thermal diffusivity (can be modified)\n        loss_res =torch.mean((u_t - alpha * u_xx) )\n        \n        loss_ic = torch.mean((pred_res[:, 0, :] - init_cond) ** 2)  # Check the axis indexing if necessary\n\n        # 3. Boundary conditions: enforce Dirichlet BCs (u(0,t) = u(L,t) = 0)\n        left_bc_loss = torch.mean(pred_left ** 2)\n        right_bc_loss = torch.mean(pred_right ** 2)\n        loss_bc = left_bc_loss+right_bc_loss\n\n        loss_track.append([loss_res.item(), loss_bc.item(), loss_ic.item()])\n\n        loss = loss_res + loss_bc + loss_ic\n        optim.zero_grad()\n        loss.backward()\n        return loss\n\n    optim.step(closure)","metadata":{"execution":{"iopub.status.busy":"2024-09-08T19:58:46.554669Z","iopub.execute_input":"2024-09-08T19:58:46.555090Z"},"trusted":true},"execution_count":null,"outputs":[{"name":"stderr","text":" 50%|████▉     | 249/500 [16:23<16:32,  3.95s/it]","output_type":"stream"}]},{"cell_type":"code","source":"print(f\"Length of loss_track: {len(loss_track)}\")","metadata":{"execution":{"iopub.status.busy":"2024-09-07T22:32:13.757607Z","iopub.execute_input":"2024-09-07T22:32:13.758035Z","iopub.status.idle":"2024-09-07T22:32:13.762881Z","shell.execute_reply.started":"2024-09-07T22:32:13.757969Z","shell.execute_reply":"2024-09-07T22:32:13.761906Z"},"trusted":true},"execution_count":62,"outputs":[{"name":"stdout","text":"Length of loss_track: 1577\n","output_type":"stream"}]},{"cell_type":"code","source":"print('Loss Res: {:4f}, Loss_BC: {:4f}, Loss_IC: {:4f}'.format(loss_track[-1][0], loss_track[-1][1], loss_track[-1][2]))\nprint('Train Loss: {:4f}'.format(np.sum(loss_track[-1])))\n\ntorch.save(model.state_dict(), './1dreaction_pinnsformer.pt')","metadata":{"execution":{"iopub.status.busy":"2024-09-07T22:32:19.180629Z","iopub.execute_input":"2024-09-07T22:32:19.181498Z","iopub.status.idle":"2024-09-07T22:32:19.198850Z","shell.execute_reply.started":"2024-09-07T22:32:19.181457Z","shell.execute_reply":"2024-09-07T22:32:19.197743Z"},"trusted":true},"execution_count":63,"outputs":[{"name":"stdout","text":"Loss Res: 0.000001, Loss_BC: 0.000000, Loss_IC: 0.000000\nTrain Loss: 0.000002\n","output_type":"stream"}]},{"cell_type":"code","source":"\n\n# Convert loss_track to a NumPy array for easier slicing\nloss_track = np.array(loss_track)\n\n# Extract each loss component\nresidual_loss = loss_track[:, 0]\nboundary_condition_loss = loss_track[:, 1]\ninitial_condition_loss = loss_track[:, 2]\n\n# Plot loss components\nplt.figure(figsize=(12, 6))\nplt.plot(residual_loss, label='Residual Loss', color='r')\nplt.plot(boundary_condition_loss, label='Boundary Condition Loss', color='g')\nplt.plot(initial_condition_loss, label='Initial Condition Loss', color='b')\nplt.xlabel('Iteration')\nplt.ylabel('Loss')\nplt.title('Loss Components During Optimization')\nplt.legend()\nplt.grid(True)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-07T22:32:22.341104Z","iopub.execute_input":"2024-09-07T22:32:22.341731Z","iopub.status.idle":"2024-09-07T22:32:22.670588Z","shell.execute_reply.started":"2024-09-07T22:32:22.341692Z","shell.execute_reply":"2024-09-07T22:32:22.669695Z"},"trusted":true},"execution_count":64,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x600 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"print(f\"Seed value: {seed}\")","metadata":{"execution":{"iopub.status.busy":"2024-09-07T22:16:53.528596Z","iopub.execute_input":"2024-09-07T22:16:53.529324Z","iopub.status.idle":"2024-09-07T22:16:53.533945Z","shell.execute_reply.started":"2024-09-07T22:16:53.529281Z","shell.execute_reply":"2024-09-07T22:16:53.532933Z"},"trusted":true},"execution_count":51,"outputs":[{"name":"stdout","text":"Seed value: 1\n","output_type":"stream"}]},{"cell_type":"code","source":"torch.cuda.empty_cache()\n\n# Optionally, you can track memory usage\nprint(torch.cuda.memory_summary())","metadata":{"execution":{"iopub.status.busy":"2024-09-07T22:16:55.037818Z","iopub.execute_input":"2024-09-07T22:16:55.038242Z","iopub.status.idle":"2024-09-07T22:16:55.184756Z","shell.execute_reply.started":"2024-09-07T22:16:55.038203Z","shell.execute_reply":"2024-09-07T22:16:55.183740Z"},"trusted":true},"execution_count":52,"outputs":[{"name":"stdout","text":"|===========================================================================|\n|                  PyTorch CUDA memory summary, device ID 0                 |\n|---------------------------------------------------------------------------|\n|            CUDA OOMs: 3            |        cudaMalloc retries: 3         |\n|===========================================================================|\n|        Metric         | Cur Usage  | Peak Usage | Tot Alloc  | Tot Freed  |\n|---------------------------------------------------------------------------|\n| Allocated memory      | 548763 KiB |   3845 MiB |  67783 GiB |  67782 GiB |\n|       from large pool | 534822 KiB |   3786 MiB |  66370 GiB |  66370 GiB |\n|       from small pool |  13941 KiB |     65 MiB |   1412 GiB |   1412 GiB |\n|---------------------------------------------------------------------------|\n| Active memory         | 548763 KiB |   3845 MiB |  67783 GiB |  67782 GiB |\n|       from large pool | 534822 KiB |   3786 MiB |  66370 GiB |  66370 GiB |\n|       from small pool |  13941 KiB |     65 MiB |   1412 GiB |   1412 GiB |\n|---------------------------------------------------------------------------|\n| Requested memory      | 542648 KiB |   3797 MiB |  66803 GiB |  66802 GiB |\n|       from large pool | 528895 KiB |   3738 MiB |  65393 GiB |  65393 GiB |\n|       from small pool |  13752 KiB |     65 MiB |   1409 GiB |   1409 GiB |\n|---------------------------------------------------------------------------|\n| GPU reserved memory   | 638976 KiB |   4266 MiB |  11242 MiB |  10618 MiB |\n|       from large pool | 573440 KiB |   4208 MiB |  11154 MiB |  10594 MiB |\n|       from small pool |  65536 KiB |     68 MiB |     88 MiB |     24 MiB |\n|---------------------------------------------------------------------------|\n| Non-releasable memory |  90213 KiB | 451204 KiB |  27655 GiB |  27655 GiB |\n|       from large pool |  38618 KiB | 446845 KiB |  26190 GiB |  26190 GiB |\n|       from small pool |  51595 KiB |  53924 KiB |   1465 GiB |   1465 GiB |\n|---------------------------------------------------------------------------|\n| Allocations           |     754    |    1466    |   20648 K  |   20647 K  |\n|       from large pool |     228    |     613    |    8705 K  |    8705 K  |\n|       from small pool |     526    |     857    |   11942 K  |   11942 K  |\n|---------------------------------------------------------------------------|\n| Active allocs         |     754    |    1466    |   20648 K  |   20647 K  |\n|       from large pool |     228    |     613    |    8705 K  |    8705 K  |\n|       from small pool |     526    |     857    |   11942 K  |   11942 K  |\n|---------------------------------------------------------------------------|\n| GPU reserved segments |      69    |     247    |     614    |     545    |\n|       from large pool |      37    |     214    |     570    |     533    |\n|       from small pool |      32    |      34    |      44    |      12    |\n|---------------------------------------------------------------------------|\n| Non-releasable allocs |      77    |     229    |   14250 K  |   14250 K  |\n|       from large pool |      17    |     155    |    5950 K  |    5950 K  |\n|       from small pool |      60    |     102    |    8299 K  |    8299 K  |\n|---------------------------------------------------------------------------|\n| Oversize allocations  |       0    |       0    |       0    |       0    |\n|---------------------------------------------------------------------------|\n| Oversize GPU segments |       0    |       0    |       0    |       0    |\n|===========================================================================|\n\n","output_type":"stream"}]},{"cell_type":"code","source":"# Check if CUDA (GPU) is available\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nprint(f\"Using device: {device}\")\n\n# Move the model to the same device\nmodel = model.to(device)\n\n# Generate test data\nX, y_true = gen_testdata()\n\nk = 50\n\nX = X[:k, :]\ny_true = y_true[:k]\n\n# Convert NumPy arrays to PyTorch tensors and move them to the same device as the model\nX_tensor = torch.tensor(X, dtype=torch.float32).to(device)\ny_true_tensor = torch.tensor(y_true, dtype=torch.float32).to(device)\n\n# Print device information for tensors to check they're on the same device\nprint(f\"X_tensor device: {X_tensor.device}, y_true_tensor device: {y_true_tensor.device}\")\nprint(f\"Model device: {next(model.parameters()).device}\")\n\n# Make a prediction with the model\ntry:\n    y_pred = model(X_tensor[:, 0:1], X_tensor[:, 1:2])  # Pass x and t as separate inputs\n    print(f\"y_pred device: {y_pred.device}\")  # Check prediction device\nexcept RuntimeError as e:\n    print(f\"Error during model prediction: {e}\")\n    raise e\n\n# Calculate residuals (ensure tensors are on the same device)\nresidual = torch.abs(y_true_tensor - y_pred)\n\n# Print results\nprint(\"Mean residual:\", torch.mean(residual).item())\n#print(\"L2 relative error:\", dde.metrics.l2_relative_error(y_true, y_pred.detach().cpu().numpy()))  # Convert back to NumPy\n#residual = torch.abs(y_true_tensor - y_pred)\n\n# Min-max normalization to scale the residuals between 0 and 1\nresidual_min = torch.min(residual)\nresidual_max = torch.max(residual)\nresidual_norm = (residual - residual_min) / (residual_max - residual_min)\n\n# Print or plot normalized residuals to inspect\nprint(\"Normalized Residuals (between 0 and 1):\", residual_norm)\n# Save the predictions to a file (move predictions back to CPU before saving)\nnp.savetxt(\"test.dat\", np.hstack((X, y_true, y_pred.detach().cpu().numpy())))\n","metadata":{"execution":{"iopub.status.busy":"2024-09-07T22:33:13.016027Z","iopub.execute_input":"2024-09-07T22:33:13.017214Z","iopub.status.idle":"2024-09-07T22:33:13.044565Z","shell.execute_reply.started":"2024-09-07T22:33:13.017171Z","shell.execute_reply":"2024-09-07T22:33:13.043664Z"},"trusted":true},"execution_count":66,"outputs":[{"name":"stdout","text":"Using device: cuda\nX_tensor device: cuda:0, y_true_tensor device: cuda:0\nModel device: cuda:0\ny_pred device: cuda:0\nMean residual: 0.2918034493923187\nNormalized Residuals (between 0 and 1): tensor([[0.0000],\n        [0.0218],\n        [0.0436],\n        [0.0655],\n        [0.0873],\n        [0.1090],\n        [0.1308],\n        [0.1526],\n        [0.1743],\n        [0.1960],\n        [0.2176],\n        [0.2392],\n        [0.2608],\n        [0.2824],\n        [0.3038],\n        [0.3253],\n        [0.3467],\n        [0.3680],\n        [0.3893],\n        [0.4105],\n        [0.4316],\n        [0.4527],\n        [0.4737],\n        [0.4946],\n        [0.5154],\n        [0.5361],\n        [0.5568],\n        [0.5774],\n        [0.5978],\n        [0.6182],\n        [0.6385],\n        [0.6586],\n        [0.6787],\n        [0.6986],\n        [0.7185],\n        [0.7382],\n        [0.7578],\n        [0.7772],\n        [0.7966],\n        [0.8158],\n        [0.8349],\n        [0.8538],\n        [0.8726],\n        [0.8913],\n        [0.9098],\n        [0.9281],\n        [0.9463],\n        [0.9644],\n        [0.9823],\n        [1.0000]], device='cuda:0', grad_fn=<DivBackward0>)\n","output_type":"stream"}]},{"cell_type":"code","source":"# Visualize PINNsformer\nres_test = make_time_sequence(res_test, num_step=5, step=1e-4) \nres_test = torch.tensor(res_test, dtype=torch.float32, requires_grad=True).to(device)\nx_test, t_test = res_test[:,:,0:1], res_test[:,:,1:2]\n\nwith torch.no_grad():\n    pred = model(x_test, t_test)[:,0:1]\n    pred = pred.cpu().detach().numpy()\n\npred = pred.reshape(101,101)\n\ndef h(x):\n    return np.exp( - (x-np.pi)**2 / (2 * (np.pi/4)**2))\n\ndef u_ana(x, t, alpha=1):\n    # Initialize solution array\n    u_t = np.zeros_like(x)\n\n    # Handle t = 0 (initial condition)\n    mask_t0 = (t == 0)\n    u_t[mask_t0] = np.exp(-(x[mask_t0] - np.pi)**2 / (2 * (np.pi/4)**2))  # Initial Gaussian condition\n\n    # Handle t > 0 (solution for heat equation)\n    mask_t_gt_0 = (t > 0)\n    u_t[mask_t_gt_0] = np.exp(-(x[mask_t_gt_0] - np.pi)**2 / (4 * alpha * t[mask_t_gt_0])) / np.sqrt(4 * np.pi * alpha * t[mask_t_gt_0])\n    \n    return u_t\n\n\nres_test, _, _, _, _ = get_data([0,2*np.pi], [0,1], 101, 101)\nu = u_ana(res_test[:,0], res_test[:,1]).reshape(101,101)\n\nrl1 = np.sum(np.abs(u-pred)) / np.sum(np.abs(u))\nrl2 = np.sqrt(np.sum((u-pred)**2) / np.sum(u**2))\n\nprint('relative L1 error: {:4f}'.format(rl1))\nprint('relative L2 error: {:4f}'.format(rl2))\n\nplt.figure(figsize=(4,3))\nplt.imshow(pred, extent=[0,np.pi*2,1,0], aspect='auto')\nplt.xlabel('x')\nplt.ylabel('t')\nplt.title('Predicted Temperature u(x,t)')\nplt.colorbar(label='Temperature')\nplt.tight_layout()\nplt.savefig('./1dtemperature_pinnsformer_pred.png')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-07T22:11:32.001484Z","iopub.status.idle":"2024-09-07T22:11:32.001865Z","shell.execute_reply.started":"2024-09-07T22:11:32.001687Z","shell.execute_reply":"2024-09-07T22:11:32.001706Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize=(4,3))\nplt.imshow(u, extent=[0,np.pi*2,1,0], aspect='auto')\nplt.xlabel('x')\nplt.ylabel('t')\nplt.title('Exact u(x,t)')\nplt.colorbar()\nplt.tight_layout()\nplt.savefig('./1dreaction_exact.png')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-07T22:11:32.002909Z","iopub.status.idle":"2024-09-07T22:11:32.003250Z","shell.execute_reply.started":"2024-09-07T22:11:32.003083Z","shell.execute_reply":"2024-09-07T22:11:32.003100Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize=(4,3))\nplt.imshow(np.abs(pred - u), extent=[0,np.pi*2,1,0], aspect='auto')\nplt.xlabel('x')\nplt.ylabel('t')\nplt.title('Absolute Error')\nplt.colorbar()\nplt.tight_layout()\nplt.savefig('./1dreaction_pinnsformer_error.png')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-07T22:11:32.004306Z","iopub.status.idle":"2024-09-07T22:11:32.004789Z","shell.execute_reply.started":"2024-09-07T22:11:32.004523Z","shell.execute_reply":"2024-09-07T22:11:32.004565Z"},"trusted":true},"execution_count":null,"outputs":[]}]}