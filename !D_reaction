{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "dbab1d0e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T00:18:17.808164Z",
     "iopub.status.busy": "2024-09-09T00:18:17.807252Z",
     "iopub.status.idle": "2024-09-09T00:18:21.044385Z",
     "shell.execute_reply": "2024-09-09T00:18:21.043415Z"
    },
    "papermill": {
     "duration": 3.245868,
     "end_time": "2024-09-09T00:18:21.046813",
     "exception": false,
     "start_time": "2024-09-09T00:18:17.800945",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import matplotlib.pyplot as plt\n",
    "import random\n",
    "from torch.optim import LBFGS\n",
    "from tqdm import tqdm\n",
    "\n",
    "from utility_py import *\n",
    "\n",
    "class PINNs(nn.Module):\n",
    "    def __init__(self, in_dim, hidden_dim, out_dim, num_layer):\n",
    "        super(PINNs, self).__init__()\n",
    "\n",
    "        layers = []\n",
    "        for i in range(num_layer-1):\n",
    "            if i == 0:\n",
    "                layers.append(nn.Linear(in_features=in_dim, out_features=hidden_dim))\n",
    "                layers.append(nn.Tanh())\n",
    "            else:\n",
    "                layers.append(nn.Linear(in_features=hidden_dim, out_features=hidden_dim))\n",
    "                layers.append(nn.Tanh())\n",
    "\n",
    "        layers.append(nn.Linear(in_features=hidden_dim, out_features=out_dim))\n",
    "\n",
    "        self.linear = nn.Sequential(*layers)\n",
    "\n",
    "    def forward(self, x, t):\n",
    "        src = torch.cat((x,t), dim=-1)\n",
    "        return self.linear(src)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9c590019",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T00:18:21.056989Z",
     "iopub.status.busy": "2024-09-09T00:18:21.056560Z",
     "iopub.status.idle": "2024-09-09T00:18:21.079911Z",
     "shell.execute_reply": "2024-09-09T00:18:21.079030Z"
    },
    "papermill": {
     "duration": 0.030377,
     "end_time": "2024-09-09T00:18:21.081788",
     "exception": false,
     "start_time": "2024-09-09T00:18:21.051411",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# implementation of PINNsformer\n",
    "# paper: PINNsFormer: A Transformer-Based Framework For Physics-Informed Neural Networks\n",
    "# link: https://arxiv.org/abs/2307.11833\n",
    "\n",
    "import pdb\n",
    "\n",
    "#from utility_py import get_clones\n",
    "\n",
    "class WaveAct(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(WaveAct, self).__init__() \n",
    "        self.w1 = nn.Parameter(torch.ones(1), requires_grad=True)\n",
    "        self.w2 = nn.Parameter(torch.ones(1), requires_grad=True)\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.w1 * torch.sin(x)+ self.w2 * torch.cos(x)\n",
    "\n",
    "class FeedForward(nn.Module):\n",
    "    def __init__(self, d_model, d_ff=256):\n",
    "        super(FeedForward, self).__init__() \n",
    "        self.linear = nn.Sequential(*[\n",
    "            nn.Linear(d_model, d_ff),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_ff, d_ff),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_ff, d_model)\n",
    "        ])\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.linear(x)\n",
    "\n",
    "\n",
    "class EncoderLayer(nn.Module):\n",
    "    def __init__(self, d_model, heads):\n",
    "        super(EncoderLayer, self).__init__()\n",
    "\n",
    "        self.attn = nn.MultiheadAttention(embed_dim=d_model, num_heads=heads, batch_first=True)\n",
    "        self.ff = FeedForward(d_model)\n",
    "        self.act1 = WaveAct()\n",
    "        self.act2 = WaveAct()\n",
    "        \n",
    "    def forward(self, x):\n",
    "        x2 = self.act1(x)\n",
    "        # pdb.set_trace()\n",
    "        x = x + self.attn(x2,x2,x2)[0]\n",
    "        x2 = self.act2(x)\n",
    "        x = x + self.ff(x2)\n",
    "        return x\n",
    "\n",
    "\n",
    "class DecoderLayer(nn.Module):\n",
    "    def __init__(self, d_model, heads):\n",
    "        super(DecoderLayer, self).__init__()\n",
    "\n",
    "        self.attn = nn.MultiheadAttention(embed_dim=d_model, num_heads=heads, batch_first=True)\n",
    "        self.ff = FeedForward(d_model)\n",
    "        self.act1 = WaveAct()\n",
    "        self.act2 = WaveAct()\n",
    "\n",
    "    def forward(self, x, e_outputs): \n",
    "        x2 = self.act1(x)\n",
    "        x = x + self.attn(x2, e_outputs, e_outputs)[0]\n",
    "        x2 = self.act2(x)\n",
    "        x = x + self.ff(x2)\n",
    "        return x\n",
    "\n",
    "\n",
    "class Encoder(nn.Module):\n",
    "    def __init__(self, d_model, N, heads):\n",
    "        super(Encoder, self).__init__()\n",
    "        self.N = N\n",
    "        self.layers = get_clones(EncoderLayer(d_model, heads), N)\n",
    "        self.act = WaveAct()\n",
    "\n",
    "    def forward(self, x):\n",
    "        for i in range(self.N):\n",
    "            x = self.layers[i](x)\n",
    "        return self.act(x)\n",
    "\n",
    "class Decoder(nn.Module):\n",
    "    def __init__(self, d_model, N, heads):\n",
    "        super(Decoder, self).__init__()\n",
    "        self.N = N\n",
    "        self.layers = get_clones(DecoderLayer(d_model, heads), N)\n",
    "        self.act = WaveAct()\n",
    "        \n",
    "    def forward(self, x, e_outputs):\n",
    "        for i in range(self.N):\n",
    "            x = self.layers[i](x, e_outputs)\n",
    "        return self.act(x)\n",
    "\n",
    "\n",
    "\n",
    "class PINNsformer(nn.Module):\n",
    "    def __init__(self, d_out, d_model, d_hidden, N, heads):\n",
    "        super(PINNsformer, self).__init__()\n",
    "\n",
    "        self.linear_emb = nn.Linear(2, d_model)\n",
    "\n",
    "        self.encoder = Encoder(d_model, N, heads)\n",
    "        self.decoder = Decoder(d_model, N, heads)\n",
    "        self.linear_out = nn.Sequential(*[\n",
    "            nn.Linear(d_model, d_hidden),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_hidden, d_hidden),\n",
    "            WaveAct(),\n",
    "            nn.Linear(d_hidden, d_out)\n",
    "        ])\n",
    "\n",
    "    def forward(self, x, t):\n",
    "        src = torch.cat((x,t), dim=-1)\n",
    "        src = self.linear_emb(src)\n",
    "\n",
    "        e_outputs = self.encoder(src)\n",
    "        d_output = self.decoder(src, e_outputs)\n",
    "        output = self.linear_out(d_output)\n",
    "        # pdb.set_trace()\n",
    "        # raise Exception('stop')\n",
    "        return output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "991ec07d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T00:18:21.091414Z",
     "iopub.status.busy": "2024-09-09T00:18:21.091064Z",
     "iopub.status.idle": "2024-09-09T00:18:21.095458Z",
     "shell.execute_reply": "2024-09-09T00:18:21.094537Z"
    },
    "papermill": {
     "duration": 0.011604,
     "end_time": "2024-09-09T00:18:21.097415",
     "exception": false,
     "start_time": "2024-09-09T00:18:21.085811",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "a = 0.4  # Thermal diffusivity\n",
    "L = 1  # Length of the bar\n",
    "n = 1  # Frequency of the sinusoidal initial conditions\n",
    "# device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "# model = model.to(device)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e3c96fdd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T00:18:21.106803Z",
     "iopub.status.busy": "2024-09-09T00:18:21.106501Z",
     "iopub.status.idle": "2024-09-09T00:18:21.166744Z",
     "shell.execute_reply": "2024-09-09T00:18:21.165367Z"
    },
    "papermill": {
     "duration": 0.067242,
     "end_time": "2024-09-09T00:18:21.168980",
     "exception": false,
     "start_time": "2024-09-09T00:18:21.101738",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cuda:0\n"
     ]
    }
   ],
   "source": [
    "seed = 1\n",
    "np.random.seed(seed)\n",
    "random.seed(seed)\n",
    "torch.manual_seed(seed)\n",
    "torch.cuda.manual_seed(seed)\n",
    "torch.cuda.is_available() \n",
    "\n",
    "device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\n",
    "print(device)\n",
    "step_size = 1e-4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ce13b71c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T00:18:21.179228Z",
     "iopub.status.busy": "2024-09-09T00:18:21.178877Z",
     "iopub.status.idle": "2024-09-09T00:18:21.368275Z",
     "shell.execute_reply": "2024-09-09T00:18:21.366934Z"
    },
    "papermill": {
     "duration": 0.196918,
     "end_time": "2024-09-09T00:18:21.370363",
     "exception": false,
     "start_time": "2024-09-09T00:18:21.173445",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.   0.02 0.04 ... 0.96 0.98 1.  ]\n"
     ]
    }
   ],
   "source": [
    "\n",
    "res, b_left, b_right, b_upper, b_lower = get_data([0, L], [0, 1], 51, 51)\n",
    "res_test, _, _, _, _ = get_data([0, L], [0, 1], 101, 101)\n",
    "\n",
    "# Define the initial condition for u(x, 0)\n",
    "def u_init(x):\n",
    "   \n",
    "    return np.sin(n * np.pi * x / L)\n",
    "print(res[:, 0])\n",
    "\n",
    "# Apply the initial condition to the spatial points at t=0\n",
    "init_cond = u_init(res[:, 0])  # Assuming t=0 corresponds to the first time point\n",
    "\n",
    "# Extend time sequence\n",
    "res = make_time_sequence(res, num_step=5, step=1e-4)\n",
    "b_left = make_time_sequence(b_left, num_step=5, step=1e-4)\n",
    "b_right = make_time_sequence(b_right, num_step=5, step=1e-4)\n",
    "b_upper = make_time_sequence(b_upper, num_step=5, step=1e-4)\n",
    "b_lower = make_time_sequence(b_lower, num_step=5, step=1e-4)\n",
    "\n",
    "# Convert to PyTorch tensors\n",
    "res = torch.tensor(res, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_left = torch.tensor(b_left, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_right = torch.tensor(b_right, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_upper = torch.tensor(b_upper, dtype=torch.float32, requires_grad=True).to(device)\n",
    "b_lower = torch.tensor(b_lower, dtype=torch.float32, requires_grad=True).to(device)\n",
    "\n",
    "# Initial condition as tensor\n",
    "init_cond = torch.tensor(init_cond, dtype=torch.float32).to(device)\n",
    "\n",
    "# Separate spatial (x) and temporal (t) components\n",
    "x_res, t_res = res[:, :, 0:1], res[:, :, 1:2]\n",
    "x_left, t_left = b_left[:, :, 0:1], b_left[:, :, 1:2]\n",
    "x_right, t_right = b_right[:, :, 0:1], b_right[:, :, 1:2]\n",
    "x_upper, t_upper = b_upper[:,:,0:1], b_upper[:,:,1:2]\n",
    "x_lower, t_lower = b_lower[:,:,0:1], b_lower[:,:,1:2]\n",
    "\n",
    "\n",
    "\n",
    "# Boundary conditions:\n",
    "# You will now have to impose boundary conditions as part of your training loss.\n",
    "# For example, if u(0, t) = 0 and u(L, t) = 0 (Dirichlet conditions), include them in the loss function.\n",
    "\n",
    "# Initialize model weights\n",
    "def init_weights(m):\n",
    "    if isinstance(m, nn.Linear):\n",
    "        torch.nn.init.xavier_uniform_(m.weight)\n",
    "        m.bias.data.fill_(0.01)\n",
    "\n",
    "# # Define loss function (for PINNs)\n",
    "# def loss_function(model_output, x_res, t_res, init_cond, b_left, b_right):\n",
    "#     # 1. PDE residual loss (based on the heat equation)\n",
    "#     # Compute u(x,t) from the model, then compute the PDE residual\n",
    "#     u = model_output(x_res, t_res)\n",
    "#     u_t = torch.autograd.grad(u, t_res, grad_outputs=torch.ones_like(u), create_graph=True)[0]\n",
    "#     u_xx = torch.autograd.grad(torch.autograd.grad(u, x_res, grad_outputs=torch.ones_like(u), create_graph=True)[0], x_res, grad_outputs=torch.ones_like(u), create_graph=True)[0]\n",
    "    \n",
    "#     residual_loss = torch.mean((u_t - alpha * u_xx) ** 2)\n",
    "\n",
    "#     # 2. Initial condition loss: enforce u(x, 0) = f(x)\n",
    "#     init_loss = torch.mean((u[:, 0, :] - init_cond) ** 2)  # Check the axis indexing if necessary\n",
    "\n",
    "#     # 3. Boundary conditions: enforce Dirichlet BCs (u(0,t) = u(L,t) = 0)\n",
    "#     left_bc_loss = torch.mean((u(x_left, t_left)) ** 2)\n",
    "#     right_bc_loss = torch.mean((u(x_right, t_right)) ** 2)\n",
    "\n",
    "#     # Combine the losses\n",
    "#     total_loss = residual_loss + init_loss + left_bc_loss + right_bc_loss\n",
    "#     return total_loss\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "13bc35ca",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T00:18:21.380564Z",
     "iopub.status.busy": "2024-09-09T00:18:21.380238Z",
     "iopub.status.idle": "2024-09-09T00:18:22.695509Z",
     "shell.execute_reply": "2024-09-09T00:18:22.694493Z"
    },
    "papermill": {
     "duration": 1.322693,
     "end_time": "2024-09-09T00:18:22.697791",
     "exception": false,
     "start_time": "2024-09-09T00:18:21.375098",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PINNsformer(\n",
      "  (linear_emb): Linear(in_features=2, out_features=32, bias=True)\n",
      "  (encoder): Encoder(\n",
      "    (layers): ModuleList(\n",
      "      (0): EncoderLayer(\n",
      "        (attn): MultiheadAttention(\n",
      "          (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)\n",
      "        )\n",
      "        (ff): FeedForward(\n",
      "          (linear): Sequential(\n",
      "            (0): Linear(in_features=32, out_features=256, bias=True)\n",
      "            (1): WaveAct()\n",
      "            (2): Linear(in_features=256, out_features=256, bias=True)\n",
      "            (3): WaveAct()\n",
      "            (4): Linear(in_features=256, out_features=32, bias=True)\n",
      "          )\n",
      "        )\n",
      "        (act1): WaveAct()\n",
      "        (act2): WaveAct()\n",
      "      )\n",
      "    )\n",
      "    (act): WaveAct()\n",
      "  )\n",
      "  (decoder): Decoder(\n",
      "    (layers): ModuleList(\n",
      "      (0): DecoderLayer(\n",
      "        (attn): MultiheadAttention(\n",
      "          (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)\n",
      "        )\n",
      "        (ff): FeedForward(\n",
      "          (linear): Sequential(\n",
      "            (0): Linear(in_features=32, out_features=256, bias=True)\n",
      "            (1): WaveAct()\n",
      "            (2): Linear(in_features=256, out_features=256, bias=True)\n",
      "            (3): WaveAct()\n",
      "            (4): Linear(in_features=256, out_features=32, bias=True)\n",
      "          )\n",
      "        )\n",
      "        (act1): WaveAct()\n",
      "        (act2): WaveAct()\n",
      "      )\n",
      "    )\n",
      "    (act): WaveAct()\n",
      "  )\n",
      "  (linear_out): Sequential(\n",
      "    (0): Linear(in_features=32, out_features=512, bias=True)\n",
      "    (1): WaveAct()\n",
      "    (2): Linear(in_features=512, out_features=512, bias=True)\n",
      "    (3): WaveAct()\n",
      "    (4): Linear(in_features=512, out_features=1, bias=True)\n",
      "  )\n",
      ")\n",
      "453561\n"
     ]
    }
   ],
   "source": [
    "model = PINNsformer(d_out=1, d_hidden=512, d_model=32, N=1, heads=2).to(device)\n",
    "import torch.optim as optimer\n",
    "model.apply(init_weights)\n",
    "optim = LBFGS(model.parameters(), line_search_fn='strong_wolfe')\n",
    "#optim = optimer.Adam(model.parameters(), lr=1e-4)\n",
    "\n",
    "print(model)\n",
    "print(get_n_params(model))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "0fef5b35",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T00:18:22.708368Z",
     "iopub.status.busy": "2024-09-09T00:18:22.707985Z",
     "iopub.status.idle": "2024-09-09T00:33:33.135127Z",
     "shell.execute_reply": "2024-09-09T00:33:33.134106Z"
    },
    "papermill": {
     "duration": 910.434586,
     "end_time": "2024-09-09T00:33:33.137153",
     "exception": false,
     "start_time": "2024-09-09T00:18:22.702567",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  0%|          | 0/600 [00:00<?, ?it/s]/opt/conda/lib/python3.10/site-packages/torch/autograd/graph.py:768: UserWarning: Attempting to run cuBLAS, but there was no current CUDA context! Attempting to set the primary context... (Triggered internally at /usr/local/src/pytorch/aten/src/ATen/cuda/CublasHandlePool.cpp:135.)\n",
      "  return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass\n",
      " 16%|█▋        | 99/600 [06:12<30:23,  3.64s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "progress\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 33%|███▎      | 199/600 [08:54<06:16,  1.06it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "progress\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 50%|████▉     | 299/600 [10:28<04:43,  1.06it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "progress\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 66%|██████▋   | 399/600 [12:01<03:09,  1.06it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "progress\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 83%|████████▎ | 499/600 [13:35<01:34,  1.07it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "progress\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|█████████▉| 599/600 [15:09<00:00,  1.07it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "progress\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 600/600 [15:10<00:00,  1.52s/it]\n"
     ]
    }
   ],
   "source": [
    "#print(x_res)\n",
    "def check_nan(tensor, name):\n",
    "    if torch.isnan(tensor).any():\n",
    "        print(f\"NaNs detected in {name}\")\n",
    "loss_track = []\n",
    "a = 0.4  # Thermal diffusivity\n",
    "L = 1  # Length of the bar\n",
    "n = 1  # Frequency of the sinusoidal initial conditions\n",
    "k= 0 \n",
    "for i in tqdm(range(600)):\n",
    "    k+=1\n",
    "    if k == 100:\n",
    "            print(\"progress\")\n",
    "            k=0\n",
    "    def closure():\n",
    "        \n",
    "        pred_res = model(x_res, t_res)\n",
    "        pred_left = model(x_left, t_left)\n",
    "        pred_right = model(x_right, t_right)\n",
    "        #print(pred_res)\n",
    "        pred_upper = model(x_upper, t_upper)\n",
    "        pred_lower = model(x_lower, t_lower)\n",
    "        pred_res_t0 = pred_res[:, 0, :]\n",
    "        \n",
    "        #pred_upper = model(x_upper, t_upper)\n",
    "        #\n",
    "        #pred_lower = model(x_lower, t_lower)\n",
    "\n",
    "#         u_x = torch.autograd.grad(pred_res, x_res, grad_outputs=torch.ones_like(pred_res), retain_graph=True, create_graph=True)[0]\n",
    "#         u_t = torch.autograd.grad(pred_res, t_res, grad_outputs=torch.ones_like(pred_res), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "#         loss_res = torch.mean((u_t - 5 * pred_res * (1-pred_res)) ** 2)\n",
    "\n",
    "        u_x = torch.autograd.grad(pred_res, x_res, grad_outputs=torch.ones_like(pred_res), retain_graph=True, create_graph=True)[0]\n",
    "        u_xx = torch.autograd.grad(u_x, x_res, grad_outputs=torch.ones_like(u_x), retain_graph=True, create_graph=True)[0]\n",
    "        u_t = torch.autograd.grad(pred_res, t_res, grad_outputs=torch.ones_like(pred_res), retain_graph=True, create_graph=True)[0]\n",
    "\n",
    "        \n",
    "        check_nan(u_x, 'u_x')\n",
    "        check_nan(u_xx, 'u_xx')\n",
    "        check_nan(u_t, 'u_t')\n",
    "        # Heat equation: ∂u/∂t = alpha * ∂²u/∂x²\n",
    "        alpha =a   # thermal diffusivity (can be modified)\n",
    "        loss_res =torch.mean((u_t - alpha * u_xx)**2 )\n",
    "        \n",
    "        initial_pred = pred_res[:, 0]  # This should be the predicted u(x, t=0)\n",
    "\n",
    "        # Correct expression for the initial condition\n",
    "        initial_condition = torch.sin(n * torch.pi * x_res[:, 0] / L)\n",
    "\n",
    "        # Loss for initial condition\n",
    "        loss_ic = torch.mean((initial_pred - initial_condition) ** 2) # Check the axis indexing if necessary\n",
    "        #loss_ic = torch.mean((pred_left[:,0] - torch.exp(- (x_left[:,0] - torch.pi)**2 / (2*(torch.pi/4)**2))) ** 2)\n",
    "        \n",
    "        \n",
    "        # 3. Boundary conditions: enforce Dirichlet BCs (u(0,t) = u(L,t) = 0)\n",
    "        left_bc_loss = torch.mean(pred_left ** 2)\n",
    "        right_bc_loss = torch.mean(pred_right ** 2)\n",
    "        loss_bc =  torch.mean((pred_right-pred_left) ** 2 )\n",
    "\n",
    "        #print(loss_res)\n",
    "        loss_track.append([loss_res.item(), loss_ic.item(), loss_bc.item()])\n",
    "\n",
    "        loss = loss_res + loss_ic + loss_bc + left_bc_loss +right_bc_loss\n",
    "        optim.zero_grad()\n",
    "        loss.backward()\n",
    "        return loss\n",
    "\n",
    "    optim.step(closure)\n",
    "    #print(loss_track)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "81dbae48",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T00:33:33.242467Z",
     "iopub.status.busy": "2024-09-09T00:33:33.241741Z",
     "iopub.status.idle": "2024-09-09T00:33:33.247322Z",
     "shell.execute_reply": "2024-09-09T00:33:33.246393Z"
    },
    "papermill": {
     "duration": 0.059815,
     "end_time": "2024-09-09T00:33:33.249265",
     "exception": false,
     "start_time": "2024-09-09T00:33:33.189450",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Length of loss_track: 5665\n"
     ]
    }
   ],
   "source": [
    "print(f\"Length of loss_track: {len(loss_track)}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "9fa51e38",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T00:33:33.351909Z",
     "iopub.status.busy": "2024-09-09T00:33:33.351461Z",
     "iopub.status.idle": "2024-09-09T00:33:33.368728Z",
     "shell.execute_reply": "2024-09-09T00:33:33.367794Z"
    },
    "papermill": {
     "duration": 0.07071,
     "end_time": "2024-09-09T00:33:33.370765",
     "exception": false,
     "start_time": "2024-09-09T00:33:33.300055",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss Res: 0.002810, Loss_IC: 0.177882, loss_bc: 0.000453\n",
      "Train Loss: 0.181145\n"
     ]
    }
   ],
   "source": [
    "print('Loss Res: {:4f}, Loss_IC: {:4f}, loss_bc: {:4f}'.format(loss_track[-1][0], loss_track[-1][1], loss_track[-1][2]))\n",
    "print('Train Loss: {:4f}'.format(np.sum(loss_track[-1])))\n",
    "\n",
    "torch.save(model.state_dict(), './1dreaction_pinnsformer.pt')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "ffbca28f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T00:33:33.473355Z",
     "iopub.status.busy": "2024-09-09T00:33:33.472982Z",
     "iopub.status.idle": "2024-09-09T00:33:33.844564Z",
     "shell.execute_reply": "2024-09-09T00:33:33.843675Z"
    },
    "papermill": {
     "duration": 0.425454,
     "end_time": "2024-09-09T00:33:33.847012",
     "exception": false,
     "start_time": "2024-09-09T00:33:33.421558",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "# Convert loss_track to a NumPy array for easier slicing\n",
    "loss_track = np.array(loss_track)\n",
    "\n",
    "# Extract each loss component\n",
    "residual_loss = loss_track[:, 0]\n",
    "boundary_condition_loss = loss_track[:, 2]\n",
    "initial_condition_loss = loss_track[:, 1]\n",
    "\n",
    "# Plot loss components\n",
    "plt.figure(figsize=(12, 6))\n",
    "plt.plot(residual_loss, label='Residual Loss', color='r')\n",
    "plt.plot(boundary_condition_loss, label='Boundary Condition Loss', color='g')\n",
    "plt.plot(initial_condition_loss, label='Initial Condition Loss', color='b')\n",
    "plt.xlabel('Iteration')\n",
    "plt.ylabel('Loss')\n",
    "plt.title('Loss Components During Optimization')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "1dab018b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T00:33:33.970470Z",
     "iopub.status.busy": "2024-09-09T00:33:33.970086Z",
     "iopub.status.idle": "2024-09-09T00:33:35.213423Z",
     "shell.execute_reply": "2024-09-09T00:33:35.212317Z"
    },
    "papermill": {
     "duration": 1.314171,
     "end_time": "2024-09-09T00:33:35.216391",
     "exception": false,
     "start_time": "2024-09-09T00:33:33.902220",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Relative L1 error: 2.581830\n",
      "Relative L2 error: 1.766070\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Check if CUDA (GPU) is available\n",
    "# Visualization for 1D heat equation\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Generate the test data with the correct dimensions for the heat equation\n",
    "res_test = make_time_sequence(res_test, num_step=5, step=1e-4) \n",
    "res_test = torch.tensor(res_test, dtype=torch.float32, requires_grad=True).to(device)\n",
    "x_test, t_test = res_test[:,:,0:1], res_test[:,:,1:2]\n",
    "\n",
    "# Predict using the model\n",
    "with torch.no_grad():\n",
    "    pred = model(x_test, t_test)[:, 0:1]\n",
    "    pred = pred.cpu().detach().numpy()\n",
    "\n",
    "# Reshape the prediction to fit 101x101 grid (space and time)\n",
    "pred = pred.reshape(101, 101)\n",
    "\n",
    "# Define analytical solution for the 1D heat equation\n",
    "# For the example: u(x, t) = e^(-n^2 * pi^2 * alpha * t) * sin(n * pi * x / L)\n",
    "def u_ana(x, t, alpha=0.4, L=1, n=1):\n",
    "    return np.exp(-(n**2 * np.pi**2 * alpha * t) / (L**2)) * np.sin(n * np.pi * x / L)\n",
    "    #return np.exp(-n**2 * np.pi**2 * alpha * t) * np.sin(n * np.pi * x / L)\n",
    "\n",
    "# Get the test data again for analytical solution comparison\n",
    "res_test, _, _, _, _ = get_data([0, L], [0, 1], 101, 101)\n",
    "\n",
    "# Compute the analytical solution for the heat equation\n",
    "u = u_ana(res_test[:,0], res_test[:,1]).reshape(101, 101)\n",
    "\n",
    "# Compute relative errors (L1 and L2)\n",
    "rl1 = np.sum(np.abs(u - pred)) / np.sum(np.abs(u))\n",
    "rl2 = np.sqrt(np.sum((u - pred) ** 2) / np.sum(u ** 2))\n",
    "\n",
    "print('Relative L1 error: {:4f}'.format(rl1))\n",
    "print('Relative L2 error: {:4f}'.format(rl2))\n",
    "\n",
    "# Visualization of the predicted solution u(x,t)\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(pred, extent=[0, L, 1, 0], aspect='auto')\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('t')\n",
    "plt.title('Predicted u(x,t) - 1D Heat Equation')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./1dheat_pinnsformer_pred.png')\n",
    "plt.show()\n",
    "\n",
    "# Visualization of the analytical solution u_ana(x,t)\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.imshow(u, extent=[0, L, 1, 0], aspect='auto')\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('t')\n",
    "plt.title('Analytical u(x,t) - 1D Heat Equation')\n",
    "plt.colorbar()\n",
    "plt.tight_layout()\n",
    "plt.savefig('./1dheat_analytical.png')\n",
    "plt.show()\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "sourceId": 194069625,
     "sourceType": "kernelVersion"
    }
   ],
   "dockerImageVersionId": 30762,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 921.476766,
   "end_time": "2024-09-09T00:33:36.493259",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-09-09T00:18:15.016493",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
