{"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":194069625,"sourceType":"kernelVersion"}],"dockerImageVersionId":30762,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np\nimport torch\nimport torch.nn as nn\nimport matplotlib.pyplot as plt\nimport random\nfrom torch.optim import LBFGS\nfrom tqdm import tqdm\n\nfrom utility_py import *\n\nclass PINNs(nn.Module):\n    def __init__(self, in_dim, hidden_dim, out_dim, num_layer):\n        super(PINNs, self).__init__()\n\n        layers = []\n        for i in range(num_layer-1):\n            if i == 0:\n                layers.append(nn.Linear(in_features=in_dim, out_features=hidden_dim))\n                layers.append(nn.Tanh())\n            else:\n                layers.append(nn.Linear(in_features=hidden_dim, out_features=hidden_dim))\n                layers.append(nn.Tanh())\n\n        layers.append(nn.Linear(in_features=hidden_dim, out_features=out_dim))\n\n        self.linear = nn.Sequential(*layers)\n\n    def forward(self, x, t):\n        src = torch.cat((x,t), dim=-1)\n        return self.linear(src)\n\n","metadata":{"execution":{"iopub.status.busy":"2024-09-06T22:13:10.741816Z","iopub.execute_input":"2024-09-06T22:13:10.742096Z","iopub.status.idle":"2024-09-06T22:13:14.190824Z","shell.execute_reply.started":"2024-09-06T22:13:10.742063Z","shell.execute_reply":"2024-09-06T22:13:14.189910Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"# implementation of PINNsformer\n# paper: PINNsFormer: A Transformer-Based Framework For Physics-Informed Neural Networks\n# link: https://arxiv.org/abs/2307.11833\n\nimport pdb\n\n#from utility_py import get_clones\n\nclass WaveAct(nn.Module):\n    def __init__(self):\n        super(WaveAct, self).__init__() \n        self.w1 = nn.Parameter(torch.ones(1), requires_grad=True)\n        self.w2 = nn.Parameter(torch.ones(1), requires_grad=True)\n\n    def forward(self, x):\n        return self.w1 * torch.sin(x)+ self.w2 * torch.cos(x)\n\nclass FeedForward(nn.Module):\n    def __init__(self, d_model, d_ff=256):\n        super(FeedForward, self).__init__() \n        self.linear = nn.Sequential(*[\n            nn.Linear(d_model, d_ff),\n            WaveAct(),\n            nn.Linear(d_ff, d_ff),\n            WaveAct(),\n            nn.Linear(d_ff, d_model)\n        ])\n\n    def forward(self, x):\n        return self.linear(x)\n\n\nclass EncoderLayer(nn.Module):\n    def __init__(self, d_model, heads):\n        super(EncoderLayer, self).__init__()\n\n        self.attn = nn.MultiheadAttention(embed_dim=d_model, num_heads=heads, batch_first=True)\n        self.ff = FeedForward(d_model)\n        self.act1 = WaveAct()\n        self.act2 = WaveAct()\n        \n    def forward(self, x):\n        x2 = self.act1(x)\n        # pdb.set_trace()\n        x = x + self.attn(x2,x2,x2)[0]\n        x2 = self.act2(x)\n        x = x + self.ff(x2)\n        return x\n\n\nclass DecoderLayer(nn.Module):\n    def __init__(self, d_model, heads):\n        super(DecoderLayer, self).__init__()\n\n        self.attn = nn.MultiheadAttention(embed_dim=d_model, num_heads=heads, batch_first=True)\n        self.ff = FeedForward(d_model)\n        self.act1 = WaveAct()\n        self.act2 = WaveAct()\n\n    def forward(self, x, e_outputs): \n        x2 = self.act1(x)\n        x = x + self.attn(x2, e_outputs, e_outputs)[0]\n        x2 = self.act2(x)\n        x = x + self.ff(x2)\n        return x\n\n\nclass Encoder(nn.Module):\n    def __init__(self, d_model, N, heads):\n        super(Encoder, self).__init__()\n        self.N = N\n        self.layers = get_clones(EncoderLayer(d_model, heads), N)\n        self.act = WaveAct()\n\n    def forward(self, x):\n        for i in range(self.N):\n            x = self.layers[i](x)\n        return self.act(x)\n\nclass Decoder(nn.Module):\n    def __init__(self, d_model, N, heads):\n        super(Decoder, self).__init__()\n        self.N = N\n        self.layers = get_clones(DecoderLayer(d_model, heads), N)\n        self.act = WaveAct()\n        \n    def forward(self, x, e_outputs):\n        for i in range(self.N):\n            x = self.layers[i](x, e_outputs)\n        return self.act(x)\n\n\n\nclass PINNsformer(nn.Module):\n    def __init__(self, d_out, d_model, d_hidden, N, heads):\n        super(PINNsformer, self).__init__()\n\n        self.linear_emb = nn.Linear(2, d_model)\n\n        self.encoder = Encoder(d_model, N, heads)\n        self.decoder = Decoder(d_model, N, heads)\n        self.linear_out = nn.Sequential(*[\n            nn.Linear(d_model, d_hidden),\n            WaveAct(),\n            nn.Linear(d_hidden, d_hidden),\n            WaveAct(),\n            nn.Linear(d_hidden, d_out)\n        ])\n\n    def forward(self, x, t):\n        src = torch.cat((x,t), dim=-1)\n        src = self.linear_emb(src)\n\n        e_outputs = self.encoder(src)\n        d_output = self.decoder(src, e_outputs)\n        output = self.linear_out(d_output)\n        # pdb.set_trace()\n        # raise Exception('stop')\n        return output","metadata":{"execution":{"iopub.status.busy":"2024-09-06T22:13:14.195894Z","iopub.execute_input":"2024-09-06T22:13:14.198186Z","iopub.status.idle":"2024-09-06T22:13:14.231272Z","shell.execute_reply.started":"2024-09-06T22:13:14.198125Z","shell.execute_reply":"2024-09-06T22:13:14.230485Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"seed = 1\nnp.random.seed(seed)\nrandom.seed(seed)\ntorch.manual_seed(seed)\ntorch.cuda.manual_seed(seed)\ntorch.cuda.is_available() \n\ndevice = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\nprint(device)\nstep_size = 1e-4","metadata":{"execution":{"iopub.status.busy":"2024-09-06T22:13:14.235057Z","iopub.execute_input":"2024-09-06T22:13:14.237576Z","iopub.status.idle":"2024-09-06T22:13:14.274627Z","shell.execute_reply.started":"2024-09-06T22:13:14.237534Z","shell.execute_reply":"2024-09-06T22:13:14.273790Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"cuda:0\n","output_type":"stream"}]},{"cell_type":"code","source":"# Train PINNsformer\nres, b_left, b_right, b_upper, b_lower = get_data([0,2*np.pi], [0,1], 51, 51)\nres_test, _, _, _, _ = get_data([0,2*np.pi], [0,1], 101, 101)\n\nres = make_time_sequence(res, num_step=5, step=1e-4)\nb_left = make_time_sequence(b_left, num_step=5, step=1e-4)\nb_right = make_time_sequence(b_right, num_step=5, step=1e-4)\nb_upper = make_time_sequence(b_upper, num_step=5, step=1e-4)\nb_lower = make_time_sequence(b_lower, num_step=5, step=1e-4)\n\nres = torch.tensor(res, dtype=torch.float32, requires_grad=True).to(device)\nb_left = torch.tensor(b_left, dtype=torch.float32, requires_grad=True).to(device)\nb_right = torch.tensor(b_right, dtype=torch.float32, requires_grad=True).to(device)\nb_upper = torch.tensor(b_upper, dtype=torch.float32, requires_grad=True).to(device)\nb_lower = torch.tensor(b_lower, dtype=torch.float32, requires_grad=True).to(device)\n\nx_res, t_res = res[:,:,0:1], res[:,:,1:2]\nx_left, t_left = b_left[:,:,0:1], b_left[:,:,1:2]\nx_right, t_right = b_right[:,:,0:1], b_right[:,:,1:2]\nx_upper, t_upper = b_upper[:,:,0:1], b_upper[:,:,1:2]\nx_lower, t_lower = b_lower[:,:,0:1], b_lower[:,:,1:2]\n\ndef init_weights(m):\n    if isinstance(m, nn.Linear):\n        torch.nn.init.xavier_uniform(m.weight)\n        m.bias.data.fill_(0.01)","metadata":{"execution":{"iopub.status.busy":"2024-09-06T22:13:14.275795Z","iopub.execute_input":"2024-09-06T22:13:14.276183Z","iopub.status.idle":"2024-09-06T22:13:14.478463Z","shell.execute_reply.started":"2024-09-06T22:13:14.276122Z","shell.execute_reply":"2024-09-06T22:13:14.477605Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"model = PINNsformer(d_out=1, d_hidden=512, d_model=32, N=1, heads=2).to(device)\nimport torch.optim as optimer\nmodel.apply(init_weights)\noptim = LBFGS(model.parameters(), line_search_fn='strong_wolfe')\n#optim = optimer.Adam(model.parameters(), lr=1e-4)\n\nprint(model)\nprint(get_n_params(model))","metadata":{"execution":{"iopub.status.busy":"2024-09-06T22:13:14.481606Z","iopub.execute_input":"2024-09-06T22:13:14.482666Z","iopub.status.idle":"2024-09-06T22:13:15.775325Z","shell.execute_reply.started":"2024-09-06T22:13:14.482620Z","shell.execute_reply":"2024-09-06T22:13:15.774323Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_36/1725142899.py:25: FutureWarning: `nn.init.xavier_uniform` is now deprecated in favor of `nn.init.xavier_uniform_`.\n  torch.nn.init.xavier_uniform(m.weight)\n","output_type":"stream"},{"name":"stdout","text":"PINNsformer(\n  (linear_emb): Linear(in_features=2, out_features=32, bias=True)\n  (encoder): Encoder(\n    (layers): ModuleList(\n      (0): EncoderLayer(\n        (attn): MultiheadAttention(\n          (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)\n        )\n        (ff): FeedForward(\n          (linear): Sequential(\n            (0): Linear(in_features=32, out_features=256, bias=True)\n            (1): WaveAct()\n            (2): Linear(in_features=256, out_features=256, bias=True)\n            (3): WaveAct()\n            (4): Linear(in_features=256, out_features=32, bias=True)\n          )\n        )\n        (act1): WaveAct()\n        (act2): WaveAct()\n      )\n    )\n    (act): WaveAct()\n  )\n  (decoder): Decoder(\n    (layers): ModuleList(\n      (0): DecoderLayer(\n        (attn): MultiheadAttention(\n          (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)\n        )\n        (ff): FeedForward(\n          (linear): Sequential(\n            (0): Linear(in_features=32, out_features=256, bias=True)\n            (1): WaveAct()\n            (2): Linear(in_features=256, out_features=256, bias=True)\n            (3): WaveAct()\n            (4): Linear(in_features=256, out_features=32, bias=True)\n          )\n        )\n        (act1): WaveAct()\n        (act2): WaveAct()\n      )\n    )\n    (act): WaveAct()\n  )\n  (linear_out): Sequential(\n    (0): Linear(in_features=32, out_features=512, bias=True)\n    (1): WaveAct()\n    (2): Linear(in_features=512, out_features=512, bias=True)\n    (3): WaveAct()\n    (4): Linear(in_features=512, out_features=1, bias=True)\n  )\n)\n453561\n","output_type":"stream"}]},{"cell_type":"code","source":"loss_track = []\n\nfor i in tqdm(range(500)):\n    def closure():\n        pred_res = model(x_res, t_res)\n        pred_left = model(x_left, t_left)\n        pred_right = model(x_right, t_right)\n        pred_upper = model(x_upper, t_upper)\n        pred_lower = model(x_lower, t_lower)\n\n#         u_x = torch.autograd.grad(pred_res, x_res, grad_outputs=torch.ones_like(pred_res), retain_graph=True, create_graph=True)[0]\n#         u_t = torch.autograd.grad(pred_res, t_res, grad_outputs=torch.ones_like(pred_res), retain_graph=True, create_graph=True)[0]\n\n#         loss_res = torch.mean((u_t - 5 * pred_res * (1-pred_res)) ** 2)\n\n        u_x = torch.autograd.grad(pred_res, x_res, grad_outputs=torch.ones_like(pred_res), retain_graph=True, create_graph=True)[0]\n        u_xx = torch.autograd.grad(u_x, x_res, grad_outputs=torch.ones_like(u_x), retain_graph=True, create_graph=True)[0]\n        u_t = torch.autograd.grad(pred_res, t_res, grad_outputs=torch.ones_like(pred_res), retain_graph=True, create_graph=True)[0]\n\n        # Heat equation: ∂u/∂t = alpha * ∂²u/∂x²\n        alpha = 1.0  # thermal diffusivity (can be modified)\n        loss_res = torch.mean((u_t - alpha * u_xx) ** 2)\n\n        loss_ic = torch.mean((pred_left[:,0] - torch.exp(- (x_left[:,0] - torch.pi)**2 / (2*(torch.pi/4)**2))) ** 2)\n        loss_bc = torch.mean((pred_upper - pred_lower) ** 2)\n        #loss_ic = torch.mean((pred_left[:,0] - torch.exp(- (x_left[:,0] - torch.pi)**2 / (2*(torch.pi/4)**2))) ** 2)\n\n        loss_track.append([loss_res.item(), loss_bc.item(), loss_ic.item()])\n\n        loss = loss_res + loss_bc + loss_ic\n        optim.zero_grad()\n        loss.backward()\n        return loss\n\n    optim.step(closure)","metadata":{"execution":{"iopub.status.busy":"2024-09-06T22:29:41.264242Z","iopub.execute_input":"2024-09-06T22:29:41.264595Z","iopub.status.idle":"2024-09-06T22:29:53.683077Z","shell.execute_reply.started":"2024-09-06T22:29:41.264562Z","shell.execute_reply":"2024-09-06T22:29:53.681659Z"},"trusted":true},"execution_count":13,"outputs":[{"name":"stderr","text":"  0%|          | 2/500 [00:12<50:07,  6.04s/it]\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","Cell \u001b[0;32mIn[13], line 35\u001b[0m\n\u001b[1;32m     32\u001b[0m     loss\u001b[38;5;241m.\u001b[39mbackward()\n\u001b[1;32m     33\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m loss\n\u001b[0;32m---> 35\u001b[0m \u001b[43moptim\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mstep\u001b[49m\u001b[43m(\u001b[49m\u001b[43mclosure\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch/optim/optimizer.py:484\u001b[0m, in \u001b[0;36mOptimizer.profile_hook_step.<locals>.wrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    479\u001b[0m         \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m    480\u001b[0m             \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mRuntimeError\u001b[39;00m(\n\u001b[1;32m    481\u001b[0m                 \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mfunc\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m must return None or a tuple of (new_args, new_kwargs), but got \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mresult\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    482\u001b[0m             )\n\u001b[0;32m--> 484\u001b[0m out \u001b[38;5;241m=\u001b[39m \u001b[43mfunc\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    485\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_optimizer_step_code()\n\u001b[1;32m    487\u001b[0m \u001b[38;5;66;03m# call optimizer step post hooks\u001b[39;00m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch/utils/_contextlib.py:116\u001b[0m, in \u001b[0;36mcontext_decorator.<locals>.decorate_context\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    113\u001b[0m \u001b[38;5;129m@functools\u001b[39m\u001b[38;5;241m.\u001b[39mwraps(func)\n\u001b[1;32m    114\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mdecorate_context\u001b[39m(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[1;32m    115\u001b[0m     \u001b[38;5;28;01mwith\u001b[39;00m ctx_factory():\n\u001b[0;32m--> 116\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mfunc\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch/optim/lbfgs.py:437\u001b[0m, in \u001b[0;36mLBFGS.step\u001b[0;34m(self, closure)\u001b[0m\n\u001b[1;32m    434\u001b[0m     \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mobj_func\u001b[39m(x, t, d):\n\u001b[1;32m    435\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_directional_evaluate(closure, x, t, d)\n\u001b[0;32m--> 437\u001b[0m     loss, flat_grad, t, ls_func_evals \u001b[38;5;241m=\u001b[39m \u001b[43m_strong_wolfe\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    438\u001b[0m \u001b[43m        \u001b[49m\u001b[43mobj_func\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mx_init\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mt\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43md\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mloss\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mflat_grad\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mgtd\u001b[49m\n\u001b[1;32m    439\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    440\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_add_grad(t, d)\n\u001b[1;32m    441\u001b[0m opt_cond \u001b[38;5;241m=\u001b[39m flat_grad\u001b[38;5;241m.\u001b[39mabs()\u001b[38;5;241m.\u001b[39mmax() \u001b[38;5;241m<\u001b[39m\u001b[38;5;241m=\u001b[39m tolerance_grad\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch/optim/lbfgs.py:45\u001b[0m, in \u001b[0;36m_strong_wolfe\u001b[0;34m(obj_func, x, t, d, f, g, gtd, c1, c2, tolerance_change, max_ls)\u001b[0m\n\u001b[1;32m     43\u001b[0m g \u001b[38;5;241m=\u001b[39m g\u001b[38;5;241m.\u001b[39mclone(memory_format\u001b[38;5;241m=\u001b[39mtorch\u001b[38;5;241m.\u001b[39mcontiguous_format)\n\u001b[1;32m     44\u001b[0m \u001b[38;5;66;03m# evaluate objective and gradient using initial step\u001b[39;00m\n\u001b[0;32m---> 45\u001b[0m f_new, g_new \u001b[38;5;241m=\u001b[39m \u001b[43mobj_func\u001b[49m\u001b[43m(\u001b[49m\u001b[43mx\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mt\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43md\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     46\u001b[0m ls_func_evals \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m1\u001b[39m\n\u001b[1;32m     47\u001b[0m gtd_new \u001b[38;5;241m=\u001b[39m g_new\u001b[38;5;241m.\u001b[39mdot(d)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch/optim/lbfgs.py:435\u001b[0m, in \u001b[0;36mLBFGS.step.<locals>.obj_func\u001b[0;34m(x, t, d)\u001b[0m\n\u001b[1;32m    434\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mobj_func\u001b[39m(x, t, d):\n\u001b[0;32m--> 435\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_directional_evaluate\u001b[49m\u001b[43m(\u001b[49m\u001b[43mclosure\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mx\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mt\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43md\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch/optim/lbfgs.py:289\u001b[0m, in \u001b[0;36mLBFGS._directional_evaluate\u001b[0;34m(self, closure, x, t, d)\u001b[0m\n\u001b[1;32m    287\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_directional_evaluate\u001b[39m(\u001b[38;5;28mself\u001b[39m, closure, x, t, d):\n\u001b[1;32m    288\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_add_grad(t, d)\n\u001b[0;32m--> 289\u001b[0m     loss \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mfloat\u001b[39m(\u001b[43mclosure\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m)\n\u001b[1;32m    290\u001b[0m     flat_grad \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_gather_flat_grad()\n\u001b[1;32m    291\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_set_param(x)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch/utils/_contextlib.py:116\u001b[0m, in \u001b[0;36mcontext_decorator.<locals>.decorate_context\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    113\u001b[0m \u001b[38;5;129m@functools\u001b[39m\u001b[38;5;241m.\u001b[39mwraps(func)\n\u001b[1;32m    114\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mdecorate_context\u001b[39m(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[1;32m    115\u001b[0m     \u001b[38;5;28;01mwith\u001b[39;00m ctx_factory():\n\u001b[0;32m--> 116\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mfunc\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n","Cell \u001b[0;32mIn[13], line 16\u001b[0m, in \u001b[0;36mclosure\u001b[0;34m()\u001b[0m\n\u001b[1;32m      9\u001b[0m         pred_lower \u001b[38;5;241m=\u001b[39m model(x_lower, t_lower)\n\u001b[1;32m     11\u001b[0m \u001b[38;5;66;03m#         u_x = torch.autograd.grad(pred_res, x_res, grad_outputs=torch.ones_like(pred_res), retain_graph=True, create_graph=True)[0]\u001b[39;00m\n\u001b[1;32m     12\u001b[0m \u001b[38;5;66;03m#         u_t = torch.autograd.grad(pred_res, t_res, grad_outputs=torch.ones_like(pred_res), retain_graph=True, create_graph=True)[0]\u001b[39;00m\n\u001b[1;32m     13\u001b[0m \n\u001b[1;32m     14\u001b[0m \u001b[38;5;66;03m#         loss_res = torch.mean((u_t - 5 * pred_res * (1-pred_res)) ** 2)\u001b[39;00m\n\u001b[0;32m---> 16\u001b[0m         u_x \u001b[38;5;241m=\u001b[39m \u001b[43mtorch\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mautograd\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mgrad\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpred_res\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mx_res\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mgrad_outputs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mtorch\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mones_like\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpred_res\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mretain_graph\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcreate_graph\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m)\u001b[49m[\u001b[38;5;241m0\u001b[39m]\n\u001b[1;32m     17\u001b[0m         u_xx \u001b[38;5;241m=\u001b[39m torch\u001b[38;5;241m.\u001b[39mautograd\u001b[38;5;241m.\u001b[39mgrad(u_x, x_res, grad_outputs\u001b[38;5;241m=\u001b[39mtorch\u001b[38;5;241m.\u001b[39mones_like(u_x), retain_graph\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m, create_graph\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)[\u001b[38;5;241m0\u001b[39m]\n\u001b[1;32m     18\u001b[0m         u_t \u001b[38;5;241m=\u001b[39m torch\u001b[38;5;241m.\u001b[39mautograd\u001b[38;5;241m.\u001b[39mgrad(pred_res, t_res, grad_outputs\u001b[38;5;241m=\u001b[39mtorch\u001b[38;5;241m.\u001b[39mones_like(pred_res), retain_graph\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m, create_graph\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)[\u001b[38;5;241m0\u001b[39m]\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch/autograd/__init__.py:436\u001b[0m, in \u001b[0;36mgrad\u001b[0;34m(outputs, inputs, grad_outputs, retain_graph, create_graph, only_inputs, allow_unused, is_grads_batched, materialize_grads)\u001b[0m\n\u001b[1;32m    432\u001b[0m     result \u001b[38;5;241m=\u001b[39m _vmap_internals\u001b[38;5;241m.\u001b[39m_vmap(vjp, \u001b[38;5;241m0\u001b[39m, \u001b[38;5;241m0\u001b[39m, allow_none_pass_through\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)(\n\u001b[1;32m    433\u001b[0m         grad_outputs_\n\u001b[1;32m    434\u001b[0m     )\n\u001b[1;32m    435\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m--> 436\u001b[0m     result \u001b[38;5;241m=\u001b[39m \u001b[43m_engine_run_backward\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    437\u001b[0m \u001b[43m        \u001b[49m\u001b[43mt_outputs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    438\u001b[0m \u001b[43m        \u001b[49m\u001b[43mgrad_outputs_\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    439\u001b[0m \u001b[43m        \u001b[49m\u001b[43mretain_graph\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    440\u001b[0m \u001b[43m        \u001b[49m\u001b[43mcreate_graph\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    441\u001b[0m \u001b[43m        \u001b[49m\u001b[43minputs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    442\u001b[0m \u001b[43m        \u001b[49m\u001b[43mallow_unused\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    443\u001b[0m \u001b[43m        \u001b[49m\u001b[43maccumulate_grad\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[1;32m    444\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    445\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m materialize_grads:\n\u001b[1;32m    446\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28many\u001b[39m(\n\u001b[1;32m    447\u001b[0m         result[i] \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m is_tensor_like(inputs[i])\n\u001b[1;32m    448\u001b[0m         \u001b[38;5;28;01mfor\u001b[39;00m i \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(\u001b[38;5;28mlen\u001b[39m(inputs))\n\u001b[1;32m    449\u001b[0m     ):\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch/autograd/graph.py:768\u001b[0m, in \u001b[0;36m_engine_run_backward\u001b[0;34m(t_outputs, *args, **kwargs)\u001b[0m\n\u001b[1;32m    766\u001b[0m     unregister_hooks \u001b[38;5;241m=\u001b[39m _register_logging_hooks_on_whole_graph(t_outputs)\n\u001b[1;32m    767\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 768\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mVariable\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_execution_engine\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mrun_backward\u001b[49m\u001b[43m(\u001b[49m\u001b[43m  \u001b[49m\u001b[38;5;66;43;03m# Calls into the C++ engine to run the backward pass\u001b[39;49;00m\n\u001b[1;32m    769\u001b[0m \u001b[43m        \u001b[49m\u001b[43mt_outputs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\n\u001b[1;32m    770\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m  \u001b[38;5;66;03m# Calls into the C++ engine to run the backward pass\u001b[39;00m\n\u001b[1;32m    771\u001b[0m \u001b[38;5;28;01mfinally\u001b[39;00m:\n\u001b[1;32m    772\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m attach_logging_hooks:\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "],"ename":"KeyboardInterrupt","evalue":"","output_type":"error"}]},{"cell_type":"code","source":"print('Loss Res: {:4f}, Loss_BC: {:4f}, Loss_IC: {:4f}'.format(loss_track[-1][0], loss_track[-1][1], loss_track[-1][2]))\nprint('Train Loss: {:4f}'.format(np.sum(loss_track[-1])))\n\ntorch.save(model.state_dict(), './1dreaction_pinnsformer.pt')","metadata":{"execution":{"iopub.status.busy":"2024-09-06T22:17:04.766035Z","iopub.execute_input":"2024-09-06T22:17:04.766892Z","iopub.status.idle":"2024-09-06T22:17:04.785936Z","shell.execute_reply.started":"2024-09-06T22:17:04.766850Z","shell.execute_reply":"2024-09-06T22:17:04.785078Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stdout","text":"Loss Res: 0.000002, Loss_BC: 0.000000, Loss_IC: 0.000000\nTrain Loss: 0.000003\n","output_type":"stream"}]},{"cell_type":"code","source":"print(f\"Seed value: {seed}\")","metadata":{"execution":{"iopub.status.busy":"2024-09-06T22:17:10.831391Z","iopub.execute_input":"2024-09-06T22:17:10.832101Z","iopub.status.idle":"2024-09-06T22:17:10.836948Z","shell.execute_reply.started":"2024-09-06T22:17:10.832060Z","shell.execute_reply":"2024-09-06T22:17:10.835790Z"},"trusted":true},"execution_count":9,"outputs":[{"name":"stdout","text":"Seed value: 1\n","output_type":"stream"}]},{"cell_type":"code","source":"# Visualize PINNsformer\nres_test = make_time_sequence(res_test, num_step=5, step=1e-4) \nres_test = torch.tensor(res_test, dtype=torch.float32, requires_grad=True).to(device)\nx_test, t_test = res_test[:,:,0:1], res_test[:,:,1:2]\n\nwith torch.no_grad():\n    pred = model(x_test, t_test)[:,0:1]\n    pred = pred.cpu().detach().numpy()\n\npred = pred.reshape(101,101)\n\ndef h(x):\n    return np.exp( - (x-np.pi)**2 / (2 * (np.pi/4)**2))\n\ndef u_ana(x, t, alpha=1):\n    # Initialize solution array\n    u_t = np.zeros_like(x)\n\n    # Handle t = 0 (initial condition)\n    mask_t0 = (t == 0)\n    u_t[mask_t0] = np.exp(-(x[mask_t0] - np.pi)**2 / (2 * (np.pi/4)**2))  # Initial Gaussian condition\n\n    # Handle t > 0 (solution for heat equation)\n    mask_t_gt_0 = (t > 0)\n    u_t[mask_t_gt_0] = np.exp(-(x[mask_t_gt_0] - np.pi)**2 / (4 * alpha * t[mask_t_gt_0])) / np.sqrt(4 * np.pi * alpha * t[mask_t_gt_0])\n    \n    return u_t\n\n\nres_test, _, _, _, _ = get_data([0,2*np.pi], [0,1], 101, 101)\nu = u_ana(res_test[:,0], res_test[:,1]).reshape(101,101)\n\nrl1 = np.sum(np.abs(u-pred)) / np.sum(np.abs(u))\nrl2 = np.sqrt(np.sum((u-pred)**2) / np.sum(u**2))\n\nprint('relative L1 error: {:4f}'.format(rl1))\nprint('relative L2 error: {:4f}'.format(rl2))\n\nplt.figure(figsize=(4,3))\nplt.imshow(pred, extent=[0,np.pi*2,1,0], aspect='auto')\nplt.xlabel('x')\nplt.ylabel('t')\nplt.title('Predicted Temperature u(x,t)')\nplt.colorbar(label='Temperature')\nplt.tight_layout()\nplt.savefig('./1dtemperature_pinnsformer_pred.png')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-06T22:28:42.513828Z","iopub.execute_input":"2024-09-06T22:28:42.514675Z","iopub.status.idle":"2024-09-06T22:28:43.053491Z","shell.execute_reply.started":"2024-09-06T22:28:42.514632Z","shell.execute_reply":"2024-09-06T22:28:43.052570Z"},"trusted":true},"execution_count":12,"outputs":[{"name":"stdout","text":"relative L1 error: 0.963519\nrelative L2 error: 0.744661\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 400x300 with 2 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"plt.figure(figsize=(4,3))\nplt.imshow(u, extent=[0,np.pi*2,1,0], aspect='auto')\nplt.xlabel('x')\nplt.ylabel('t')\nplt.title('Exact u(x,t)')\nplt.colorbar()\nplt.tight_layout()\nplt.savefig('./1dreaction_exact.png')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-06T22:30:00.478763Z","iopub.execute_input":"2024-09-06T22:30:00.479635Z","iopub.status.idle":"2024-09-06T22:30:00.902300Z","shell.execute_reply.started":"2024-09-06T22:30:00.479592Z","shell.execute_reply":"2024-09-06T22:30:00.901402Z"},"trusted":true},"execution_count":15,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 400x300 with 2 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"plt.figure(figsize=(4,3))\nplt.imshow(np.abs(pred - u), extent=[0,np.pi*2,1,0], aspect='auto')\nplt.xlabel('x')\nplt.ylabel('t')\nplt.title('Absolute Error')\nplt.colorbar()\nplt.tight_layout()\nplt.savefig('./1dreaction_pinnsformer_error.png')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-06T22:29:57.135262Z","iopub.execute_input":"2024-09-06T22:29:57.136006Z","iopub.status.idle":"2024-09-06T22:29:57.527469Z","shell.execute_reply.started":"2024-09-06T22:29:57.135967Z","shell.execute_reply":"2024-09-06T22:29:57.526562Z"},"trusted":true},"execution_count":14,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 400x300 with 2 Axes>","image/png":"iVBORw0KGgoAAAANSUhEUgAAAXsAAAEiCAYAAAAYv3I0AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAABUiklEQVR4nO29f5QUxbn//66e3ZkFYRFFdgE3gL9QowKCrGAS9WaViwbDudEQYwLhJF7DBRXWxECioDHXTa6iJBEkapD8wC9oNMQrBIMrqzFgiCA5mBtRIggh7gIflYUFdna66/tH/5junv5R3dM93T1Tr3MGdrqrq2tqpt/19FNPPU0opRQcDofDKWuEqBvA4XA4nPDhYs/hcDgVABd7DofDqQC42HM4HE4FwMWew+FwKgAu9hwOh1MBcLHncDicCoCLPYfD4VQAXOw5HA6nAuBiz2Fmz549IITgwQcfLOl5v/a1r2HYsGElPSeHU25wsedoLF26FIQQNDY2Rt2UwFi3bh3uueeewOu95557QAixfbW3twd+Tg6nGKqibgAnPqxcuRLDhg3Dli1bsGvXLpx11llRN6lo1q1bhyVLloQi+ADw6KOPok+fPgXbTz755FDOx+H4hYs9BwCwe/dubNq0Cc899xxuueUWrFy5EgsXLoy6WbHn+uuvx4ABAzwdc+LECaTTaQhC4Y11V1cXTjrpJN/tkSQJ2WwWNTU1vuvglCfcjcMBIFv1/fv3x7XXXovrr78eK1eudCz/8MMPY+jQoejVqxcuv/xyvPXWW4b97e3tmDFjBk4//XRkMhkMGjQIn//857Fnzx5DuaVLl+KTn/wkMpkMBg8ejFmzZuHjjz92PHdbWxsIIWhrazNsV+cUVqxYAUD29S9ZsgQADC4WFUmSsHjxYnzyk59ETU0N6urqcMstt+Cjjz5yPL8X1LauWrUKd911F4YMGYLevXujs7MTX/va19CnTx/84x//wDXXXIO+ffvipptuAiCL/h133IGGhgZkMhmMGDECDz74IMxJagkhmD17NlauXKn14/r16wNrP6d84JY9B4As9v/xH/+BdDqNG2+8EY8++ij+8pe/4JJLLiko+8tf/hJHjhzBrFmzcOLECfz4xz/Gv/3bv2HHjh2oq6sDAHzhC1/A3/72N9x6660YNmwYDhw4gA0bNmDv3r3aZOs999yDe++9F01NTZg5cyZ27typnfdPf/oTqquri/pMt9xyC/71r39hw4YN+NWvfmW5f8WKFZgxYwZuu+027N69G4888gjefPNN5vN/+OGHBduqqqoK3Dj33Xcf0uk0vvWtb6G7uxvpdBoAkMvlMHHiRHzqU5/Cgw8+iN69e4NSiuuuuw4bN27E17/+dYwaNQovvvgivv3tb2P//v14+OGHDXW//PLLePrppzF79mwMGDCAT2ZzrKGciueNN96gAOiGDRsopZRKkkRPP/10evvttxvK7d69mwKgvXr1ov/85z+17X/+858pADp37lxKKaUfffQRBUAfeOAB23MeOHCAptNpevXVV1NRFLXtjzzyCAVAly9frm2bPn06HTp0qPZ+48aNFADduHGjZfuefPJJbdusWbOo1c/8j3/8IwVAV65cadi+fv16y+1mFi5cSAFYvkaMGFHQ1jPOOIMeO3bMUMf06dMpADpv3jzD9jVr1lAA9Ac/+IFh+/XXX08JIXTXrl3aNgBUEAT6t7/9zbG9HA5343CwcuVK1NXV4corrwQguwamTp2KVatWQRTFgvJTpkzBkCFDtPfjxo1DY2Mj1q1bBwDo1asX0uk02trabF0iL730ErLZLObMmWPwXd98882ora3F2rVrg/yIBTzzzDPo168frrrqKhw6dEh7jRkzBn369MHGjRuZ6nn22WexYcMGw+vJJ58sKDd9+nT06tXLso6ZM2ca3q9btw6pVAq33XabYfsdd9wBSil+//vfG7ZffvnlOP/885nay6lcuBunwhFFEatWrcKVV16J3bt3a9sbGxuxaNEitLa24uqrrzYcc/bZZxfUc8455+Dpp58GAGQyGfzoRz/CHXfcgbq6Olx66aX43Oc+h2nTpqG+vh4A8P777wMARowYYagnnU7jjDPO0PaHxbvvvovDhw9j4MCBlvsPHDjAVM9nPvMZpgna4cOHW26vqqrC6aefbtj2/vvvY/Dgwejbt69h+3nnnaftZ6mbw9HDxb7Cefnll/HBBx9g1apVWLVqVcH+lStXFog9C3PmzMHkyZOxZs0avPjii7j77rvR0tKCl19+GaNHjy6qzfpJVj1WdyF2SJKEgQMH2k5En3baab7aZoedVZ/JZCyjcoKom8PRw8W+wlm5ciUGDhyoRa3oee655/Db3/4Wy5YtMwjKu+++W1D2nXfeKZgYPPPMM3HHHXfgjjvuwLvvvotRo0Zh0aJF+PWvf42hQ4cCAHbu3IkzzjhDOyabzWL37t1oamqybXP//v0BoCBqx+puwG5gOPPMM/HSSy/hsssui51YDh06FC+99BKOHDlisO7ffvttbT+H4xXus69gjh8/jueeew6f+9zncP311xe8Zs+ejSNHjuD55583HLdmzRrs379fe79lyxb8+c9/xqRJkwAAx44dw4kTJwzHnHnmmejbty+6u7sBAE1NTUin0/jJT35iCCf8+c9/jsOHD+Paa6+1bffQoUORSqXw6quvGrYvXbq0oKwas24eGL74xS9CFEXcd999BcfkcjnX8M8wueaaayCKIh555BHD9ocffhiEEK2fORwvcMu+gnn++edx5MgRXHfddZb7L730Upx22mlYuXIlpk6dqm0/66yz8KlPfQozZ85Ed3c3Fi9ejFNPPRV33nknANnK/+xnP4svfvGLOP/881FVVYXf/va36OjowJe+9CUAsptk/vz5uPfee/Hv//7vuO6667Bz504sXboUl1xyCb7yla/Ytrtfv3644YYb8NOf/hSEEJx55pl44YUXLP3sY8aMAQDcdtttmDhxIlKpFL70pS/h8ssvxy233IKWlhZs374dV199Naqrq/Huu+/imWeewY9//GNcf/31rn34m9/8xnIF7VVXXaWFoXpl8uTJuPLKK/G9730Pe/bswciRI/GHP/wBv/vd7zBnzhyceeaZvurlVDhRhwNxomPy5Mm0pqaGdnV12Zb52te+Rqurq+mhQ4e00MYHHniALlq0iDY0NNBMJkM//elP07/+9a/aMYcOHaKzZs2i5557Lj3ppJNov379aGNjI3366acL6n/kkUfoueeeS6urq2ldXR2dOXMm/eijjwxlzKGXlFJ68OBB+oUvfIH27t2b9u/fn95yyy30rbfeKgi9zOVy9NZbb6WnnXYaJYQUhGE+9thjdMyYMbRXr160b9++9MILL6R33nkn/de//uXYd06hl9CFhaqhl88880xBHdOnT6cnnXSSZf1Hjhyhc+fOpYMHD6bV1dX07LPPpg888ACVJMlQDgCdNWuWY1s5HEopJZSaluRxOBwOp+zgPnsOh8OpALjYczgcTgXAxZ7D4XAqgFiI/ZIlSzBs2DDU1NSgsbERW7ZscSz/zDPP4Nxzz0VNTQ0uvPBCbZk+h8PhcKyJXOxXr16N5uZmLFy4ENu2bcPIkSMxceJE2+XqmzZtwo033oivf/3rePPNNzFlyhRMmTKlIMUuh8PhcPJEHo3T2NiISy65RFtAIkkSGhoacOutt2LevHkF5adOnYquri688MIL2rZLL70Uo0aNwrJly0rWbg6Hw0kSkS6qymaz2Lp1K+bPn69tEwQBTU1N2Lx5s+UxmzdvRnNzs2HbxIkTsWbNGsvy3d3d2qpNQB5MPvzwQ5x66qm2S+k5HE7yoZTiyJEjGDx4sK/8QydOnEA2m2Uqm06nY/90sEjF/tChQxBFsWClYV1dnZYHxEx7e7tlebsHPLe0tODee+8NpsEcDidx7Nu3ryCzqBsnTpzA8KF90H6ALblefX09du/eHWvBL/t0CfPnzzfcCRw+fBif+MQn8ClcgyoU9ySkyPByR0KsLRoiEPdyujIFp9RbSvqduu3anZP+XMTmOGJTxgyVAEoBSkFzOaCnB5QCkCggEAi9e4Gk00CmGjSTAQQCmkoBKQKIFEQUAYmCHD8B9ORAs1lIx45rxxMCoLoapKpKbhMh7u3R/qY2f+vKSFTZrdsv2dSh327apdZj2xYA1KqMRTlHErzmMocevIZ1BamiWchms2g/IGL31qGo7et8V9B5RMLwMe/H/tm/kYr9gAEDkEql0NHRYdje0dGh5T03U19f76l8JpNBJpMp2F6FalSREom9mzibxMRRiJV9eSEV8udQ/iaE5AWWCEBKyP8tKM9hTaXyxwtEO54KSj2EACkBVBDkaXxBACUESBFQgYCm5OMoAWiVfBwVlL8JAAGQqghAACml7BMIaAryMdo26LZBPoe6nQBQu4IChAJCD0XqBJDqoeh1MIf0R90QunMQjhwHzVTj/10yAEc+QXCiXsTQEe04taYL5/Q5gEHpw/gg2w/vHB2IQ8f7YO/OM1DTkULf9ylOfeMQSHcPpL69IGWqkO2fwfHTqiBWE4g1gFRNLNtCJAASQCgFEeX3RIL8NwWISJX/ASJREAkQRApQQMhR5VhA6JHkOiUKkpOUYyR5UJKoPEhRKou/BBBJAkRl0JMkuYykvqf5QUIU5UFFovlBUv0bACSaH3TU49W/oRuQ9IOG24DiNpCUcvBQTlWMu/akPvLLCTEh42GkYp9OpzFmzBi0trZiypQpAGSfemtrK2bPnm15zPjx49Ha2oo5c+Zo2zZs2IDx48eXoMUeYPmBsYq8wcLWibzub227JuI6q9RK4NUBQC/wKblOWqX8LwiyRUwIpCpF3AUCWkVAifK/IuCasFcRTcyllCzwUhUARczVbbRKJ/ApKIOCUk4Re/kDK/8pYirk1AEGkKoF0JQAWp0C7ZWBVFOFbC1B9mQJqVO6cfEp+zAk8zEu7rUHQ6s68X6uFgOqh2Fv71Pwz1NPRra7BtkPBUg1aQiCUk9KgFQtINeLQEwT5E4CpKr8oAQgLyKKuIMSCKK8nYg6sc8REIlCEAEiEkXkodsmDwZCjuQHBDGliL4s8CSnCL5EIeRkQaYilQWfyoMDpVQWf73wq78LJ+EnFITKgwpSKWW/JP9OKNWONTzPTlLeKKKu/mY10SfG/QWov9OE3DFIoJDg3Fa3/XEhcjdOc3Mzpk+fjrFjx2LcuHFYvHgxurq6MGPGDADAtGnTMGTIELS0tAAAbr/9dlx++eVYtGgRrr32WqxatQpvvPEGHnvssSg/hne8WPPqJrM1r/xt7S7JbyOqO0K/XfmbaoOC7qXVrZTRW7U6EaY+DSZCKSglcpUUgCTXVfCJFXGEBFSdoBCy8v81H4lInRCR/udHwIH/B9KvFmLdyRBPqkZVF0WvDgHZE73wXNcYkLSIdK8epNM5dHdXo+dEFWg2hXR7FdKdBNXHKMQ+aeA4Qar9IwidR1BVNwDVXSdDzKRwon8KuRoCKQ3kaohyx6LrDxXFSldfsvXPLgJUUAYOyH1BiNI3gly32t9yr+nq1X+vRL5bIpTkxZTk/ybKfojIn4AIgKDcRagDvG6wgCTJ282fhQgGQScCMVr5pv0F6NoVZ3qoiB6XdvZ4cYtFSORiP3XqVBw8eBALFixAe3s7Ro0ahfXr12uTsHv37jXMpE+YMAFPPfUU7rrrLnz3u9/F2WefjTVr1uCCCy6I6iN4x8kHbN7v5LaxQ+/Ccdpve37iXL8NVHeM20BAqCJZmjDmJUwTSwkQemSLN3UCqOqmqDouofpID4TuHMjRYxCPHYPQq0a+WyAEqR6KquNEvrOoqgKtTiGbqUZ3FQXJEQjdBKSHoPooQdVx2S1ElbsX2tMD6dgxpI4eQ9WR3hCyVRAzBIQKyEkEVKDy4EgVa1c34KlCrf88Vp85EAQot0UuFQok72PQi6sqxAKx9v3ry5sFX3+Mq6C77E8A3LIPmNmzZ9u6bdra2gq23XDDDbjhhhtCbpVPggzndBNlwTQoKC4buR0WE6FmC1//Uix8amq/7H9X96nb8nVQgoJjzH2gF3ait1KJso/kywGKe0MCSE4WeCIB1V0SUickVHXlUPXRMSDbA5rLgVRVgRACISuCpgRkDksgIlDVRVB1TBV92QVDRMWNIgLVRyiqTlCkj0gQukWQHjnqglRVgfb0QPi4C0K6GhmBINU7haoaAT09AqhAkcsobihBdldp/aR+Bt1gZUh8bEYRVEqIfLejdIjaD5QQENC8Ra9Yz0R3vLxP+Y6o7rsFFFcNKTif/LcAUFER77x1D0ATeFucBgkvJMC6l0AhcrHn+MLKPWMXrWJbB/uAYun6YT3eolyBsNsdqgg8oRSaPKnXhOrioIqgEeM2QcwLs9AjT2qmuilS3RKErAhke0B6coqlqXwuSYKQkyBkJVR1KwKsTv6mZFEmItV86tXHKVJZCqFHPs7guqBUrh+A0J1DSpmUTlVTSCmClKC4vlOARKmstkRRXb37RufSyfcLgzBoPpy84NvtZ63HYKGzipNHMS5w5cgbE+3O4ZY9xxqPUTfyJnfxtJuU1fYV+PtNPnxDxI7OKtf7603HG10yJovRyl+vf08pAKJZ7ao1byiuXR9qxIdcTp6wpIoFTlF1nMr/d+WQOpEDOd4DciIL2tMDKA8Yp7kcSHcOkIDqoykIOYpUWkBVt5CPAhKUuwUlKiZ1XEIqKyF1XKkzm68Pogh0Z0FECcKxHi2yBqiSBw0pf8egTUgLtHDSQdE4ovtshs+uFzlT/2gWu9rvJkGUBwFd/6nlIH9e+a5CdbuofwvyZ1Mtc3O9ynFU576Rtxfhu7coU0CMBb+HUgaffTzbboaLfZyw8NXn3ztM2OqPtZqsZTo30cIejec1uik8Y7Bq8+/Vaz8vfNAiWlShF3Ky8JOcJIci5iQ5Tl6JlYc+5FAUQQTFnaP41eXIHgKaoprVLeTku4dUtyRb9T1KnVroouzOoKIEQkQQUQTNpWTh75FAqQAhRyCBQgDR3FGS7rMWuKX0WuBTF6hy90AEGF0oAkAlZRLeT+X6iVo1wkYv6ibfff68Hnz3CUZkcOO47Y8LXOyDolir3kboLWOEzcJvDtEkOqtfb5WbrXrzdgVN9K3ObfcxKWT/shJlQ1W/NSBHeij1GiJOtMlMnftGkidNZZGnSHWLIDkqx9Jnc/JCKEkCJBFUCSckPTmQ7h5AlOTJ/JwEoVqAkE3Jn1Vxw8ihjRSgFEJWBOmRIGRzICeyQE4EVV1DoggiiaASAXpycp0CkEoJoKLsQxeqZMueSLK7iKhho4o7R/t80H1GwDCRa/78llj1NyGAQGWR129XrXgo1r06iav68xUfPoEywSwxTNQWnFo3ENgIvi/rPqaI1D2OnsfZc4qGaTEIiwVvnqSz+hsINAeqKmTqxCygDAaKPBGdyKkLlLSJWUWUBVGJMxclWaSVOHKqWvVK3DilFCSXk0+SE0GUCU/5MxFQkWgWqhaznhWBnAT05ICcCORyujh0qt05yOeTFH+/BECAIFJIRNYvot6NQAlrJDofvtYXRjHXwjODQg3P1E6gn4j14CLRhWHK9VpP1Fq6c4olpq4cZd2ca5kkwMU+CELy1Wu4rZIFjIuo1P3mY53aa/bLK6iWqlyXdfP0k7D5yBsKIsnHGiJudKqnrUKl+dWlRJQte5KTNBeOkJNdOMip7hZ1BagEKoogPT2yD1+S5H4VRSCVgpCryt+hqGJCqTw/0JOTLXglZQJEUU69IIog6oIzqkzc5pT6eiQ5q0IPASQCUEG27FNKs9R1CQJALdQ8b8lDaYvRtWU7eavFxgMUpglb9XNZiaVZ9AHNb69N1BJlpNC7h6x891auHAfKxXefowQ9Lj7MnG8fZ2nhYh82LELv5KvXyvj4QTmFRDr59vWLqRjPr7ozNNcNhWLHEyUqB0aXhGbRK6KnhFoSxfrWLH0lLQBRhVonBpRSgMorSGWrG4Dia9cLV6HYy64fTchFERAlY335k2jnV89DJHkhmyBSeUEpJfnuUT8oKfy82m5KDYuv1P5z7uC8T16eJ5BdOQUWvbYIS+fDN/vz/Yiq3TEOvvtycOeIIBBtfZf5MkmAi32x+BFhw/EuvnqWidmCyVwGkdf/rU7OWkXmsKBarBIAoki8GoGjujX0zTGJnOy2USdPZdeNPHEqFbhw9L5l2TqF7MrJZkFSKVAigIgpIJXKpwowiz0gu28kCTQnh3JSMT9AmN1nmisnJwEpIvv6JUCCIHeXoKxzUlJBQB0sSOHEttG6Vwe3fB/K/eldiOU5AgvXjZNLx+yrV2PurSZqtTIWkTlBTtbGzLrnYs8JFV+Jm8yWeoE/Pv+eenEhOUEVy71A0FSbHkarXm9camGJahIxRehFqv2tplLQfOhWqOJCqeyCyeW0+P58GZIXJHW7KIKKkuyrF0XlfFLhnZhEgRR0vnyiCDPV2i6fQ/0nfwsjpy7Q7TdY99ZuG8++fAdxpAJRQkZRKOxalA3Jp0/wKLKh+O5jhkQJJBc3jdv+uMDFvhg8+uod/fSW7hRzOKUpD45ZmKz89WZLXu+bL8Ka16c3UIWLQk7oRQXIzhuKgrq1qBRFJGVrXf5fUJJ+yaGWcuIvOcOjyYVDBNmFIQggSnI32pPLp5agEmhOkJODKX2lCZMqeLmc7LLpycmpkiXZf01SkBOB6ftXPbdIQSBpE7WABIEI6jSAZrGricPUxGnmhWiGRVfKZ1ff6/vXM+bvWr+CVm/dm61zszVuly/HLgwTsI3oKUiUptYvb7T/HDEZRLJIIesSuZDlln2Fw7QS1kP4i9OTdtzEOihLHsi7G4gq+IqgUGjRNpr/HjBOJur906plq7px9P57dZ9e4K0ufoPFLmkWKhUEEFUtlbDD/MCkCL6aBVKN2wesXWIFn1+58xCoXC9V2y+3Q52loEQ38KmrbG36Qb9N9ecb+torTv51pzhBp1h9D5OzSfPLO0EZLHvKLfsyJ0hfvaFaB3+7ijkKR1efbRSOWzSOYCprLqO6MFLGzYYQS+gsesMSULUO9RjVFFbdOPmQSznWLR8Pr+aL19qgfmZKZKueUnnZS4/qnpEAmpXbn0oZ74aAfBpfXcpf1eok1XKdJJXKDyTqedVJWolo7iZKlHYKAMlRLVpJm5ZWJm+VjinoC72Fnx/kCr8azZVl6Hi1QmWwFag82BWU0Vn0+qgdq6gcc8y9lbVuGkhsXTll4rvnPntOsDi5cOzwOjFrfm8zWLHmvpH96YrPVxMRte68W8dwel28uRaVogq9wcrPC718LhsxKWiTBCoChMpPpyKKL56qn1etR5Jkfz2VZKG38tVb1q98TmUiWo3QgURABGUw1IkrVQWdwLov1H7UWfVy+3Sjp1+cJmY9TtRa4sGVk2R6aAo9NOVShu3RhVHDxT4Mil0ta+Gr1/Z7XURlek/NdwUe71AMCcyo7IslulwrFNC5eUwXPtWJvDJYEJ3A6ydpVUvaKuRSs0bVh2wAikDKoX5aZI3VvAZQIPKyJa/8r75gusvSWfegVG6O+iQpAqg556HlZVD7QU2pYCGC5oFPrVN3B+SWOE3NmKnrHIPoqiuHtX1eQzCtYu5NvvtyXlXLLftKx0kgi11AZXtKxnP6cC8xW/P6U1JaeBxVY3AKDVN98i+9qGmCproq1HLaezsfsjIZq4aNqtYolMgaSKDqe1iIjfa0JuTvkgiBYQLcCu2uQ85TQ9XRTbXuFReWOghqcUkU1mGYap0F/eXdQi4Qfq+oaY+tdgUQeeNZ8GPgyhGpAJE632WLMXA3scDF3ivF+uptq/VQr5W4C8RYh+p3twrF9B19o5jsyn/qAirNuodaxtr3bLBcVaHXRePk88ToLHpDBSQvylDuUigBQUoRbklpgwnFvSPXIeT/J1B89EI+skcgQErx8+vOZ6xPt8hKjUKS9EvIoNzlKHcdAoy5cqz6Bca+MXwQ/aStF6xcObr8Oep2uS9RmAnTg+UdWhhmxIIvyfFXrmWSABf7IAnCqjf76u18904uGJtjfMfXq+IOyEKRgqXgAy6f1yT0hjh6zcK3EHmnpympYYJqSCGlivjrXDWGz6K4blQXj0DyIap2bh99O1Im145E8xY+hey3J5BFX/lbPxja1gtYC72++T41zxBvr8cuwoYQY/oEp2O8ROkgee6cHlqFrKvPnos9x4xZSJwEwC4Kx0qM3ETcyqpnCDEEIZbuGnWb6jLIO29QeCFD767IH5+PLaeaVa8NBtpCKlhbdZrvWIm3l4T8vAYAEAmUEtlPbnUh6h/CLgj5B7Fr7hwhP3hY9YsyQau5chSLmEg0v5CKQrbolbz+6uewbI6uf/RuGOtFV/l+c0QNs3SaqLU8xnzCfMy9cbtDXWa/PRBbMXdDggDJJc6eP7yE44xTGmOriVk7CgYQ0+RugOhdOVq0jabyShmrA3Uir71XQy/1A4Aiisx+ZzV1r5DvI6qINJEkJdY/ZQwlVD+LKuZmPz3rJLj22VSfPNVNWqsngebW0RLFWdZR+F4v6oFmyFQxhWDmt9tb2fnn0HqcqA2qrREgUgLRxXJ32x8XuNh7IYSJWYOQO4VbWsXWm+sxt0/v6vEi/ppVr9MhNewQyLsWFHeOfuGUOcQQMIp8gWWquXOocULW7uLWfOmCcoehZP5KpZRJV0WIUildrhiT20GtR32vt+aJYBgIbPtN89sj3ydqtIs2gClvCSkQfcv+UfpIq890vnz5wm2u6OPszS4a1W9vrs8t5t7yNO6++yS5ckQIEF0se/7wknIjgggc+bQ29aj+art9bJWzFVNdOdSYC0fvxoFpmwGzZS/Zuy7kbdRY3qntahSO4s6RHyKipkZQxCOVMg5WQH6xld53b3hgu33faHc1VL7LMW/XHhiuZFUwpIB2EgaLvtC7gJjveFgtYbty6gBq5UbyMhHrMEAkJTKnh1YxxNlzy56jxy2NMYv7xWY5P3MkD4OVX7AYSls4BZ3LRhVtUiBmdnXK5XXH6gVMyrtwNIvW6prXW6fq3QeUSBKqWqyyj5lIAFIpS2EqyC+kc98UPN1L/78edaJaAiDI6RKofrIWkPtMSeFABHvL3rGfVDSL3zwYuAyI2iDnUyhZFlgB7hO1MbXc3ZDg7qZJyqfiYh9XBJfBwQtB+u9N1j101qstppWwhRO2MAq94ViLiUH1f72/2fAQDmVSEUYPjoY+xYTpoS/yfsFe6CWKgrt6dUUtzIvKlAlZJS5fPqWL6Orzkems+kBwsY61xWosmP32TOdPXgoFtglal9XuMYGLPQvFunBY8+CoWE3M2i2cMrsd3KJtWIXf4KOncsihzrrPT9ZCEzL5vMr/Fj5ng69ZdVlYWaqWrgWddWqI9lBTKVOj4KsTsykYBabgeb15oS+Y9zCserboN9Vvr9+nWvdKq/KLzJT+1PeLVV+ZB0TA2qov1qWjj9bRlzP1rSHmXp8JUz9RW3BKNldPEnz3bIuquNhzrPDrwmGpyy2fjld0Vnzebw9AES6D5WqevNXVUfBe55vOP6LPGIVjK/p6VOtekvJ9IQn5RmhianGXpImcyU9vTgtthcn/r5+ozT+Zi2qCr5XVh0ACtn1lHhTVc2j7grZuC2LnSWEIphOmqBxj3WwTu3Glh6ZQ5eqzT8bn42JfDEU8ctDpSVQGbC10h+P01pqPKBzVNVNQrd6K1UXsAHC8/bcSL1sBYJ1YFGBI16uFXqpuHPkk8n+C6VjAYOFb3mG55A0yTNJaunrUfpL/0Sx8dXC0rFP3xjzwWeGUKM624cbvzz7qycbCdhNvj0+yivtELVs0TjIs+2S0MkpCiFf3fR47AWI4tpinU6lpDvKVqf9TQxm7lxZSaWelmv31Ntc5NX9+XRimtWtLQD6kUuebN7ty1Lqswi0Jse87c5u1OxQok87aSGjYZ9tP2gfVHafVX1y8ve/vX41YYilXKkp4LvVJVW4vL7z66quYPHkyBg8eDEII1qxZ41i+ra0NhJCCV3t7u6fzcrF3IqRwS8foGTd/famwSkRmFjBYlNGj36cXejvh8mOh6v/WXQhyGgSz6OtEXtCVtZqM9XpHZG6eleCrZX30V0GZMNzaHj4zy50pa5SY5XUTxW/eAkmx7J1eXidou7q6MHLkSCxZssTTcTt37sQHH3ygvQYOHOjpeO7GCRO3cEu7w6wmWW1SJDM97MQLVm4Jc/sM/nsADq4JQ0ZdB+FiTgMAmCYTkfcXA7LPmOonEa0/C9ELvF6w9JYsS1+a5yvUaBvd5DYR4L+/WM5fDCa3iMH9onen6EMwFbeM75j7mE3COtFDU0gF7LOfNGkSJk2a5LktAwcOxMknn+z5OJV4DJ/lCItlEuSEaoB1WS1y0mdmLChDHV5KWb3QhxJSqLc0lfdWt74Ga14v9F7nN8xNcOkzQ256l/4y1OfQZ0WlMzZT6t9iTCx3NyQqML1KwahRozBo0CBcddVV+NOf/uT5+Fj0+JIlSzBs2DDU1NSgsbERW7ZssS37+OOP49Of/jT69++P/v37o6mpybG8b0Jy4Tiey8sFZzWx6NMNoX9MYAEmvzwAg+A7CY5hv1609HV7tOqp3uo2+5PN/Wjw1Zte5nIqgrEMk6+b5vvDvCAqlD6zQvIo/g6/FeaH5KiwRpM51OnZlVMiv72I/ANM7F8ynZ2dhld3d3cgbRg0aBCWLVuGZ599Fs8++ywaGhpwxRVXYNu2bZ7qiVzsV69ejebmZixcuBDbtm3DyJEjMXHiRBw4cMCyfFtbG2688UZs3LgRmzdvRkNDA66++mrs37+/NA32Y5E4JT0L43ysWIVFqqc1DwDmsEDJWNbqpWEWLZewSkvRsvOtA9Y5gATBfvDU7zO4c2wGTz9Wv+4zBtZn2j7znZX99xg4Hn+Pnn/vXs5XAsH3Ytk3NDSgX79+2qulpSWQNowYMQK33HILxowZgwkTJmD58uWYMGECHn74YU/1RO6zf+ihh3DzzTdjxowZAIBly5Zh7dq1WL58OebNm1dQfuXKlYb3TzzxBJ599lm0trZi2rRpwTTK44/I18SszaMHXdsVxe2vPkyP6OLrzc8t1VOwWEpXl905nN7bofc569qo1WHXr3aWLet3T/PLprRzWR1r12dWvxm3PithyGG+EfZ5cgzYZMIETPMAjqeyCMOMmBzDM2hzyvzDvn37UFtbq23PZDKhtWvcuHF47bXXPB0Tqdhns1ls3boV8+fP17YJgoCmpiZs3ryZqY5jx46hp6cHp5xyiuX+7u5uw+1UZ2dncY1mwefELMAwOWtFwQNPirB4GCZoAeTFS8XhIrUVLSvXA+u8HTGJrKC0wSz+KnafS9/ffix505oEQimokjPIfG5Dn7mIGlOYpcsdkivmmHlzumOn8n4mac11JGCi1ssK2traWoPYh8n27dsxaNAgT8dEKvaHDh2CKIqoq6szbK+rq8Pbb7/NVMd3vvMdDB48GE1NTZb7W1pacO+997I3qhS+QNaFVCzPlg0j+kYTJ0W4ADnKxGQ5awuqrDTUfP1bCH3BPhaIbE9bogqJfiAwHGeuR3ec4/kYcYrM0Qm+Vtxrv2nPAHDor4Cjcyy3qyLNuMAqVOzaGxAscfRe4+yPHj2KXbt2ae93796N7du345RTTsEnPvEJzJ8/H/v378cvf/lLAMDixYsxfPhwfPKTn8SJEyfwxBNP4OWXX8Yf/vAHT+eN3I1TDD/84Q+xatUqtLW1oaamxrLM/Pnz0dzcrL3v7OxEQ0ODvxMWkQcnUAJKn+yIwyBgtpxdrVDWi5FRF6hA8k+60g9AWjimhWVvh11uIdhMzlq6XyDn4HFtuLFPHfvNySdvty1oSpHqoNgVtSETxgraN954A1deeaX2XtWn6dOnY8WKFfjggw+wd+9ebX82m8Udd9yB/fv3o3fv3rjooovw0ksvGepgIVKxHzBgAFKpFDo6OgzbOzo6UF9f73jsgw8+iB/+8Id46aWXcNFFF9mWy2QywfjOihRxy4kqqygI/ydg22Z3uJX7wQqzT9zpPHZ+eL2F6uaPthEcWfBhFHq94AMuVqeFn173v+cVp7rzEyhx9aqLJ4g+c8JPJI65fBEWcoErx6Kuoh9IHlEKhRxDnH3O40B0xRVXOPbFihUrDO/vvPNO3HnnnZ7OYUWk0TjpdBpjxoxBa2urtk2SJLS2tmL8+PG2x/3P//wP7rvvPqxfvx5jx44NrkHFTsx6ecasoZzD1+C0KMjv4ODhwiAmgbY8XhVt88u8X1ePrxhxls9rds/YvfzWydpUc7/Z9Yldn6llVPz0m18BJDb5ggDn3zRr6LDLdRPUg3+CQH0sodsrCUTuxmlubsb06dMxduxYjBs3DosXL0ZXV5cWnTNt2jQMGTJEC2P60Y9+hAULFuCpp57CsGHDtPwQffr0QZ8+ffw3JGhfvd0PtpjFK0G6iAzJuix8zQY/MzVaquZjnLAQLMcyXrGKwLHy2Vsd5/a3V+z6JKB+s3yko90gHJeoFruonKBdRCFZ92H47KMicrGfOnUqDh48iAULFqC9vR2jRo3C+vXrtUnbvXv3QtAJ5KOPPopsNovrr7/eUM/ChQtxzz33hNPIMF04LA8V1+MamRPQD49VuADrcg4XnqfUCJYVyBe25rt3mlTUt8etj5X91OzH94p5kLTab1c/a3RSUMKm5rV32s/wpCrbh5EHSQS+e8qwQpbyfPbszJ49G7Nnz7bc19bWZni/Z8+e8BvEgK9bTRar3kskTkGjGC1GHxEmBuFSrzez6NthePqSs9DbuinMfnk3gbfySduVtTuf1f8W7bUVdPNdEVAYkmmHSdN8D5As5VmF2U9EDuArKicuMfc9lIC4iDl/Bm2SCMKFE0YUjk3ys8BQH7GnRdUwCpenc7jst5oT8IDButfX5yZgNq4b36mArSZjncp5wNMASWk4LpyCpGgxtNpDuJtgyX1Tqtw4xcLF3vXW3kdSJ7f0CEGcM2gK/PawFC5LC58R34m7XMTFMhRT/du1UR6E3udAUPjoQm/HFsAyaV4K3ATaLSrH/L2yCL6PcxaDBALJ4SHxapkkwMXeCbtnx4YVLRBEPvwicbPuHcs41FlQl1O5Yi9WL26JAGDtMwD++82r2ysAmMMlQ4rHt3XllNB3zxJtw6NxkoCfkDq/1p+Vv97r5KxdvcWKlpXrwS5G3KN4OQp9kS4cvagbrHt1n9U5bdprsOpZ+9Pcby59BrANlL77LIhBsohVr44PIrer12Wg8OW7D9C6z9EUBMktzp5lRV30VLbYJ4EQrXhmHPzQdqLv6H4w/82K1eSsk+Drj3PA1n3jMjnrXKmz4AMl6rOgCXEBUxyhDG4cyt04MScoEXXwr7NY7GG6ZDxjZ6maywCWvnzXuq0IwKpnEny7ZtlZ9H6/F7sJWJv5D+fGOfdZYG6vAGFx/TiWYXXRsPjuQWCXRokVHmdfCYQ1SWqKr9codb4bF2u9wNVgLu8lhJPRZx8UqoA7iX4xD2D3TSn7rNR3BFYZNM3x9j7SHkcNj8Ypd1gnZlmjcFif5KOv0y0Jl0fLk0jUWuDUlbSmGHamVbNuvnA3t4QfnOLrTds9CbpdfxZz52V1F+QUKWTXN/rtTqtpAaPg6o7zcrejtc8uaka/jSmCxsX14xKVE+VEbY4KrnH2OS72nNjixcIE2Jb7RxL6RwoHHL9zAU7vw4C1nRZCzykd5eTGScaQVEqCDrd0iMKxP8Y0Mahrk+Udg1/cfKsslqbf80mwXllbLF6FOsDwSw2zKAfRX3bn8nAcM4LN742Y7lC9PlTHbhsDttdfyGtSVLF3eyUBbtn7JYqFT15hteD1SdFsy8Dy6Uue2hIGVtZ8MXH2QVn1QfcXi1XP6qpJgK88LpSTZc/FngEmq97HQ8ULyjkNIKWcwLUTJisBUynCtcNk1ZsfSuLmvvEj2k7uHIb+d42h99tfbsnQopiA1WP2sTNOvnpdTRtFvhyRITcOX1RVScQo/7YrHi1My6X+dqGFrFSK79kpDw5rf9klRGMlSVZ8KZ6M5RFu2ZcjAbllbK16J4GN02BhYd0zCz4LrInR3LCy7r0cb66LZZsVboNngH1lmT4hTmLuaP1bu9YCCcFUr90QInO42Fc6SfDXe4XFb28oD+8iZnEthpnbJQosXTkB9ZVz+fLqRwAlCa10g4t9BVHUA8VZ8uG4CWxYA4ubf15fBg4iBrAJWRjXrJOv3u8ErdP2YmAVfJYB0emzhW3xuwmwYt37ypPDcL5S++1FSQCRXHz2LvvjAhd7BwLLbullMVWMsZ2AdBOyKIwzt4icKNJUxLGfSklAeXVKKfg8xXE5UazIuq2aNZSNmaDbWfcuSbxsBd8Drkm/rLDyCTsJSBAROep5nbDoI6Aw0RmA4vvJKQ1ClH58J4vfxboP7Nm0IfjuuRuHEx6lzpGjx+4h5F5jxDnhYCf0duIYdUhmGUApAXURc7f9caGyxd6rVe+QCydwnMTVq/Cq+W7s8uPoYZio9fMgDqvjfeHVuveCH6veqTq3uHuXY5lgEFotL47XPnK7awprMCl2AAlwYpf77CuAMP31sUprzIqFdV+MmHHs8eXiiiGWYZV+BokIF1hRBjcOt+zjjlMeeiuhT8AEalFYuWqcfPkKXqz8UMMsg46zD4hA+oclGieBg0GxOAo+EVBsLntArsI1FVHxpykJlSv2xWIaEAJNUJZAa9nNyg89eVfUuMxrFN0/5YiX/PZ+XDMBCL4EAsKjcTgqvt0ypYyxt/PbW4mU3UStXXm1uXEQLLt8+07lSoSv/nGy6q2sWlP5An99IHMbivDauWR8+twDi8oJEFESgDLx2SejlSUkMF+9GRZrP4xzB3Fxe1nUE0T9brD2U7GLprx+H2H3SxwGUyuYEgWGIzWhXa8KlLK9kgC37FkodtVssfWHNQg4+ejdonKiDsdktfzCuusKGzcFsXkiFfPx6n4v1rNbn/txtRSxmrYU8NBLDhsBiyGTu8j8mEEWohTupJhFrATRl377JCl9GWbYZsBwsS9TmG8Ji4m9Zs2JUwq8WPfqxWnlE0/ghHJsYbHSi7XqPeIrM6U5R44fGO/ewgzDFCUCSM6/b9Flf1zgYq/A/NgzP/5iJ9dOOYR0+rVmE2LdeaaS+4M1bQKrdR+x4Ms+eTfLPvDThgIXeycYhNhLyGVcFlMxraS1w07IvFr5QVwhYUVsBHHX5dWN5mefSzkSg2gWJsIOwSyCcnLjxMKsXLJkCYYNG4aamho0NjZiy5YtTMetWrUKhBBMmTIl3AZWAnYXmFfBYBGnpJhCxeIWquEnlCMpAq4jcCOnhHfDlPGVBCIX+9WrV6O5uRkLFy7Etm3bMHLkSEycOBEHDhxwPG7Pnj341re+hU9/+tNFt8Fv+FagP+I4+PBVnHzEVvutji9VnJpAguu7IOvS46cfrMp4/R5KSYD95ve6CiMMk0qE6ZUEIhf7hx56CDfffDNmzJiB888/H8uWLUPv3r2xfPly22NEUcRNN92Ee++9F2eccUZR5w87TrdsKYXQxEnM9MS1XZzgr2fFjeP0AnfjuJPNZrF161Y0NTVp2wRBQFNTEzZv3mx73Pe//30MHDgQX//6113P0d3djc7OTsOLCatbRT8/JMu89jEKc2TNxxJ3iu3TOA36xbjCvHzHYbuErPrUzzqUCHNVldOiqkjF/tChQxBFEXV1dYbtdXV1aG9vtzzmtddew89//nM8/vjjTOdoaWlBv379tFdDQ4O2L1ArIE4PJvGb0tapPMPS/Mjx+33GSejtcBLmIL/nMiDI69rNqmeZwI0LMVIod44cOYKvfvWrePzxxzFgwACmY+bPn4/Dhw9rr3379rkfxGDVO/oVi/HlhxGxE9QinXIU/DgJvZ2Z6OSr99L/YXxXQf3WTcZSwfUVkXVfTj77SEMvBwwYgFQqhY6ODsP2jo4O1NfXF5T/xz/+gT179mDy5MnaNkkJ2aqqqsLOnTtx5plnGo7JZDLIZDIFdZWtVc+IIfxSHyboJ0Y86tQJZlhDMuMk9EGgE/PEhF2GBBEICCXFP9eXJdwmIV0dqUql02mMGTMGra2t2jZJktDa2orx48cXlD/33HOxY8cObN++XXtdd911uPLKK7F9+3aDi8Y3MV3kFFjkT7HWndMj8IK0HIutS42sMQu63XavBP1Zw/Krx+3Oy4kYGk3l5MaJfFFVc3Mzpk+fjrFjx2LcuHFYvHgxurq6MGPGDADAtGnTMGTIELS0tKCmpgYXXHCB4fiTTz4ZAAq2B4oXYbBL/2u1PaYDS9lRThY8g3h7tupZ6iwm7YHT8V7y5Fg+krIEi6wSNF46EbnYT506FQcPHsSCBQvQ3t6OUaNGYf369dqk7d69eyHEcMRnoph2qwOBF6FycqdY7GNaSWtVp1NGzCDy5STFGi3WfeUlsyVL+WLOFSQRZKcMCxafPPfZe2D27NmYPXu25b62tjbHY1esWBF8g1yIS9qDQHHy23sVfI47XoXerY5SiblqXRcj6IxpjYu9mwgGorzcysSfhJrMIUAE77lwOPYkKQC5lPB+8QTT9RamOzSEfAmvvvoqJk+ejMGDB4MQgjVr1rge09bWhosvvhiZTAZnnXWWLyOXi70bbtarnasmqa4nlaAEyWtoYNKEMKo2J62fzPi9Pliz0wZFCGLf1dWFkSNHYsmSJUzld+/ejWuvvVYLRJkzZw6+8Y1v4MUXX/R03li4cWKLVzcFy+Ss5arCEO8W3HLWF1MPqytHL0xOcwpJxm2+hBWnaCc/bQqiHlasJlB125gmaVlcPCV8Pm0YPvtJkyZh0qRJzOWXLVuG4cOHY9GiRQCA8847D6+99hoefvhhTJw4kbmehJufnMjxE/mR1PXmbpTzZ6tUPFj25rQs3d3dgTRh8+bNhpQyADBx4kTHlDJWcLEH/N8CBhFtY9hW+vkAQ5ieWZjc3qtU+AKewGC16h3eR7KYKuiwYr/XVRiuHDXRmdsLQENDgyE1S0tLSyBNaG9vt0wp09nZiePHjzPXw904Hn4gRU/O8ugVTtAk4c6hhG6XoMM+CZVfbmUAYN++faitrdW2W63cjxIu9nZEKcxRLrZy8+fb7eehmMURpK++VJQont7S11+qAYThGbTq/traWoPYB0V9fb1lSpna2lr06tWLuZ7KduOUQFRd7wZKKZA2whHYrT935/gjoH6z/R5LOWDEYcAP8roOIRrHK+PHjzeklAGADRs2WKaUcaKyxd4Oix9sYRY+wVwgxAZFSJwty0okzO+jBN+1rfHjcn1ZHleKgSUEsT969KiW2wuQQyu3b9+OvXv3ApAz9U6bNk0r/81vfhPvvfce7rzzTrz99ttYunQpnn76acydO9fTeStX7MO06ksdY8+SFpflGNayXvPec+zxkqc+yHTGcfiewrxOGBdJuhKC2L/xxhsYPXo0Ro8eDUDODzZ69GgsWLAAAPDBBx9owg8Aw4cPx9q1a7FhwwaMHDkSixYtwhNPPOEp7BLgPvtC/FgL5WrVO+Hk2+f+ezaKfSBJud11eUmKphKy755IBMTFZ++238wVV1zhmAbCanXsFVdcgTfffNPTecx4Hvr27t1r2VBKqWE0KifKNkVCuTySkOMcQlsmRHIdxsBnHxSexX748OE4ePBgwfYPP/wQw4cPD6RRZU/U0TYWBB6fHQc3QZwpVf9EKfw8hXes8PxtUEotR9ijR4+ipqYmkEZFBqvrwcnXGMecOEEttQ+iXo6/+ZRi/PfFHBM2QVxLIboMCfKx9rav0M4eLMw+++bmZgDyrdTdd9+N3r17a/tEUcSf//xnjBo1KvAGlgzuY3bGzkfv5rsHeN/qCXLinJMnLN+9hzj7uMMs9urkAKUUO3bsQDqd1val02mMHDkS3/rWt4JvYcS4hlyyUg6CF7dnzVYKlTwAmBKjlTzHPYtPPiFfD7PYb9y4EQAwY8YM/PjHPw5lpVjcKHZCyNPx5SyiPDpHppznMdwiaViyX8YQL+kS4o7n0Msnn3wyjHZESzFCFDeR1lvfepFlsMoLHlPIasmzlKt0wff65CkP5Zgm1/XHxDlyhyH80nawCMOVU4mWfdkSpADFcXLWCu6OSQ5Jee5sMTA+ppCtrmAFn0jyy61MEkiIOiWPxMTme7USi4nNL2c3hhNBWvUmCr6vhAh8cq4P9hTHcaeyxd7BqrfOxVEh+XA4nChhCIpwHCyCvFsvo0VV3I1TCpLsq/bi8mH13QPJ7hNWWO9kgsx5E2dKmdc+ICp6grZs8GrVl7gNTPuDwqsPn/v8S4NXYU/yQOADx6geISD3CoPPHtxnX2bEffJV/6MP+qIP48HVCbPwPFPs5yvFw8L9/maiMFKiuv7KyI0TcwWLMX4t2yDzhQQVwRAkXkSjXAXfy+cqd2vc7+89LneOZST2levGscG3Cyfulr8HCuLtvcLdPGwUKfShPVw8CiPCZ/hl2Au0yslnXz4KFSZJFvK4W89xb59X4v554t4+J6K4DrllX55UlFXPre/yJonuoRha99yy5zhiGDTiFGLodEG4La7yOmFYib77oHz1DH3taTFVnIRfdz0EGfUWagRdGVj1QAzEfsmSJRg2bBhqamrQ2NiILVu2OJb/+OOPMWvWLAwaNAiZTAbnnHMO1q1bV3Q7SpK0rBwf5hCUkCRd8INqf5yEOSgSPEmrpktweyWBSN04q1evRnNzM5YtW4bGxkYsXrwYEydOxM6dOzFw4MCC8tlsFldddRUGDhyI3/zmNxgyZAjef/99nHzyyeE1MokuGla4K6c8KccBQyXIPDossFjvCenuSMX+oYcews0334wZM2YAAJYtW4a1a9di+fLlmDdvXkH55cuX48MPP8SmTZtQXV0NABg2bFjR7bC16q2EvpLFMezFV0nNjOnVqq+ExVJBrZa1yoJpI/hh+O65zz4Astkstm7diqampnxjBAFNTU3YvHmz5THPP/88xo8fj1mzZqGurg4XXHAB7r//foii6LsdQfv6mOtLoqj5wevFlzR3TthCX+ZEdv2xwqNxiufQoUMQRRF1dXWG7XV1dXj77bctj3nvvffw8ssv46abbsK6deuwa9cu/Nd//Rd6enqwcOFCy2O6u7vR3d2tve/s7AzuQyQRD9Y2c7w9dwcFA+NA4Cm+vgIHlyAtfJ7iOCIkScLAgQPx2GOPYcyYMZg6dSq+973vYdmyZbbHtLS0oF+/ftqroaFB2xeIFVDOPv2oSIp1n5R2Jom4XU9lZNlH1rMDBgxAKpVCR0eHYXtHRwfq6+stjxk0aBDOOeccpFIpbdt5552H9vZ2ZLNZy2Pmz5+Pw4cPa699+/YBYDBEo/rRRRmxw2IN+bGYKtC6DIywvpOgiOr36nJ9EkKCudnkYl886XQaY8aMQWtrq7ZNkiS0trZi/Pjxlsdcdtll2LVrFyTd5Mw777yDQYMGGR6ArieTyaC2ttbw4iSAuFvNftpX7oNeGbry1Alat1cSiPSeqbm5GY8//jh+8Ytf4O9//ztmzpyJrq4uLTpn2rRpmD9/vlZ+5syZ+PDDD3H77bfjnXfewdq1a3H//fdj1qxZwTbMzmpgeKiCL4q5SIIOQ/MrSG7H+ak3roIfhtCH1e9xxDQPVOBOZX1IUAnuvnmcfUBMnToVBw8exIIFC9De3o5Ro0Zh/fr12qTt3r17Iei+0IaGBrz44ouYO3cuLrroIgwZMgS33347vvOd70T1EQwU/mjLz9LhlDlxzKQaJTzOPjhmz56N2bNnW+5ra2sr2DZ+/Hi8/vrr4TWI1aqPI3ZRMU7x6y6RNJYROXbHVEJUThh3Gx6e6+v7GcFAfO+UWLCKtwfCX2TFxZ7D8YGfwSCpC630xN3VEvf2RQhRXm5lkkDM4pzKCLNAlTpqIcDEWJbWZCkFIi4WaSnb4ceqL7L+wNFfA+bfv+vTrjxcLyH67rnPvlzx4sIp5geWdEuVkwzKzWK3c+WESRm5cbhlrxK3xRylJMgLKKyok6ite7/nD6s/4kpUczZhXr9lEGMPcMs+ekp1cZSD75vjTLkNHDGgnBKhcbEHArEKQn14QqkpNqrG7Xi/9UcxYBVzRxEnqz7qOyMXmPPZOLlyQojM4blxygk3oS8nES8HYi5aJYVb8oUE7c7h6RLKBL9CbzrO1aovxydUAVxswqJc+9XlOnBdSZsv6HyeAAWfp0vgVByBhv0VS6naEqPPHKv+ryTKyLKvXJ+939G/UqJ2WP3qflfTqtarXzdZ2P77YsU1bH99uVr/Zvz64QUBoAHMxZWRz75yxZ7DCYtihLhSRBwI7tGFYVJGcfZc7O0oZmI27IiRYq1un2WZn1xVKsKw7mMoPkwuHC+DRDkMKCVaYEUoBXE5j9v+uFAhPgmPVEIETkJ+oK7EUJwrjqgCEEpxnXKfPScUyi1qh+XOIohMmUFZ+EEMHHF5slRCB3PLePuwM1s6tYf77CsUi8nZslpM5ZdySG3M7xCioVi/fcjunHJaQVtmpmQAFCtaUWe7DJIgLqJSWZgS9S8aEWezZNoXBUG0J6jrIaoouDJy4yRYiUpMUD+2OE1wxoUgRc6rcCctbXApz5MUQryrDGtR1ZIlSzBs2DDU1NSgsbERW7ZssS27YsUK5QHq+VdNTY3nc3KxVyHE848m8S4cH6IR2uKeoAXfqZ3q/gQIva/+Tvhg4Ou6CutapAy57D129+rVq9Hc3IyFCxdi27ZtGDlyJCZOnIgDBw7YHlNbW4sPPvhAe73//vuePwoXe075ohf1MASeU/5QyvbywEMPPYSbb74ZM2bMwPnnn49ly5ahd+/eWL58ue0xhBDU19drL/U53V7gYg+UNNdGpIQpdAm3JiMnzP4rlwEugqSFXtw4nZ2dhld3d3dBfdlsFlu3bkVTU5O2TRAENDU1YfPmzbbtOHr0KIYOHYqGhgZ8/vOfx9/+9jfPn6VMVCwmJN0fH5bg8IFAplL71/URhAFeN0ELvocJ2oaGBvTr1097tbS0FFR36NAhiKJYYJnX1dWhvb3dsgkjRozA8uXL8bvf/Q6//vWvIUkSJkyYgH/+85+ePgoPvfT54/DlV0z6YOBG2Hnw40rcxTaBMOe3tz44sO+EiO4BRESU/9+3bx9qa2u17ZlMJpA2jB8/HuPHj9feT5gwAeeddx5+9rOf4b777mOup7LFPonCklSSKuRBkaSQy2IJM/a9xAusvMTZ19bWGsTeigEDBiCVSqGjo8OwvaOjA/X19Uxtqq6uxujRo7Fr1y6m8iqV68ZhER5BCNdfH0fxM1+kFhdtqOl2kyZ8YS7osernpPVPGLBckz6i6ywJeII2nU5jzJgxaG1t1bZJkoTW1laD9e6EKIrYsWMHBg0a5OmjVLZlHzZJXlDFSQZJFH8iADQZOQbCWEHb3NyM6dOnY+zYsRg3bhwWL16Mrq4uzJgxAwAwbdo0DBkyRPP5f//738ell16Ks846Cx9//DEeeOABvP/++/jGN77h6bxc7MsNs7skJPdJ7DJgcthI0OBQlN8+qDaEkBtn6tSpOHjwIBYsWID29naMGjUK69ev1yZt9+7dC0F39/LRRx/h5ptvRnt7O/r3748xY8Zg06ZNOP/88719Fhp1b5aYzs5O9OvXD/920o2oImnnwja3i7aTs25Lwwv2s5cvOKf+vbmdjmVd2uBhm6XYuz6ikXGAiKOLywzrpePjQSa2rjIGN1vBNn1dbsfr/eGmfQapMLfPbKk7tcGqvFUZ8zkLyjurbI5m8XLX/4fDhw+7+tLNqDpx6TXfR1W182rVXM8JvL5uga/zlBJu2dsRtNDHhbCf8MQJDz92WVxj7BldOY7WfQkma8spERoXeyvKZRFVFFR61I1XKuvGOnno4ugdyyQALvZBEISlHNc7gaiI+6DBRdpIEJOuftIdh2zdE5GCCM5tImIyfguRK4yX7G8AsHjxYowYMQK9evVCQ0MD5s6dixMnTgTXoEqz6sMQraBiyuMqqHH+DHHts6TiYQVt3IlU2bxmf3vqqacwb948LFy4EH//+9/x85//HKtXr8Z3v/vdEre8BHC/evmTZGF2+30GeFfmulo9RAONgCE3TmhnD5ZIxd5r9rdNmzbhsssuw5e//GUMGzYMV199NW688UbXuwFmXH40RaU0ZomCqRSSLHJeqJTPyULYxktYgh9C1suoiEzs/WR/mzBhArZu3aqJ+3vvvYd169bhmmuuKb5Blea+CYBQV9KqxO1CKkF7StKvCSOqZ0e45bJnicOPC5FN0Dplf3v77bctj/nyl7+MQ4cO4VOf+hQopcjlcvjmN7/p6Mbp7u42pBrt7OwsLMQg9Il/UEmSictkbdwGHo6RECZrCaUgLt+72/64kChztq2tDffffz+WLl2Kbdu24bnnnsPatWsdM7+1tLQY0o42NDQYCxRr0Zejb51loQ6ntJTjd2IVgVbs9RT0HbrE+EoAkVn2frK/3X333fjqV7+q5YS48MIL0dXVhf/8z//E9773PcMSY5X58+ejublZe9/Z2ZkX/LBcN0kLoyzCcrZNmxAXazyulDoKqgxgTp8QoIXPLfsA8JP97dixYwWCnkqlANgvq85kMlrqUUMKUg9CnzgXThJ+fF7bGPVnKlF7S+qvj7pP7QjibjmojLV2j7ZM4KMuI11U5TX72+TJk/HQQw9h9OjRaGxsxK5du3D33Xdj8uTJmuiXFNYfZTm6ejgcr/hZNBUxPF1CQHjN/nbXXXeBEIK77roL+/fvx2mnnYbJkyfjv//7v0Nro2erPmkuHC8E7ZrxWl9UrqGo70L8+uuTIKweV96WPBMmS2hlXO+QTFRu1su+N7lnvYSL2FtmfWScdPKQ8dKyHU5ZL837rT5D2Nkv7Y73UyaIY/zi5/JgOcamDPMDS7xmu7QqY1UHa9ZLq/rdMl/atoktA6ZjWyzI0SxePrKyqKyXVzTehaoql6yXuRNo+/MPeNbLJONZ6Nkrdt5fLm4fPklrTaXYV8U8njAuLh8Wn3wc2skAF3sOh+OPuAhyiJRTNA4XexsSF4ETIY5PrXKz7v1Y/6W6YwjDheOwn6+cZadkvvsy8tlzsbfAt9CHsUiEY03Ygp+QCzhxWN0N+EyPXBLBp3BfNJWQnwoXew7HDBf6eBADNxGRKIhL8puk3JFxsTfBZNVzaz1Y/FrpcZsAjnJVbBERQEkmdOueu3EqmDCEPuzYfBZRZBXOOAps0LH/nPjAYN2HKvgS3BPW89w4yYJPyFpQSmEv5lxBtbMYwSj1Qp84EsSjCf2eOiTB59E4HI4Jx4icUlCs4Ed8wSbF7xtnQhF8iSFhfYjPwA2Sihf7wCz6ck6TUCylDJX06/svBXG3AKMUrYDuCtTrOTDR5z778sCz0EdkuXIXkwf85NvhxBsfUTmEEJAgng7LffbJJ1Cht7PqWXLilBFFLa5iLcOCKuBui7lKSaUuprJKmWAn3k7WfURhmNxnzwkO7v4JD+6e4RSLyPAoKjEZpj0Xe068iFtopxthx3jHqC6mCdAwI3KisO65z77C8OOrD9O/H7UYJk2QK5G4u4ZisDqWDQaxT0i+BC72pSRKgTQLtET5SmBOaSgm1XHUcMu+gnATRO5zZ6dS7wgSIgaxwM0NVOo7AlEEqOhcRnLZHxO42DuRFMtXkoJ5uLIVdgIdpnAnZVCIwl/v9xGF5UQpBZ9b9pyyJCkiy+GUConC1SefiLkHLvb2sFj13IVTQGBpE+I+8ARkzZV1jL1fWCJ6SmXdc8uew+GUPXGfWC2F4EsMTy9JyIDNxd4Mq1XqZNUnxdcfBV4s9rha914EMMiVs6znTYj4OIo1a7x+2IIvMSyq4onQOLGHNfzSo+hGngGzkoiz5V0OcDdOGRIXcYq6HaWwpuNqsQdNQkQg8ajXTBgWPhd7DofDKX+oKIK6xNlTHmcfcwTi37r046+3OheP5nEnbncBCbHiSgarz9xusjcIv72+LpWgrHxK3etKyG+icsWekxziIvg8i2ZyEAhAg0qXzcW+MuHWeJ64iHACKev4+iAzX0b4XFsAbI8ljLJ9HuBizwkFHpHDKQeoKIISF5+9W+6cmMDFPki8+OsrHT+PD4w6a2iY5SsBP377qCkjN06kPolXX30VkydPxuDBg0EIwZo1a1yPaWtrw8UXX4xMJoOzzjoLK1asCL2dGtyFwwmbhAhHSYnyupMo2ysBRKpeXV1dGDlyJJYsWcJUfvfu3bj22mtx5ZVXYvv27ZgzZw6+8Y1v4MUXXwy5peBCb0cx4pQUazkp7Sxnorr+KJV98o6vZHzfkbpxJk2ahEmTJjGXX7ZsGYYPH45FixYBAM477zy89tprePjhhzFx4sSwmsmJE6V258TlQo5LOyoM2WfvPNAkxWefKHN18+bNaGpqMmybOHEiNm/eHO6JWawKr5ORSbtT4GITGGUdiaMSxu87gmuGSpTplQQSNUHb3t6Ouro6w7a6ujp0dnbi+PHj6NWrV8Ex3d3d6O7u1t4fPnwYAJCjWQ9nZviRSQ5i72lBVWFZYj7e0rJlKMNynG05H9slgLpZ4X6s9Lhb9i7HEKf9Xh5aYrfdSnxYHnrCeFzBQ8ftxM4qJNHPZ3er0wb1Gnd9SLpjHd2u58yhx3f9pSRRYu+HlpYW3HvvvQXbXzm8OoLWcDicUnPkyBH069fP0zHpdBr19fV4rX0dU/n6+nqk02k/zSsZiRL7+vp6dHR0GLZ1dHSgtrbW0qoHgPnz56O5uVl7//HHH2Po0KHYu3ev5x8AB+js7ERDQwP27duH2traqJuTOHj/FYeX/qOU4siRIxg8eLDn89TU1GD37t3IZtk8AOl0GjU1NZ7PU0oSJfbjx4/HunXGkXbDhg0YP3687TGZTAaZTKZge79+/fjFVgS1tbW8/4qA919xsPZfMQZdTU1N7AXcC5HOEh49ehTbt2/H9u3bAcihldu3b8fevXsByFb5tGnTtPLf/OY38d577+HOO+/E22+/jaVLl+Lpp5/G3Llzo2g+h8PhJIZIxf6NN97A6NGjMXr0aABAc3MzRo8ejQULFgAAPvjgA034AWD48OFYu3YtNmzYgJEjR2LRokV44okneNglh8PhuBCpG+eKK65wnCm3Wh17xRVX4M033/R9zkwmg4ULF1q6djju8P4rDt5/xcH7zz+EFhOXxOFwOJxEkLCVPRwOh8PxAxd7DofDqQC42HM4HE4FUHFiv2TJEgwbNgw1NTVobGzEli1bom5SImhpacEll1yCvn37YuDAgZgyZQp27twZdbMSyQ9/+EMQQjBnzpyom5IY9u/fj6985Ss49dRT0atXL1x44YV44403om5WoqgosV+9ejWam5uxcOFCbNu2DSNHjsTEiRNx4MCBqJsWe1555RXMmjULr7/+OjZs2ICenh5cffXV6OrqirppieIvf/kLfvazn+Giiy6KuimJ4aOPPsJll12G6upq/P73v8f//d//YdGiRejfv3/UTUsUFRWN09jYiEsuuQSPPPIIAECSJDQ0NODWW2/FvHnzIm5dsjh48CAGDhyIV155BZ/5zGeibk4iOHr0KC6++GIsXboUP/jBDzBq1CgsXrw46mbFnnnz5uFPf/oT/vjHP0bdlERTMZZ9NpvF1q1bDSmSBUFAU1NT+CmSyxA1e+gpp5wScUuSw6xZs3DttdcWpOnmOPP8889j7NixuOGGGzBw4ECMHj0ajz/+eNTNShwVI/aHDh2CKIqWKZLb29sjalUykSQJc+bMwWWXXYYLLrgg6uYkglWrVmHbtm1oaWmJuimJ47333sOjjz6Ks88+Gy+++CJmzpyJ2267Db/4xS+iblqiSFQiNE48mDVrFt566y289tprUTclEezbtw+33347NmzYUFaJtUqFJEkYO3Ys7r//fgDA6NGj8dZbb2HZsmWYPn16xK1LDhVj2Q8YMACpVMoyRXJ9fX1ErUoes2fPxgsvvICNGzfi9NNPj7o5iWDr1q04cOAALr74YlRVVaGqqgqvvPIKfvKTn6CqqgqimIzH2kXFoEGDcP755xu2nXfeeYa8WRx3Kkbs0+k0xowZg9bWVm2bJElobW11TJHMkaGUYvbs2fjtb3+Ll19+GcOHD4+6SYnhs5/9LHbs2KFleN2+fTvGjh2Lm266Cdu3b0cqlYq6ibHmsssuKwjzfeeddzB06NCIWpRMKsqN09zcjOnTp2Ps2LEYN24cFi9ejK6uLsyYMSPqpsWeWbNm4amnnsLvfvc79O3bV5vn6Nevn+2DYzgyffv2LZjbOOmkk3DqqafyOQ8G5s6diwkTJuD+++/HF7/4RWzZsgWPPfYYHnvssaiblixohfHTn/6UfuITn6DpdJqOGzeOvv7661E3KREAsHw9+eSTUTctkVx++eX09ttvj7oZieF///d/6QUXXEAzmQw999xz6WOPPRZ1kxJHRcXZczgcTqVSMT57DofDqWS42HM4HE4FwMWew+FwKgAu9hwOh1MBcLHncDicCoCLPYfD4VQAXOw5HA6nAuBiz+FwOBUAF3sOh8OpALjYczgcTgXAxZ7D4XAqAC72nLLl4MGDqK+v1x56AQCbNm1COp02pLrmcCoBngiNU9asW7cOU6ZMwaZNmzBixAiMGjUKn//85/HQQw9F3TQOp6RwseeUPbNmzcJLL72EsWPHYseOHfjLX/6CTCYTdbM4nJLCxZ5T9hw/fhwXXHAB9u3bh61bt+LCCy+MukkcTsnhPntO2fOPf/wD//rXvyBJEvbs2RN1czicSOCWPaesyWazGDduHEaNGoURI0Zg8eLF2LFjBwYOHBh10zicksLFnlPWfPvb38ZvfvMb/PWvf0WfPn1w+eWXo1+/fnjhhReibhqHU1K4G4dTtrS1tWHx4sX41a9+hdraWgiCgF/96lf44x//iEcffTTq5nE4JYVb9hwOh1MBcMuew+FwKgAu9hwOh1MBcLHncDicCoCLPYfD4VQAXOw5HA6nAuBiz+FwOBUAF3sOh8OpALjYczgcTgXAxZ7D4XAqAC72HA6HUwFwsedwOJwKgIs9h8PhVAD/P9EK/qGQpmRbAAAAAElFTkSuQmCC"},"metadata":{}}]}]}